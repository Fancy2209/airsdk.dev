"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[39948],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),h=r,f=p["".concat(l,".").concat(h)]||p[h]||m[h]||i;return t?a.createElement(f,o(o({ref:n},d),{},{components:t})):a.createElement(f,o({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},19332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const i={sidebar_position:2},o="Creating and modifying a database",s={unversionedId:"development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database",id:"development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database",title:"Creating and modifying a database",description:"Before your application can add or retrieve data, there must be a database with",source:"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database.md",sourceDirName:"development/files-and-data/working-with-local-sql-databases-in-air",slug:"/development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"About local SQL databases",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/about-local-sql-databases"},next:{title:"Manipulating SQL database data",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/manipulating-sql-database-data"}},l={},c=[{value:"Creating a database",id:"creating-a-database",level:2},{value:"Creating database tables",id:"creating-database-tables",level:2}],d={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-and-modifying-a-database"},"Creating and modifying a database"),(0,r.kt)("p",null,"Before your application can add or retrieve data, there must be a database with\ntables defined in it that your application can access. Described here are the\ntasks of creating a database and creating the data structure within a database.\nWhile these tasks are less frequently used than data insertion and retrieval,\nthey are necessary for most applications."),(0,r.kt)("h2",{id:"creating-a-database"},"Creating a database"),(0,r.kt)("p",null,"To create a database file, you first create a\n",(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html"},"SQLConnection"),"\ninstance. You call its ",(0,r.kt)("inlineCode",{parentName:"p"},"open()")," method to open it in synchronous execution mode,\nor its ",(0,r.kt)("inlineCode",{parentName:"p"},"openAsync()")," method to open it in asynchronous execution mode. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"open()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"openAsync()")," methods are used to open a connection to a database.\nIf you pass a File instance that refers to a non-existent file location for the\n",(0,r.kt)("inlineCode",{parentName:"p"},"reference")," parameter (the first parameter), the ",(0,r.kt)("inlineCode",{parentName:"p"},"open()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"openAsync()"),"\nmethod creates a database file at that file location and open a connection to\nthe newly created database."),(0,r.kt)("p",null,"Whether you call the ",(0,r.kt)("inlineCode",{parentName:"p"},"open()")," method or the ",(0,r.kt)("inlineCode",{parentName:"p"},"openAsync()")," method to create a\ndatabase, the database file's name can be any valid filename, with any filename\nextension. If you call the ",(0,r.kt)("inlineCode",{parentName:"p"},"open()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"openAsync()")," method with ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," for the\n",(0,r.kt)("inlineCode",{parentName:"p"},"reference")," parameter, a new in-memory database is created rather than a\ndatabase file on disk."),(0,r.kt)("p",null,"The following code listing shows the process of creating a database file (a new\ndatabase) using asynchronous execution mode. In this case, the database file is\nsaved in the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/working-with-file-objects-in-air#pointing-to-the-application-storage-directory"},"Pointing to the application storage directory"),',\nwith the filename "DBSample.db":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import flash.data.SQLConnection;\nimport flash.events.SQLErrorEvent;\nimport flash.events.SQLEvent;\nimport flash.filesystem.File;\n\nvar conn:SQLConnection = new SQLConnection();\n\nconn.addEventListener(SQLEvent.OPEN, openHandler);\nconn.addEventListener(SQLErrorEvent.ERROR, errorHandler);\n\n// The database file is in the application storage directory\nvar folder:File = File.applicationStorageDirectory;\nvar dbFile:File = folder.resolvePath("DBSample.db");\n\nconn.openAsync(dbFile);\n\nfunction openHandler(event:SQLEvent):void\n{\n    trace("the database was created successfully");\n}\n\nfunction errorHandler(event:SQLErrorEvent):void\n{\n    trace("Error message:", event.error.message);\n    trace("Details:", event.error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n    <mx:Script>\n        <![CDATA[\n            import flash.data.SQLConnection;\n            import flash.events.SQLErrorEvent;\n            import flash.events.SQLEvent;\n            import flash.filesystem.File;\n\n            private function init():void\n            {\n                var conn:SQLConnection = new SQLConnection();\n\n                conn.addEventListener(SQLEvent.OPEN, openHandler);\n                conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);\n\n                // The database file is in the application storage directory\n                var folder:File = File.applicationStorageDirectory;\n                var dbFile:File = folder.resolvePath("DBSample.db");\n\n                conn.openAsync(dbFile);\n            }\n\n            private function openHandler(event:SQLEvent):void\n            {\n                trace("the database was created successfully");\n            }\n\n            private function errorHandler(event:SQLErrorEvent):void\n            {\n                trace("Error message:", event.error.message);\n                trace("Details:", event.error.details);\n            }\n        ]]>\n    </mx:Script>\n</mx:WindowedApplication>\n')),(0,r.kt)("p",null,"Note: Although the File class lets you point to a specific native file path,\ndoing so can lead to applications that will not work across platforms. For\nexample, the path C:\\Documents and Settings\\joe\\test.db only works on Windows.\nFor these reasons, it is best to use the static properties of the\n",(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/filesystem/File.html"},"File class"),"\nsuch as ",(0,r.kt)("inlineCode",{parentName:"p"},"File.applicationStorageDirectory"),", as well as the ",(0,r.kt)("inlineCode",{parentName:"p"},"resolvePath()"),"\nmethod (as shown in the previous example). For more information, see\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/working-with-file-objects-in-air#paths-of-file-objects"},"Paths of File objects"),"."),(0,r.kt)("p",null,"To execute operations synchronously, when you open a database connection with\nthe SQLConnection instance, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"open()")," method. The following example\nshows how to create and open a SQLConnection instance that executes its\noperations synchronously:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import flash.data.SQLConnection;\nimport flash.errors.SQLError;\nimport flash.filesystem.File;\n\nvar conn:SQLConnection = new SQLConnection();\n\n// The database file is in the application storage directory\nvar folder:File = File.applicationStorageDirectory;\nvar dbFile:File = folder.resolvePath("DBSample.db");\n\ntry\n{\n    conn.open(dbFile);\n    trace("the database was created successfully");\n}\ncatch (error:SQLError)\n{\n    trace("Error message:", error.message);\n    trace("Details:", error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n    <mx:Script>\n        <![CDATA[\n            import flash.data.SQLConnection;\n            import flash.errors.SQLError;\n            import flash.filesystem.File;\n\n            private function init():void\n            {\n                var conn:SQLConnection = new SQLConnection();\n\n                // The database file is in the application storage directory\n                var folder:File = File.applicationStorageDirectory;\n                var dbFile:File = folder.resolvePath("DBSample.db");\n\n                try\n                {\n                    conn.open(dbFile);\n                    trace("the database was created successfully");\n                }\n                catch (error:SQLError)\n                {\n                    trace("Error message:", error.message);\n                    trace("Details:", error.details);\n                }\n            }\n        ]]>\n    </mx:Script>\n</mx:WindowedApplication>\n')),(0,r.kt)("h2",{id:"creating-database-tables"},"Creating database tables"),(0,r.kt)("p",null,"Creating a table in a database involves\n",(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html#execute()"},"executing a SQL statement"),"\non that database, using the same process that you use to execute a SQL statement\nsuch as ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT"),", and so forth. To create a table, you use a\n",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE TABLE")," statement, which includes definitions of columns and constraints\nfor the new table. For more information about executing SQL statements, see\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-sql-statements"},"Working with SQL statements"),"."),(0,r.kt)("p",null,'The following example demonstrates creating a table named "employees" in an\nexisting database file, using asynchronous execution mode. Note that this code\nassumes there is a\n',(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html"},"SQLConnection"),"\ninstance named ",(0,r.kt)("inlineCode",{parentName:"p"},"conn")," that is already instantiated and is already connected to a\ndatabase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import flash.data.SQLConnection;\nimport flash.data.SQLStatement;\nimport flash.events.SQLErrorEvent;\nimport flash.events.SQLEvent;\n\n// ... create and open the SQLConnection instance named conn ...\n\nvar createStmt:SQLStatement = new SQLStatement();\ncreateStmt.sqlConnection = conn;\n\nvar sql:String =\n    "CREATE TABLE IF NOT EXISTS employees (" +\n    "    empId INTEGER PRIMARY KEY AUTOINCREMENT, " +\n    "    firstName TEXT, " +\n    "    lastName TEXT, " +\n    "    salary NUMERIC CHECK (salary > 0)" +\n    ")";\ncreateStmt.text = sql;\n\ncreateStmt.addEventListener(SQLEvent.RESULT, createResult);\ncreateStmt.addEventListener(SQLErrorEvent.ERROR, createError);\n\ncreateStmt.execute();\n\nfunction createResult(event:SQLEvent):void\n{\n    trace("Table created");\n}\n\nfunction createError(event:SQLErrorEvent):void\n{\n    trace("Error message:", event.error.message);\n    trace("Details:", event.error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n    <mx:Script>\n        <![CDATA[\n            import flash.data.SQLConnection;\n            import flash.data.SQLStatement;\n            import flash.events.SQLErrorEvent;\n            import flash.events.SQLEvent;\n\n            private function init():void\n            {\n                // ... create and open the SQLConnection instance named conn ...\n\n                var createStmt:SQLStatement = new SQLStatement();\n                createStmt.sqlConnection = conn;\n\n                var sql:String =\n                    "CREATE TABLE IF NOT EXISTS employees (" +\n                    "    empId INTEGER PRIMARY KEY AUTOINCREMENT, " +\n                    "    firstName TEXT, " +\n                    "    lastName TEXT, " +\n                    "    salary NUMERIC CHECK (salary > 0)" +\n                    ")";\n                createStmt.text = sql;\n\n                createStmt.addEventListener(SQLEvent.RESULT, createResult);\n                createStmt.addEventListener(SQLErrorEvent.ERROR, createError);\n\n                createStmt.execute();\n            }\n\n            private function createResult(event:SQLEvent):void\n            {\n                trace("Table created");\n            }\n\n            private function createError(event:SQLErrorEvent):void\n            {\n                trace("Error message:", event.error.message);\n                trace("Details:", event.error.details);\n            }\n        ]]>\n    </mx:Script>\n</mx:WindowedApplication>\n')),(0,r.kt)("p",null,'The following example demonstrates how to create a table named "employees" in an\nexisting database file, using synchronous execution mode. Note that this code\nassumes there is a\n',(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html"},"SQLConnection"),"\ninstance named ",(0,r.kt)("inlineCode",{parentName:"p"},"conn")," that is already instantiated and is already connected to a\ndatabase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import flash.data.SQLConnection;\nimport flash.data.SQLStatement;\nimport flash.errors.SQLError;\n\n// ... create and open the SQLConnection instance named conn ...\n\nvar createStmt:SQLStatement = new SQLStatement();\ncreateStmt.sqlConnection = conn;\n\nvar sql:String =\n    "CREATE TABLE IF NOT EXISTS employees (" +\n    "    empId INTEGER PRIMARY KEY AUTOINCREMENT, " +\n    "    firstName TEXT, " +\n    "    lastName TEXT, " +\n    "    salary NUMERIC CHECK (salary > 0)" +\n    ")";\ncreateStmt.text = sql;\n\ntry\n{\n    createStmt.execute();\n    trace("Table created");\n}\ncatch (error:SQLError)\n{\n    trace("Error message:", error.message);\n    trace("Details:", error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n    <mx:Script>\n        <![CDATA[\n            import flash.data.SQLConnection;\n            import flash.data.SQLStatement;\n            import flash.errors.SQLError;\n\n            private function init():void\n            {\n                // ... create and open the SQLConnection instance named conn ...\n\n                var createStmt:SQLStatement = new SQLStatement();\n                createStmt.sqlConnection = conn;\n\n                var sql:String =\n                    "CREATE TABLE IF NOT EXISTS employees (" +\n                    "    empId INTEGER PRIMARY KEY AUTOINCREMENT, " +\n                    "    firstName TEXT, " +\n                    "    lastName TEXT, " +\n                    "    salary NUMERIC CHECK (salary > 0)" +\n                    ")";\n                createStmt.text = sql;\n\n                try\n                {\n                    createStmt.execute();\n                    trace("Table created");\n                }\n                catch (error:SQLError)\n                {\n                    trace("Error message:", error.message);\n                    trace("Details:", error.details);\n                }\n            }\n        ]]>\n    </mx:Script>\n</mx:WindowedApplication>\n')),(0,r.kt)("p",null,"More Help topics"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20120309072807/http://www.mindtheflex.com/?p=83"},"Mind the Flex: Updating an existing AIR database")))}m.isMDXComponent=!0}}]);