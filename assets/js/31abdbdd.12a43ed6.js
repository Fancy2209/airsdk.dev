"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[58826],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>k});var a=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var d=a.createContext({}),p=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},s=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},m="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,d=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),m=p(n),c=i,k=m["".concat(d,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(k,o(o({ref:e},s),{},{components:n})):a.createElement(k,o({ref:e},s))}));function k(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=t,l[m]="string"==typeof t?t:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},37241:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:10},o="Using cue points and metadata",l={unversionedId:"development/rich-media-content/working-with-video/using-cue-points-and-metadata",id:"development/rich-media-content/working-with-video/using-cue-points-and-metadata",title:"Using cue points and metadata",description:"Use the NetStream callback methods to capture and process cue point and metadata",source:"@site/docs/development/rich-media-content/working-with-video/using-cue-points-and-metadata.md",sourceDirName:"development/rich-media-content/working-with-video",slug:"/development/rich-media-content/working-with-video/using-cue-points-and-metadata",permalink:"/docs/development/rich-media-content/working-with-video/using-cue-points-and-metadata",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-video/using-cue-points-and-metadata.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"mainSidebar",previous:{title:"Writing callback methods for metadata and cue points",permalink:"/docs/development/rich-media-content/working-with-video/writing-callback-methods-for-metadata-and-cue-points"},next:{title:"Monitoring NetStream activity",permalink:"/docs/development/rich-media-content/working-with-video/monitoring-netstream-activity"}},d={},p=[{value:"Using cue points",id:"using-cue-points",level:2},{value:"Using video metadata",id:"using-video-metadata",level:2},{value:"Using OnMetaData()",id:"using-onmetadata",level:3},{value:"Using the information object",id:"using-the-information-object",level:4},{value:"Using onXMPData()",id:"using-onxmpdata",level:3},{value:"Using image metadata",id:"using-image-metadata",level:2},{value:"Using text metadata",id:"using-text-metadata",level:2}],s={toc:p},m="wrapper";function u(t){let{components:e,...r}=t;return(0,i.kt)(m,(0,a.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-cue-points-and-metadata"},"Using cue points and metadata"),(0,i.kt)("p",null,"Use the NetStream callback methods to capture and process cue point and metadata\nevents as the video plays."),(0,i.kt)("h2",{id:"using-cue-points"},"Using cue points"),(0,i.kt)("p",null,"The following table describes the callback methods that you can use to capture\nF4V and FLV cue points in Flash Player and AIR."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Runtime"),(0,i.kt)("th",{parentName:"tr",align:null},"F4V"),(0,i.kt)("th",{parentName:"tr",align:null},"FLV"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Flash Player 9/ AIR1.0"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"OnCuePoint")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"OnMetaData")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Flash Player 10"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"OnCuePoint")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"OnMetaData"),(0,i.kt)("td",{parentName:"tr",align:null},"OnMetaData")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"OnXMPData"),(0,i.kt)("td",{parentName:"tr",align:null},"OnXMPData")))),(0,i.kt)("p",null,"The following example uses a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"for..in")," loop to iterate over each of the\nproperties in the ",(0,i.kt)("inlineCode",{parentName:"p"},"infoObject")," parameter that the ",(0,i.kt)("inlineCode",{parentName:"p"},"onCuePoint()")," function\nreceives. It calls the trace() function to display a message when it receives\ncue point data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'var nc:NetConnection = new NetConnection();\nnc.connect(null);\n\nvar ns:NetStream = new NetStream(nc);\nns.client = this;\nns.play("video.flv");\n\nvar vid:Video = new Video();\nvid.attachNetStream(ns);\naddChild(vid);\n\nfunction onCuePoint(infoObject:Object):void\n{\n    var key:String;\n    for (key in infoObject)\n    {\n        trace(key + ": " + infoObject[key]);\n    }\n}\n')),(0,i.kt)("p",null,"The following output appears:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"parameters:\nname: point1\ntime: 0.418\ntype: navigation\n")),(0,i.kt)("p",null,"This code uses one of several techniques to set the object on which the callback\nmethod runs. You can use other techniques; for more information, see\n",(0,i.kt)("a",{parentName:"p",href:"/docs/development/rich-media-content/working-with-video/writing-callback-methods-for-metadata-and-cue-points"},"Writing callback methods for metadata and cue points"),"."),(0,i.kt)("h2",{id:"using-video-metadata"},"Using video metadata"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"OnMetaData()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"OnXMPData()")," functions to access the\nmetadata information in your video file, including cue points."),(0,i.kt)("h3",{id:"using-onmetadata"},"Using OnMetaData()"),(0,i.kt)("p",null,"Metadata includes information about your video file, such as duration, width,\nheight, and frame rate. The metadata information that is added to your video\nfile depends on the software you use to encode the video file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'var nc:NetConnection = new NetConnection();\nnc.connect(null);\n\nvar ns:NetStream = new NetStream(nc);\nns.client = this;\nns.play("video.flv");\n\nvar vid:Video = new Video();\nvid.attachNetStream(ns);\naddChild(vid);\n\nfunction onMetaData(infoObject:Object):void\n{\n    var key:String;\n    for (key in infoObject)\n    {\n        trace(key + ": " + infoObject[key]);\n    }\n}\n')),(0,i.kt)("p",null,"The previous code generates output like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"width: 320\naudiodelay: 0.038\ncanSeekToEnd: true\nheight: 213\ncuePoints: ,,\naudiodatarate: 96\nduration: 16.334\nvideodatarate: 400\nframerate: 15\nvideocodecid: 4\naudiocodecid: 2\n")),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(39683).Z,width:"17",height:"21"})," If your video does not have audio, the audio-related\nmetadata information (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"audiodatarate"),") returns ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," ",(0,i.kt)("em",{parentName:"p"},"because no\naudio information is added to the metadata during encoding.")),(0,i.kt)("p",null,"In the previous code, the cue point information was not displaying. To display\nthe cue point metadata, you can use the following function which recursively\ndisplays the items in an Object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'function traceObject(obj:Object, indent:uint = 0):void\n{\n    var indentString:String = "";\n    var i:uint;\n    var prop:String;\n    var val:*;\n    for (i = 0; i < indent; i++)\n    {\n        indentString += "\\t";\n    }\n    for (prop in obj)\n    {\n        val = obj[prop];\n        if (typeof(val) == "object")\n        {\n            trace(indentString + " " + prop + ": [Object]");\n            traceObject(val, indent + 1);\n        }\n        else\n        {\n            trace(indentString + " " + prop + ": " + val);\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Using the previous code snippet to trace the ",(0,i.kt)("inlineCode",{parentName:"p"},"infoObject")," parameter in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"onMetaData()")," method creates the following output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"width: 320\naudiodatarate: 96\naudiocodecid: 2\nvideocodecid: 4\nvideodatarate: 400\ncanSeekToEnd: true\nduration: 16.334\naudiodelay: 0.038\nheight: 213\nframerate: 15\ncuePoints: [Object]\n0: [Object]\n    parameters: [Object]\n        lights: beginning\n    name: point1\n    time: 0.418\n    type: navigation\n1: [Object]\n    parameters: [Object]\n        lights: middle\n    name: point2\n    time: 7.748\n    type: navigation\n2: [Object]\n    parameters: [Object]\n        lights: end\n    name: point3\n    time: 16.02\n    type: navigation\n")),(0,i.kt)("p",null,"The following example displays the metadata for an MP4 video. It assumes that\nthere is a TextArea object called ",(0,i.kt)("inlineCode",{parentName:"p"},"metaDataOut"),", to which it writes the\nmetadata."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package\n{\n    import flash.net.NetConnection;\n    import flash.net.NetStream;\n    import flash.events.NetStatusEvent;\n    import flash.media.Video;\n    import flash.display.StageDisplayState;\n    import flash.display.Loader;\n    import flash.display.Sprite;\n    import flash.events.MouseEvent;\n\n    public class onMetaDataExample extends Sprite\n    {\n        var video:Video = new Video();\n\n        public function onMetaDataExample():void\n        {\n            var videoConnection:NetConnection = new NetConnection();\n            videoConnection.connect(null);\n\n            var videoStream:NetStream = new NetStream(videoConnection);\n            videoStream.client = this;\n\n            addChild(video);\n            video.x = 185;\n            video.y = 5;\n\n            video.attachNetStream(videoStream);\n\n            videoStream.play("video.mp4");\n\n            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);\n        }\n\n        public function onMetaData(infoObject:Object):void\n        {\n            for(var propName:String in infoObject)\n            {\n                metaDataOut.appendText(propName + "=" + infoObject[propName] + "\\n");\n            }\n        }\n\n        private function netStatusHandler(event:NetStatusEvent):void\n        {\n            if(event.info.code == "NetStream.Play.Stop")\n                stage.displayState = StageDisplayState.NORMAL;\n        }\n    }\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onMetaData()")," function produced the following output for this video:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"moovposition=731965\nheight=352\navclevel=21\nvideocodecid=avc1\nduration=2.36\nwidth=704\nvideoframerate=25\navcprofile=88\ntrackinfo=[object Object]\n")),(0,i.kt)("h4",{id:"using-the-information-object"},"Using the information object"),(0,i.kt)("p",null,"The following table shows the possible values for video metadata that are passed\nto the ",(0,i.kt)("inlineCode",{parentName:"p"},"onMetaData()")," callback function in the Object that they receive:"),(0,i.kt)("table",null,(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,(0,i.kt)("p",null,"Parameter")),(0,i.kt)("th",null,(0,i.kt)("p",null,"Description")))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"aacaot")),(0,i.kt)("td",null,(0,i.kt)("p",null,"AAC audio object type; 0, 1, or 2 are supported."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"avclevel")),(0,i.kt)("td",null,(0,i.kt)("p",null,"AVC IDC level number such as 10, 11, 20, 21, and so on."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"avcprofile")),(0,i.kt)("td",null,(0,i.kt)("p",null,"AVC profile number such as 55, 77, 100, and so on."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"audiocodecid")),(0,i.kt)("td",null,(0,i.kt)("p",null,'A string that indicates the audio codec (code/decode technique) that was used - for example ".mp3" or "mp4a"'))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"audiodatarate")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A number that indicates the rate at which audio was encoded, in kilobytes per second."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"audiodelay")),(0,i.kt)("td",null,(0,i.kt)("p",null,'A number that indicates what time in the FLV file "time 0" of the original FLV file exists. The video content needs to be delayed by a small amount to properly synchronize the audio.'))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"canSeekToEnd")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A Boolean value that is ",(0,i.kt)("samp",null,"true")," if the FLV file is encoded with a keyframe on the last frame, which allows seeking to the end of a progressive -download video file. It is ",(0,i.kt)("samp",null,"false")," if the FLV file is not encoded with a keyframe on the last frame."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"cuePoints")),(0,i.kt)("td",null,(0,i.kt)("p",null,"An array of objects, one for each cue point embedded in the FLV file. Value is undefined if the FLV file does not contain any cue points. Each object has the following properties:"),(0,i.kt)("ul",{class:"incremental"},(0,i.kt)("li",null,(0,i.kt)("p",null,(0,i.kt)("samp",null,"type"),': a string that specifies the type of cue point as either "navigation" or "event".')),(0,i.kt)("li",null,(0,i.kt)("p",null,(0,i.kt)("samp",null,"name"),": a string that is the name of the cue point.")),(0,i.kt)("li",null,(0,i.kt)("p",null,(0,i.kt)("samp",null,"time"),": a number that is the time of the cue point in seconds with a precision of three decimal places (milliseconds).")),(0,i.kt)("li",null,(0,i.kt)("p",null,(0,i.kt)("samp",null,"parameters"),": an optional object that has name-value pairs that are designated by the user when creating the cue points."))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"duration")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A number that specifies the duration of the video file, in seconds."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"framerate")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A number that is the frame rate of the FLV file."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"height")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A number that is the height of the FLV file, in pixels."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"seekpoints")),(0,i.kt)("td",null,(0,i.kt)("p",null,"An array that lists the available keyframes as timestamps in milliseconds. Optional."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"tags")),(0,i.kt)("td",null,(0,i.kt)("p",null,'An array of key-value pairs that represent the information in the "ilst" atom, which is the equivalent of ID3 tags for MP4 files. iTunes uses these tags. Can be used to display artwork, if available.'))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"trackinfo")),(0,i.kt)("td",null,(0,i.kt)("p",null,"Object that provides information on all the tracks in the MP4 file, including their sample description ID."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"videocodecid")),(0,i.kt)("td",null,(0,i.kt)("p",null,'A string that is the codec version that was used to encode the video. - for example, "avc1" or "VP6F"'))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"videodatarate")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A number that is the video data rate of the FLV file."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"videoframerate")),(0,i.kt)("td",null,(0,i.kt)("p",null,"Framerate of the MP4 video."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"width")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A number that is the width of the FLV file, in pixels."))))),(0,i.kt)("p",null,"The following table shows the possible values for the ",(0,i.kt)("inlineCode",{parentName:"p"},"videocodecid")," parameter:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"videocodecid"),(0,i.kt)("th",{parentName:"tr",align:null},"Codec name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"Sorenson H.263")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},"Screen video (SWF version 7 and later only)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"VP6 (SWF version 8 and later only)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"VP6 video with alpha channel (SWF version 8 and later only)")))),(0,i.kt)("p",null,"The following table shows the possible values for the ",(0,i.kt)("inlineCode",{parentName:"p"},"audiocodecid")," parameter:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"audiocodecid"),(0,i.kt)("th",{parentName:"tr",align:null},"Codec Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"uncompressed")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"ADPCM")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"Mp3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"Nellymoser @ 16 kHz mono")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"Nellymoser, 8kHz mono")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"6"),(0,i.kt)("td",{parentName:"tr",align:null},"Nellymoser")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"10"),(0,i.kt)("td",{parentName:"tr",align:null},"AAC")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"11"),(0,i.kt)("td",{parentName:"tr",align:null},"Speex")))),(0,i.kt)("h3",{id:"using-onxmpdata"},"Using onXMPData()"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onXMPData()")," callback function receives information specific to Adobe\nExtensible Metadata Platform (XMP) that is embedded in the Adobe F4V or FLV\nvideo file. The XMP metadata includes cue points as well as other video\nmetadata. XMP metadata support is introduced with Flash Player 10 and Adobe AIR\n1.5 and supported by subsequent versions."),(0,i.kt)("p",null,"The following example processes cue point data in the XMP metadata:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package\n{\n    import flash.display.*;\n    import flash.net.*;\n    import flash.events.NetStatusEvent;\n    import flash.media.Video;\n\n    public class onXMPDataExample extends Sprite\n    {\n        public function onXMPDataExample():void\n        {\n            var videoConnection:NetConnection = new NetConnection();\n            videoConnection.connect(null);\n\n            var videoStream:NetStream = new NetStream(videoConnection);\n            videoStream.client = this;\n            var video:Video = new Video();\n\n            addChild(video);\n\n            video.attachNetStream(videoStream);\n\n            videoStream.play("video.f4v");\n        }\n\n        public function onMetaData(info:Object):void {\n            trace("onMetaData fired");\n        }\n\n        public function onXMPData(infoObject:Object):void\n        {\n            trace("onXMPData Fired\\n");\n            //trace("raw XMP =\\n");\n            //trace(infoObject.data);\n            var cuePoints:Array = new Array();\n            var cuePoint:Object;\n            var strFrameRate:String;\n            var nTracksFrameRate:Number;\n            var strTracks:String = "";\n            var onXMPXML = new XML(infoObject.data);\n            // Set up namespaces to make referencing easier\n            var xmpDM:Namespace = new Namespace("http://ns.adobe.com/xmp/1.0/DynamicMedia/");\n            var rdf:Namespace = new Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#");\n            for each (var it:XML in onXMPXML..xmpDM::Tracks)\n            {\n                var strTrackName:String = it.rdf::Bag.rdf::li.rdf::Description.@xmpDM::trackName;\n                var strFrameRateXML:String = it.rdf::Bag.rdf::li.rdf::Description.@xmpDM::frameRate;\n                strFrameRate = strFrameRateXML.substr(1,strFrameRateXML.length);\n\n                nTracksFrameRate = Number(strFrameRate);\n\n                strTracks += it;\n            }\n            var onXMPTracksXML:XML = new XML(strTracks);\n            var strCuepoints:String = "";\n            for each (var item:XML in onXMPTracksXML..xmpDM::markers)\n            {\n                strCuepoints += item;\n            }\n            trace(strCuepoints);\n        }\n    }\n}\n')),(0,i.kt)("p",null,"For a short video file called startrekintro.f4v, this example produces the\nfollowing trace lines. The lines show the cue point data for navigation and\nevent cue points in the XMP meta data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'onMetaData fired\nonXMPData Fired\n\n<xmpDM:markers xmlns:xmp="http://ns.adobe.com/xap/1.0/" xmlns:xmpDM="http://ns.adobe.com/xmp/1.0/DynamicMedia/" xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#" xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/" xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:x="adobe:ns:meta/">\n<rdf:Seq>\n<rdf:li>\n  <rdf:Description xmpDM:startTime="7695905817600" xmpDM:name="Title1" xmpDM:type="FLVCuePoint" xmpDM:cuePointType="Navigation">\n    <xmpDM:cuePointParams>\n      <rdf:Seq>\n        <rdf:li xmpDM:key="Title" xmpDM:value="Star Trek"/>\n        <rdf:li xmpDM:key="Color" xmpDM:value="Blue"/>\n      </rdf:Seq>\n    </xmpDM:cuePointParams>\n  </rdf:Description>\n</rdf:li>\n<rdf:li>\n  <rdf:Description xmpDM:startTime="10289459980800" xmpDM:name="Title2" xmpDM:type="FLVCuePoint" xmpDM:cuePointType="Event">\n    <xmpDM:cuePointParams>\n      <rdf:Seq>\n        <rdf:li xmpDM:key="William Shatner" xmpDM:value="First Star"/>\n        <rdf:li xmpDM:key="Color" xmpDM:value="Light Blue"/>\n      </rdf:Seq>\n    </xmpDM:cuePointParams>\n  </rdf:Description>\n</rdf:li>\n</rdf:Seq>\n</xmpDM:markers>\nonMetaData fired\n')),(0,i.kt)("p",null,"Note: In XMP data, time is stored as DVA Ticks rather than seconds. To compute\nthe cue point time, divide the start time by the framerate. For example, the\nstart time of 7695905817600 divided by a framerate of 254016000000 equals 30:30."),(0,i.kt)("p",null,"To see the complete raw XMP metadata, which includes the framerate, remove the\ncomment identifiers (//'s) preceding the second and third ",(0,i.kt)("inlineCode",{parentName:"p"},"trace()")," statements\nat the beginning of the ",(0,i.kt)("inlineCode",{parentName:"p"},"onXMPData()")," function."),(0,i.kt)("p",null,"For more information on XMP, see:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20080304172551/http://partners.adobe.com/public/developer/xmp/topic.html"},"Adobe Extensible Metadata Platform (XMP)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20140302023642/http://www.adobe.com/devnet/xmp.html"},"Adobe XMP Developer Center")))),(0,i.kt)("h2",{id:"using-image-metadata"},"Using image metadata"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onImageData")," event sends image data as a byte array through an AMF0 data\nchannel. The data can be in JPEG, PNG, or GIF formats. Define an ",(0,i.kt)("inlineCode",{parentName:"p"},"onImageData()"),"\ncallback method to process this information, in the same way that you would\ndefine callback methods for ",(0,i.kt)("inlineCode",{parentName:"p"},"onCuePoint")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onMetaData"),". The following example\naccesses and displays image data using an ",(0,i.kt)("inlineCode",{parentName:"p"},"onImageData()")," callback method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public function onImageData(imageData:Object):void\n{\n    // display track number\n    trace(imageData.trackid);\n    var loader:Loader = new Loader();\n    //imageData.data is a ByteArray object\n    loader.loadBytes(imageData.data);\n    addChild(loader);\n}\n")),(0,i.kt)("h2",{id:"using-text-metadata"},"Using text metadata"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onTextData")," event sends text data through an AMF0 data channel. The text\ndata is in UTF-8 format and contains additional information about formatting,\nbased on the 3GP timed-text specification. This specification defines a\nstandardized subtitle format. Define an ",(0,i.kt)("inlineCode",{parentName:"p"},"onTextData()")," callback method to\nprocess this information, in the same way that you would define callback methods\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"onCuePoint")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"onMetaData"),". In the following example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"onTextData()"),"\nmethod displays the track ID number and corresponding track text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public function onTextData(textData:Object):void\n{\n    // display the track number\n    trace(textData.trackid);\n    // displays the text, which can be a null string, indicating old text\n    // that should be erased\n    trace(textData.text);\n}\n")))}u.isMDXComponent=!0},39683:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/tip_help-3d4c326bf05518d713f5bf1c3f47bcde.png"}}]);