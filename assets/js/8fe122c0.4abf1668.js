"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[31065],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,u=c["".concat(l,".").concat(h)]||c[h]||m[h]||i;return n?a.createElement(u,o(o({ref:t},d),{},{components:n})):a.createElement(u,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},48506:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o="Understanding 3D display objects in Flash Player and the AIR runtime",s={unversionedId:"development/display/working-in-three-dimensions/understanding-3d-display-objects-in-flash-player-and-the-air-runtime",id:"development/display/working-in-three-dimensions/understanding-3d-display-objects-in-flash-player-and-the-air-runtime",title:"Understanding 3D display objects in Flash Player and the AIR runtime",description:"In Flash Player versions prior to Flash Player 10 and Adobe AIR versions prior",source:"@site/docs/development/display/working-in-three-dimensions/understanding-3d-display-objects-in-flash-player-and-the-air-runtime.md",sourceDirName:"development/display/working-in-three-dimensions",slug:"/development/display/working-in-three-dimensions/understanding-3d-display-objects-in-flash-player-and-the-air-runtime",permalink:"/docs/development/display/working-in-three-dimensions/understanding-3d-display-objects-in-flash-player-and-the-air-runtime",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-in-three-dimensions/understanding-3d-display-objects-in-flash-player-and-the-air-runtime.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Projecting 3D objects onto a 2D view",permalink:"/docs/development/display/working-in-three-dimensions/projecting-3d-objects-onto-a-2d-view"},next:{title:"Using triangles for 3D effects",permalink:"/docs/development/display/working-in-three-dimensions/using-triangles-for-3d-effects"}},l={},p=[],d={toc:p},c="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"understanding-3d-display-objects-in-flash-player-and-the-air-runtime"},"Understanding 3D display objects in Flash Player and the AIR runtime"),(0,r.kt)("p",null,"In Flash Player versions prior to Flash Player 10 and Adobe AIR versions prior\nto Adobe AIR 1.5, display objects have two properties, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),", for\npositioning them on a 2D plane. Starting with Flash Player 10 and Adobe AIR 1.5,\nevery ActionScript display object has a ",(0,r.kt)("inlineCode",{parentName:"p"},"z")," property that lets you position it\nalong the z-axis, which is generally used to indicate depth or distance."),(0,r.kt)("p",null,"Flash Player 10 and Adobe AIR 1.5 introduced support for 3D effects. However,\ndisplay objects are inherently flat. Each display object, such as a MovieClip\nobject or a Sprite object, ultimately renders itself in two dimensions, on a\nsingle plane. The 3D features let you place, move, rotate, and otherwise\ntransform these planar objects in all three dimensions. They also let you manage\n3D points and convert them to 2D x, y coordinates, so you can project 3D objects\nonto a 2D view. You can simulate many kinds of 3D experiences using these\nfeatures."),(0,r.kt)("p",null,"The 3D coordinate system used by ActionScript differs from other systems. When\nyou use 2D coordinates in ActionScript, the value of x increases as you move to\nthe right along the x-axis, and the value of y increases as you move down along\nthe y-axis. The 3D coordinate system retains those conventions and adds a z-axis\nwhose value increases as you move away from the viewpoint."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(12583).Z,width:"348",height:"371"})),(0,r.kt)("p",null,"The positive directions of the x, y, and z axes in the ActionScript 3D\ncoordinate system."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A.")," ","+"," Z axis"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"B.")," Origin"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"C.")," +X axis"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"D.")," +Y axis"),(0,r.kt)("p",null,"Note: Be aware that Flash Player and AIR always represent 3D in layers. This\nmeans that if object A is in front of object B on the display list, Flash Player\nor AIR always renders A in front of B regardless of the z-axis values of the two\nobjects. To resolve this conflict between the display list order and the z-axis\norder, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"transform.getRelativeMatrix3D()")," method to save and then\nre-order the layers of 3D display objects. For more information, see\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/display/working-in-three-dimensions/performing-complex-3d-transformations#using-matrix3d-objects-for-reordering-display"},"Using Matrix3D objects for reordering display"),"."),(0,r.kt)("p",null,"The following ActionScript classes support the new 3D-related features:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The flash.display.DisplayObject class contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"z")," property and new\nrotation and scaling properties for manipulating display objects in 3D\nspace. The ",(0,r.kt)("inlineCode",{parentName:"p"},"DisplayObject.local3DToGlobal()")," method offers a simple way to\nproject 3D geometry onto a 2D plane.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The flash.geom.Vector3D class can be used as a data structure for managing\n3D points. It also supports vector mathematics.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The flash.geom.Matrix3D class supports complex transformations of 3D\ngeometry, such as rotation, scaling, and translation.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The flash.geom.PerspectiveProjection class controls the parameters for\nmapping 3D geometry onto a 2D view."))),(0,r.kt)("p",null,"There are two different approaches to simulating 3D images in ActionScript:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Arranging and animating planar objects in 3D space. This approach involves\nanimating display objects using the x, y and z properties of display\nobjects, or setting rotation and scaling properties using the DisplayObject\nclass. More complex motion can be achieved using the\nDisplayObject.transform.matrix3D object. The\nDisplayObject.transform.perspectiveProjection object customizes how the\ndisplay objects are drawn in 3D perspective. Use this approach when you want\nto animate 3D objects that consist primarily of planes. Examples of this\napproach include 3D image galleries or 2D animation objects arranged in 3D\nspace.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Generating 2D triangles from 3D geometry, and rendering those triangles with\ntextures. To use this approach you must first define and manage data about\n3D objects and then convert that data into 2D triangles for rendering.\nBitmap textures can be mapped to these triangles, and then the triangles are\ndrawn to a graphics object using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Graphics.drawTriangles()")," method.\nExamples of this approach include loading 3D model data from a file and\nrendering the model on the screen, or generating and drawing 3D terrain as\ntriangle meshes."))))}m.isMDXComponent=!0},12583:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/th_xyzAxes-6dee2af462dd082f2ec518c22442eb14.png"}}]);