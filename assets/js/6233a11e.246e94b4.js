"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[45110],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),l=p(n),c=r,m=l["".concat(d,".").concat(c)]||l[c]||u[c]||o;return n?a.createElement(m,i(i({ref:t},h),{},{components:n})):a.createElement(m,i({ref:t},h))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[l]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},78863:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},i="Using a shader in stand-alone mode",s={unversionedId:"development/display/working-with-pixel-bender-shaders/using-a-shader-in-stand-alone-mode",id:"development/display/working-with-pixel-bender-shaders/using-a-shader-in-stand-alone-mode",title:"Using a shader in stand-alone mode",description:"When you use a shader in stand-alone mode, the shader processing runs",source:"@site/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-in-stand-alone-mode.md",sourceDirName:"development/display/working-with-pixel-bender-shaders",slug:"/development/display/working-with-pixel-bender-shaders/using-a-shader-in-stand-alone-mode",permalink:"/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-in-stand-alone-mode",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-in-stand-alone-mode.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Using a shader as a filter",permalink:"/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-as-a-filter"},next:{title:"Using a shader",permalink:"/docs/development/display/working-with-pixel-bender-shaders/using-a-shader"}},d={},p=[],h={toc:p},l="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-a-shader-in-stand-alone-mode"},"Using a shader in stand-alone mode"),(0,r.kt)("p",null,"When you use a shader in stand-alone mode, the shader processing runs\nindependent of how you intend to use the output. You specify a shader to\nexecute, set input and parameter values, and designate an object into which the\nresult data is placed. You can use a shader in stand-alone mode for two reasons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Processing non-image data: In stand-alone mode, you can choose to pass\narbitrary binary or number data to the shader rather than bitmap image data.\nYou can choose to have the shader result be returned as binary data or number\ndata in addition to bitmap image data.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Background processing: When you run a shader in stand-alone mode, by default\nthe shader executes asynchronously. This means that the shader runs in the\nbackground while your application continues to run, and your code is notified\nwhen the shader processing finishes. You can use a shader that takes a long\ntime to run and it doesn't freeze up the application user interface or other\nprocessing while the shader is running."))),(0,r.kt)("p",null,"You use a ShaderJob object to execute a shader in stand-alone mode. First you\ncreate the ShaderJob object and link it to the Shader object representing the\nshader to execute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"var job:ShaderJob = new ShaderJob(myShader);\n")),(0,r.kt)("p",null,"Next, you set any input or parameter values that the shader expects. If you are\nexecuting the shader in the background, you also register a listener for the\nShaderJob object's ",(0,r.kt)("inlineCode",{parentName:"p"},"complete")," event. Your listener is called when the shader\nfinishes its work:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"function completeHandler(event:ShaderEvent):void\n{\n    // do something with the shader result\n}\n\njob.addEventListener(ShaderEvent.COMPLETE, completeHandler);\n")),(0,r.kt)("p",null,"Next, you create an object into which the shader operation result is written\nwhen the operation finishes. You assign that object to the ShaderJob object's\n",(0,r.kt)("inlineCode",{parentName:"p"},"target")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"var jobResult:BitmapData = new BitmapData(100, 75);\njob.target = jobResult;\n")),(0,r.kt)("p",null,"Assign a BitmapData instance to the ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," property if you are using the\nShaderJob to perform image processing. If you are processing binary or number\ndata, assign a ByteArray object or Vector.\\<Number",">"," instance to the ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"\nproperty. In that case, you must set the ShaderJob object's ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"height"),"\nproperties to specify the amount of data to output to the ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," object."),(0,r.kt)("p",null,"Note: You can set the ShaderJob object's ",(0,r.kt)("inlineCode",{parentName:"p"},"shader"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"width"),", and\n",(0,r.kt)("inlineCode",{parentName:"p"},"height")," properties in one step by passing arguments to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ShaderJob()"),"\nconstructor, like this:\n",(0,r.kt)("inlineCode",{parentName:"p"},"var job:ShaderJob = new ShaderJob(myShader, myTarget, myWidth, myHeight);")),(0,r.kt)("p",null,"When you are ready to execute the shader, you call the ShaderJob object's\n",(0,r.kt)("inlineCode",{parentName:"p"},"start()"),") method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"job.start();\n")),(0,r.kt)("p",null,"By default calling ",(0,r.kt)("inlineCode",{parentName:"p"},"start()")," causes the ShaderJob to execute asynchronously. In\nthat case program execution continues immediately with the next line of code\nrather than waiting for the shader to finish. When the shader operation\nfinishes, the ShaderJob object calls its ",(0,r.kt)("inlineCode",{parentName:"p"},"complete")," event listeners, notifying\nthem that it is done. At that point (that is, in the body of your ",(0,r.kt)("inlineCode",{parentName:"p"},"complete"),"\nevent listener) the ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," object contains the shader operation result."),(0,r.kt)("p",null,"Note: Instead of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," property object, you can retrieve the shader\nresult directly from the event object that's passed to your listener method. The\nevent object is a ShaderEvent instance. The ShaderEvent object has three\nproperties that can be used to access the result, depending on the data type of\nthe object you set as the ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," property: ",(0,r.kt)("inlineCode",{parentName:"p"},"ShaderEvent.bitmapData"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"ShaderEvent.byteArray"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"ShaderEvent.vector"),"."),(0,r.kt)("p",null,"Alternatively, you can pass a ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"start()")," method. In that\ncase the shader operation executes synchronously. All code (including\ninteraction with the user interface and any other events) pauses while the\nshader executes. When the shader finishes, the ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," object contains the\nshader result and the program continues with the next line of code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"job.start(true);\n")))}u.isMDXComponent=!0}}]);