"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[48552],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>m});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},h=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),d=p(a),u=i,m=d["".concat(o,".").concat(u)]||d[u]||c[u]||r;return a?n.createElement(m,l(l({ref:t},h),{},{components:a})):n.createElement(m,l({ref:t},h))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},78960:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={},l="Drawing API example: Algorithmic Visual Generator",s={unversionedId:"development/display/using-the-drawing-api/drawing-api-example-algorithmic-visual-generator",id:"development/display/using-the-drawing-api/drawing-api-example-algorithmic-visual-generator",title:"Drawing API example: Algorithmic Visual Generator",description:"The Algorithmic Visual Generator example dynamically draws to the stage several",source:"@site/docs/development/display/using-the-drawing-api/drawing-api-example-algorithmic-visual-generator.md",sourceDirName:"development/display/using-the-drawing-api",slug:"/development/display/using-the-drawing-api/drawing-api-example-algorithmic-visual-generator",permalink:"/docs/development/display/using-the-drawing-api/drawing-api-example-algorithmic-visual-generator",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/using-the-drawing-api/drawing-api-example-algorithmic-visual-generator.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Defining winding rules",permalink:"/docs/development/display/using-the-drawing-api/defining-winding-rules"},next:{title:"Drawing Paths",permalink:"/docs/development/display/using-the-drawing-api/drawing-paths"}},o={},p=[{value:"Setting the listeners",id:"setting-the-listeners",level:2},{value:"Creating the satellites",id:"creating-the-satellites",level:2},{value:"Updating the satellite position",id:"updating-the-satellite-position",level:2},{value:"Responding to user interaction",id:"responding-to-user-interaction",level:2},{value:"Customizing further",id:"customizing-further",level:2}],h={toc:p},d="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"drawing-api-example-algorithmic-visual-generator"},"Drawing API example: Algorithmic Visual Generator"),(0,i.kt)("p",null,'The Algorithmic Visual Generator example dynamically draws to the stage several\n"satellites", or circles moving in a circular orbit. Among the features explored\nare:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Using the drawing API to draw a basic shape with dynamic appearances")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Connecting user interaction with the properties that are used in a draw")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Conveying animation by clearing the stage on each frame and redrawing"))),(0,i.kt)("p",null,'The example in the previous subsection animated a solitary "satellite" using the\n',(0,i.kt)("inlineCode",{parentName:"p"},"Event.ENTER_FRAME")," event. This example expands upon this, building a control\npanel with series of sliders that immediately update the visual display of\nseveral satellites. This example formalizes the code into external classes and\nwraps the satellite creation code into a loop, storing a reference to each\nsatellite in a ",(0,i.kt)("inlineCode",{parentName:"p"},"satellites")," array."),(0,i.kt)("p",null,"To get the application files for this sample, see\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original"},(0,i.kt)("em",{parentName:"a"},"FlashPlatformAS3DevGuideExamples.zip")),".\nThe application files can be found in the folder\nSamples/AlgorithmicVisualGenerator. This folder contains the following files:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"File"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"AlgorithmicVisualGenerator.fla"),(0,i.kt)("td",{parentName:"tr",align:null},"The main application file in Flash Professional (FLA).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"com/example/programmingas3/algorithmic/AlgorithmicVisualGenerator.as"),(0,i.kt)("td",{parentName:"tr",align:null},"The class that provides the main functionality of the application, including drawing satellites on the stage and responding to events from the control panel to update the variables that affect the drawing of satellites.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"com/example/programmingas3/algorithmic/ControlPanel.as"),(0,i.kt)("td",{parentName:"tr",align:null},"A class that manages user interaction with several sliders and dispatching events when this occurs.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"com/example/programmingas3/algorithmic/Satellite.as"),(0,i.kt)("td",{parentName:"tr",align:null},"A class which represents the display object that rotates in an orbit around a central point and contains properties related to its current draw state.")))),(0,i.kt)("h2",{id:"setting-the-listeners"},"Setting the listeners"),(0,i.kt)("p",null,"The application first creates three listeners. The first listens for a\ndispatched event from the control panel that a rebuild of the satellites is\nnecessary. The second listens to changes to the size of the SWF file's stage.\nThe third listens for each passing frame in the SWF file and to redraw using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"doEveryFrame()")," function."),(0,i.kt)("h2",{id:"creating-the-satellites"},"Creating the satellites"),(0,i.kt)("p",null,"Once these listeners are set, the ",(0,i.kt)("inlineCode",{parentName:"p"},"build()")," function is called. This function\nfirst calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"clear()")," function, which empties the ",(0,i.kt)("inlineCode",{parentName:"p"},"satellites")," array and\nclears any previous draws to the stage. This is necessary since the ",(0,i.kt)("inlineCode",{parentName:"p"},"build()"),"\nfunction could be recalled whenever the control panel sends an event to do so,\nsuch as when the color settings have been changed. In such a case, the\nsatellites must be removed and recreated."),(0,i.kt)("p",null,"The function then creates the satellites, setting the initial properties needed\nfor creation, such as a the ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," variable, which starts at a random\nposition in the orbit, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," variable, which in this example does not\nchange once the satellite has been created."),(0,i.kt)("p",null,"As each satellite is created, a reference to it is added to the ",(0,i.kt)("inlineCode",{parentName:"p"},"satellites"),"\narray. When the ",(0,i.kt)("inlineCode",{parentName:"p"},"doEveryFrame()")," function is called, it will update to all\nsatellites in this array."),(0,i.kt)("h2",{id:"updating-the-satellite-position"},"Updating the satellite position"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"doEveryFrame()")," function is the heart of the application's animation\nprocess. It is called for every frame, at a rate equal the framerate of the SWF\nfile. Because the variables of the draw change slightly, this conveys the\nappearance of animation."),(0,i.kt)("p",null,"The function first clears all previous draws and redraws the background. Then,\nit loops through each satellite container and increments the ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," property\nof each satellite, and updates the ",(0,i.kt)("inlineCode",{parentName:"p"},"radius")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orbitRadius")," properties that\nmay have changed from user interaction with the control panel. Finally, the\nsatellite updates to its new position by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"draw()")," method of the\nSatellite class."),(0,i.kt)("p",null,"Note that the counter, ",(0,i.kt)("inlineCode",{parentName:"p"},"i"),", only increments up to the ",(0,i.kt)("inlineCode",{parentName:"p"},"visibleSatellites"),"\nvariable. This is because if the user has limited the amount of satellites that\nare displayed through the control panel, the remaining satellites in the loop\nshould not be redrawn but should instead be hidden. This occurs in a loop which\nimmediately follows the loop responsible for drawing."),(0,i.kt)("p",null,"When the doEveryFrame() function completes, the number of ",(0,i.kt)("inlineCode",{parentName:"p"},"visibleSatellites"),"\nupdate in position across the screen."),(0,i.kt)("h2",{id:"responding-to-user-interaction"},"Responding to user interaction"),(0,i.kt)("p",null,"User interaction occurs via the control panel, which is managed by the\nControlPanel class. This class sets a listener along with the individual\nminimum, maximum, and default values of each slider. As the user moves these\nsliders, the ",(0,i.kt)("inlineCode",{parentName:"p"},"changeSetting()")," function is called. This function updates the\nproperties of the control panel. If the change requires a rebuild of the\ndisplay, an event is dispatched which is then handled in the main application\nfile. As the control panel settings change, the ",(0,i.kt)("inlineCode",{parentName:"p"},"doEveryFrame()")," function draws\neach satellite with the updated variables."),(0,i.kt)("h2",{id:"customizing-further"},"Customizing further"),(0,i.kt)("p",null,"This example is only a basic schematic of how to generate visuals using the\ndrawing API. It uses relatively few lines of code to create an interactive\nexperience that appears quite complex. Even so, this example could be extended\nwith minor changes. A few ideas:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"doEveryFrame()")," function could increment the color value of the\nsatellite.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"doEveryFrame()")," function could shrink or expand the satellite radius over\ntime.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The satellite radius does not have to be circular; it could use the Math class\nto move according to a sine wave, for example.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Satellites could use hit detection with other satellites."))),(0,i.kt)("p",null,"The drawing API can be used as an alternative to creating visual effects in the\nFlash authoring environment, drawing basic shapes at run time. But it can also\nbe used to create visual effects of a variety and scope that are not possible to\ncreate by hand. Using the drawing API and a bit of mathematics, the ActionScript\nauthor can give life to many unexpected creations."))}c.isMDXComponent=!0}}]);