"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[70313],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,u=c["".concat(s,".").concat(m)]||c[m]||h[m]||r;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},12237:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:1},i="Understanding the protected content workflow",l={unversionedId:"development/rich-media-content/using-digital-rights-management/understanding-the-protected-content-workflow",id:"development/rich-media-content/using-digital-rights-management/understanding-the-protected-content-workflow",title:"Understanding the protected content workflow",description:"_Important_ : Flash Player 11.5 and above integrates the Adobe Access",source:"@site/docs/development/rich-media-content/using-digital-rights-management/understanding-the-protected-content-workflow.md",sourceDirName:"development/rich-media-content/using-digital-rights-management",slug:"/development/rich-media-content/using-digital-rights-management/understanding-the-protected-content-workflow",permalink:"/docs/development/rich-media-content/using-digital-rights-management/understanding-the-protected-content-workflow",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/using-digital-rights-management/understanding-the-protected-content-workflow.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mainSidebar",previous:{title:"Using digital rights management",permalink:"/docs/development/rich-media-content/using-digital-rights-management/"},next:{title:"DRM-related members and events of the NetStream class",permalink:"/docs/development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class"}},s={},p=[{value:"Detailed API workflow",id:"detailed-api-workflow",level:2},{value:"DRMContentData and session objects",id:"drmcontentdata-and-session-objects",level:2},{value:"DRM-related events",id:"drm-related-events",level:2},{value:"Pre-loading vouchers for offline playback",id:"pre-loading-vouchers-for-offline-playback",level:2},{value:"Using DRMContentData",id:"using-drmcontentdata",level:3},{value:"Using preloadEmbeddedMetadata()",id:"using-preloadembeddedmetadata",level:3}],d={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"understanding-the-protected-content-workflow"},"Understanding the protected content workflow"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Important"))," : Flash Player 11.5 and above integrates the Adobe Access\nmodule, so the update step (calling\n",(0,o.kt)("inlineCode",{parentName:"p"},"SystemUpdater.update(SystemUpdaterType.DRM)"),") is unnecessary. This includes the\nfollowing browsers and platforms:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Flash Player 11.5 ActiveX control, for all platforms except Internet Explorer\non Windows 8 on Intel processors")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Flash Player 11.5 plugin, for all browsers")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Adobe AIR (desktop and mobile)"))),(0,o.kt)("p",null,"This means that the update step is ",(0,o.kt)("em",{parentName:"p"},"still required")," in the following cases:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Internet Explorer on Windows 8 on Intel processors")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Flash Player 11.4 and below, except on Google Chrome 22 and above (all\nplatforms) or 21 and above (Windows)"))),(0,o.kt)("p",null,"Note: You can still safely call ",(0,o.kt)("inlineCode",{parentName:"p"},"SystemUpdater.update(SystemUpdaterType.DRM)")," on\na system with Flash Player 11.5 or higher, but nothing is downloaded."),(0,o.kt)("p",null,"The following high-level workflow shows that how an application can retrieve and\nplay protected content. The workflow assumes that the application is designed\nspecifically to play content protected by Adobe Access:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Get the content metadata.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Handle updates to Flash Player, if needed.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check if a license is available locally. If so, load it and go to step 7. If\nnot, go to step 4.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check if authentication is required. If not, you can go to step 7.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If authentication is required, get the authentication credentials from the\nuser and pass them to the license server.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If domain registration is required, join the domain (AIR 3.0 and higher).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Once authentication succeeds, download the license from the server.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Play the content."))),(0,o.kt)("p",null,"If an error has not occurred and the user was successfully authorized to view\nthe content, the NetStream object dispatches a DRMStatusEvent object. The\napplication then begins playback. The DRMStatusEvent object holds the related\nvoucher information, which identifies the user's policy and permissions. For\nexample, it holds information regarding whether the content can be made\navailable offline or when the license expires. The application can use this data\nto inform the user of the status of their policy. For example, the application\ncan display the number of remaining days the user has for viewing the content in\na status bar."),(0,o.kt)("p",null,"If the user is allowed offline access, the voucher is cached, and the encrypted\ncontent is downloaded to the user's machine. The content is made accessible for\nthe duration defined in the license caching duration. The ",(0,o.kt)("inlineCode",{parentName:"p"},"detail")," property in\nthe event contains ",(0,o.kt)("inlineCode",{parentName:"p"},'"DRM.voucherObtained"'),". The application decides where to\nstore the content locally in order for it to be available offline. You can also\npreload vouchers using the DRMManager class."),(0,o.kt)("p",null,"Note: Caching and pre-loading of vouchers is supported in both AIR and Flash\nPlayer. However, downloading and storing encrypted content is supported only in\nAIR."),(0,o.kt)("p",null,"It is the application's responsibility to explicitly handle the error events.\nThese events include cases where the user inputs valid credentials, but the\nvoucher protecting the encrypted content restricts the access to the content.\nFor example, an authenticated user cannot access content if the rights have not\nbeen paid for. This case can also occur when two registered members of the same\npublisher attempt to share content that only one of them has paid for. The\napplication must inform the user of the error and provide an alternative\nsuggestion. A typical alternative suggestion is instructions in how to register\nand pay for viewing rights."),(0,o.kt)("h2",{id:"detailed-api-workflow"},"Detailed API workflow"),(0,o.kt)("p",null,"This workflow provides a more detailed view of the protected-content workflow.\nThis workflow describes the specific APIs used to play content protected by\nAdobe Access."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Using a URLLoader object, load the bytes of the protected content's metadata\nfile. Set this object to a variable, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata_bytes"),"."),(0,o.kt)("p",{parentName:"li"},"All content controlled by Adobe Access has Adobe Access metadata. When the\ncontent is packaged, this metadata can be saved as a separate metadata file\n(.metadata) alongside the content. For more information, see the Adobe\nAccess documentation.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a DRMContentData instance. Put this code into a try-catch block:"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"new DRMContentData( "),(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"metadata_bytes")),(0,o.kt)("inlineCode",{parentName:"p"}," )")),(0,o.kt)("p",{parentName:"li"},"where ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"metadata_bytes"))," is the URLLoader object obtained in step 1.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"(Flash Player only) The runtime checks for the Adobe Access module. If not\nfound, an IllegalOperationError with DRMErrorEvent error code 3344 or\nDRMErrorEvent error code 3343 is thrown."),(0,o.kt)("p",{parentName:"li"},"To handle this error, download the Adobe Access module using the\nSystemUpdater API. After this module is downloaded, the SystemUpdater object\ndispatches a COMPLETE event. Include an event listener for this event that\nreturns to step 2 when this event is dispatched. The following code\ndemonstrates these steps:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"flash.system.SystemUpdater.addEventListener(Event.COMPLETE, updateCompleteHandler);\nflash.system.SystemUpdater.update(flash.system.SystemUpdaterType.DRM)\n\nprivate function updateCompleteHandler (event:Event):void {\n    /*redo step 2*/\n    drmContentData = new DRMContentData(metadata_bytes);\n}\n")),(0,o.kt)("p",{parentName:"li"},"If the player itself must be updated, a status event is dispatched. For more\ninformation on handling this event, see\n",(0,o.kt)("a",{parentName:"p",href:"/docs/development/rich-media-content/using-digital-rights-management/updating-flash-player-to-support-adobe-access#listening-for-an-update-event"},"Listening for an update event"),"."),(0,o.kt)("p",{parentName:"li"},"Note: In AIR applications, the AIR installer handles updating the Adobe\nAccess module and required runtime updates.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create listeners to listen for the DRMStatusEvent and DRMErrorEvent\ndispatched from the DRMManager object:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"DRMManager.addEventListener(DRMStatusEvent.DRM_STATUS, onDRMStatus);\nDRMManager.addEventListener(DRMErrorEvent.DRM_ERROR, onDRMError);\n")),(0,o.kt)("p",{parentName:"li"},"In the DRMStatusEvent listener, check that the voucher is valid (not null).\nIn the DRMErrorEvent listener, handle DRMErrorEvents. See\n",(0,o.kt)("a",{parentName:"p",href:"/docs/development/rich-media-content/using-digital-rights-management/using-the-drmstatusevent-class"},"Using the DRMStatusEvent class")," and\n",(0,o.kt)("a",{parentName:"p",href:"/docs/development/rich-media-content/using-digital-rights-management/using-the-drmerrorevent-class"},"Using the DRMErrorEvent class"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Load the voucher (license) that is required to play the content."),(0,o.kt)("p",{parentName:"li"},"First, try to load a locally stored license to play the content:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"DRMManager.loadvoucher(drmContentData, LoadVoucherSetting.LOCAL_ONLY)\n")),(0,o.kt)("p",{parentName:"li"},"After loading completes, the DRMManager object dispatches\n",(0,o.kt)("inlineCode",{parentName:"p"},"DRMStatusEvent.DRM_Status"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the DRMVoucher object is not null, the voucher is valid. Skip to step 13.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the DRMVoucher object is null, check the authentication method required\nby the policy for this content. Use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"DRMContentData.authenticationMethod")," property.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the authentication method is ",(0,o.kt)("inlineCode",{parentName:"p"},"ANONYMOUS"),", go to step 13.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the authentication method is ",(0,o.kt)("inlineCode",{parentName:"p"},"USERNAME_AND_PASSWORD"),", your application\nmust provide a mechanism to let the user enter credentials. Pass these\ncredentials to the license server to authenticate the user:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"DRMManager.authenticate(metadata.serverURL, metadata.domain, username, password)\n")),(0,o.kt)("p",{parentName:"li"},"The DRMManager dispatches a ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMAuthenticationErrorEvent")," if authentication\nfails or a ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMAuthenticationCompleteEvent")," if authentication succeeds.\nCreate listeners for these events.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the authentication method is ",(0,o.kt)("inlineCode",{parentName:"p"},"UNKNOWN"),", a custom authentication method\nmust be used. In this case, the content provider has arranged for\nauthentication to be done in an out-of-band manner by not using the\nActionScript 3.0 APIs. The custom authentication procedure must produce an\nauthentication token that can be passed to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"DRMManager.setAuthenticationToken()")," method.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If authentication fails, your application must return to step 9. Ensure that\nyour application has a mechanism to handle and limit repeated authentication\nfailures. For example, after three attempts, you display a message to the\nuser indicating the authentication has failed and content cannot be played.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To use the stored token instead of prompting the user to enter credentials,\nset the token with ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMManager.setAuthenticationToken()")," method. You then\ndownload the license from the license server and play content as in step 8.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"(optional) If authentication succeeds, you can capture the authentication\ntoken, which is a byte array cached in memory. Get this token with the\n",(0,o.kt)("inlineCode",{parentName:"p"},"DRMAuthenticationCompleteEvent.token")," property. You can store and use the\nauthentication token so that the user does not have to repeatedly enter\ncredentials for this content. The license server determines the valid period\nof the authentication token.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If authentication succeeds, download the license from the license server:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"DRMManager.loadvoucher(drmContentData, LoadVoucherSetting.FORCE_REFRESH)\n")),(0,o.kt)("p",{parentName:"li"},"After loading completes, the DRMManager object dispatches\nDRMStatusEvent.DRM_STATUS. Listen for this event, and when it is dispatched,\nyou can play the content.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Play the video by creating a NetStream object and then calling its ",(0,o.kt)("inlineCode",{parentName:"p"},"play()"),"\nmethod:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"stream = new NetStream(connection);\nstream.addEventListener(DRMStatusEvent.DRM _STATUS, drmStatusHandler);\nstream.addEventListener(DRMErrorEvent.DRM_ERROR, drmErrorHandler);\nstream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);\nstream.client = new CustomClient();\nvideo.attachNetStream(stream);\nstream.play(videoURL);\n")))),(0,o.kt)("h2",{id:"drmcontentdata-and-session-objects"},"DRMContentData and session objects"),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMContentData")," is created, it will be used as a session object that\nrefers to the Flash Player DRM module. All the ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMManager")," APIs that receives\nthis ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMContentData")," will use that particular DRM module. However, there are 2\n",(0,o.kt)("inlineCode",{parentName:"p"},"DRMManager")," APIs that does not use ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMContentData"),". They are:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"authenticate()"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"setAuthenticationToken()")))),(0,o.kt)("p",null,"Since there is no ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMContentData")," associated, invoking these ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMManager")," APIs\nwill use the latest DRM module from the disk. This may become a problem if an\nupdate of the DRM module happens in the middle of the application's DRM\nworkflow. Consider the following scenario:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The application creates a ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMContentData")," object ",(0,o.kt)("inlineCode",{parentName:"p"},"contentData1"),", which uses\n",(0,o.kt)("em",{parentName:"p"},"AdobeCP1")," as the DRM module.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The application invokes the\n",(0,o.kt)("inlineCode",{parentName:"p"},"DRMManager.authenticate(contentData1.serverURL,...)")," method.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The application invokes the ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMManager.loadVoucher(contentData1, ...)"),"\nmethod."))),(0,o.kt)("p",null,"If an update happens for the DRM module before the application can get to step\n2, then the ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMManager.authenticate()")," method will end up authenticating using\n",(0,o.kt)("em",{parentName:"p"},"AdobeCP2")," as the DRM module. The ",(0,o.kt)("inlineCode",{parentName:"p"},"loadVoucher()")," method in step 3 will fail\nsince it is still using ",(0,o.kt)("em",{parentName:"p"},"AdobeCP1")," as the DRM module. The update may have\nhappened due to another application invoking the DRM module update.You can avoid\nthis scenario by invoking the DRM module update on application startup."),(0,o.kt)("h2",{id:"drm-related-events"},"DRM-related events"),(0,o.kt)("p",null,"The runtime dispatches numerous events when an application attempts to play\nprotected content:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"DRMDeviceGroupErrorEvent (AIR only), dispatched by DRMManager")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"DRMAuthenticateEvent (AIR only), dispatched by NetStream")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"DRMAuthenticationCompleteEvent, dispatched by DRMManager")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"DRMAuthenticationErrorEvent, dispatched by DRMManager")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"DRMErrorEvent, dispatched by NetStream and DRMManager")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"DRMStatusEvent, dispatched by NetStream and DRMManager")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"StatusEvent")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"NetStatusEvent. See\n",(0,o.kt)("a",{parentName:"p",href:"/docs/development/rich-media-content/using-digital-rights-management/updating-flash-player-to-support-adobe-access#listening-for-an-update-event"},"Listening for an update event")))),(0,o.kt)("p",null,"To support content protected by Adobe Access, add event listeners for handling\nthe DRM events."),(0,o.kt)("h2",{id:"pre-loading-vouchers-for-offline-playback"},"Pre-loading vouchers for offline playback"),(0,o.kt)("p",null,"You can preload the vouchers (licenses) required to play content protected by\nAdobe Access. Pre-loaded vouchers allow users to view the content whether they\nhave an active Internet connection. (The preload process itself requires an\nInternet connection.) You can use the NetStream class\n",(0,o.kt)("inlineCode",{parentName:"p"},"preloadEmbeddedMetadata()")," method and the DRMManager class to preload vouchers.\nIn AIR 2.0 and later, you can use a DRMContentData object to preload vouchers\ndirectly. This technique is preferable because it lets you update the\nDRMContentData object independent of the content. (The ",(0,o.kt)("inlineCode",{parentName:"p"},"preloadEmbeddedData()"),"\nmethod fetches DRMContentData from the content.)"),(0,o.kt)("h3",{id:"using-drmcontentdata"},"Using DRMContentData"),(0,o.kt)("p",null,"The following steps describe the workflow for pre-loading the voucher for a\nprotected media file using a DRMContentData object."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Get the binary metadata for the packaged content. If using the Adobe Access\nJava Reference Packager, this metadata file is automatically generated with\na ",(0,o.kt)("em",{parentName:"p"},".metadata")," extension. You could, for example, download this metadata\nusing the URLLoader class.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a DRMContentData object, passing the metadata to the constructor\nfunction:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"var drmData:DRMContentData = new DRMContentData( metadata );\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The rest of the steps are identical to the workflow described in\n",(0,o.kt)("a",{parentName:"p",href:"#understanding-the-protected-content-workflow"},"Understanding the protected content workflow"),"."))),(0,o.kt)("h3",{id:"using-preloadembeddedmetadata"},"Using preloadEmbeddedMetadata()"),(0,o.kt)("p",null,"The following steps describe the workflow for pre-loading the voucher for a\nDRM-protected media file using ",(0,o.kt)("inlineCode",{parentName:"p"},"preloadEmbeddedMetadata()"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Download and store the media file. (DRM metadata can only be pre-loaded from\nlocally stored files.)")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create the NetConnection and NetStream objects, supplying implementations\nfor the ",(0,o.kt)("inlineCode",{parentName:"p"},"onDRMContentData()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"onPlayStatus()")," callback functions of the\nNetStream client object.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a NetStreamPlayOptions object and set the ",(0,o.kt)("inlineCode",{parentName:"p"},"stream")," property to the\nURL of the local media file.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Call the NetStream ",(0,o.kt)("inlineCode",{parentName:"p"},"preloadEmbeddedMetadata()"),", passing in the\nNetStreamPlayOptions object identifying the media file to parse.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the media file contains DRM metadata, then the ",(0,o.kt)("inlineCode",{parentName:"p"},"onDRMContentData()"),"\ncallback function is invoked. The metadata is passed to this function as a\nDRMContentData object.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use the DRMContentData object to obtain the voucher using the DRMManager\n",(0,o.kt)("inlineCode",{parentName:"p"},"loadVoucher()")," method."),(0,o.kt)("p",{parentName:"li"},"If the value of the ",(0,o.kt)("inlineCode",{parentName:"p"},"authenticationMethod")," property of the ",(0,o.kt)("inlineCode",{parentName:"p"},"DRMContentData"),"\nobject is ",(0,o.kt)("inlineCode",{parentName:"p"},"flash.net.drm.AuthenticationMethod.USERNAME_AND_PASSWORD"),",\nauthenticate the user on the media rights server before loading the voucher.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"serverURL")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"domain")," properties of the DRMContentData object can be\npassed to the DRMManager ",(0,o.kt)("inlineCode",{parentName:"p"},"authenticate()")," method, along with the user's\ncredentials.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onPlayStatus()")," callback function is invoked when file parsing is\ncomplete. If the ",(0,o.kt)("inlineCode",{parentName:"p"},"onDRMContentData()")," function has not been called, the file\ndoes not contain the metadata required to obtain a voucher. This missing\ncall also possibly means that Adobe Access does not protect this file."))),(0,o.kt)("p",null,"The following code example for AIR illustrates how to preload a voucher for a\nlocal media file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'package\n{\n    import flash.display.Sprite;\n    import flash.events.DRMAuthenticationCompleteEvent;\n    import flash.events.DRMAuthenticationErrorEvent;\n    import flash.events.DRMErrorEvent;\n    import flash.ev ents.DRMStatusEvent;\n    import flash.events.NetStatusEvent;\n    import flash.net.NetConnection;\n    import flash.net.NetStream;\n    import flash.net.NetStreamPlayOptions;\n    import flash.net.drm.AuthenticationMethod;\n    import flash.net.drm.DRMContentData;\n    import flash.net.drm.DRMManager;\n    import flash.net.drm.LoadVoucherSetting;\n    public class DRMPreloader extends Sprite\n    {\n        private var videoURL:String = "app-storage:/video.flv";\n        private var userName:String = "user";\n        private var password:String = "password";\n        private var preloadConnection:NetConnection;\n        private var preloadStream:NetStream;\n        private var drmManager:DRMManager = DRMManager.getDRMManager();\n        private var drmContentData:DRMContentData;\n        public function DRMPreloader():void {\n            drmManager.addEventListener(\n                DRMAuthenticationCompleteEvent.AUTHENTICATION_COMPLETE,\n                onAuthenticationComplete);\n            drmManager.addEventListener(DRMAuthenticationErrorEvent.AUTHENTICATION_ERROR,\n                onAuthenticationError);\n            drmManager.addEventListener(DRMStatusEvent.DRM_STATUS, onDRMStatus);\n            drmManager.addEventListener(DRMErrorEvent.DRM_ERROR, onDRMError);\n            preloadConnection = new NetConnection();\n            preloadConnection.addEventListener(NetStatusEvent.NET_STATUS, onConnect);\n            preloadConnection.connect(null);\n        }\n\n        private function onConnect( event:NetStatusEvent ):void\n        {\n            preloadMetadata();\n        }\n        private function preloadMetadata():void\n        {\n            preloadStream = new NetStream( preloadConnection );\n            preloadStream.client = this;\n            var options:NetStreamPlayOptions = new NetStreamPlayOptions();\n            options.streamName = videoURL;\n            preloadStream.preloadEmbeddedData( options );\n        }\n        public function onDRMContentData( drmMetadata:DRMContentData ):void\n        {\n            drmContentData = drmMetadata;\n            if ( drmMetadata.authenticationMethod == AuthenticationMethod.USERNAME_AND_PASSWORD )\n            {\n                authenticateUser();\n            }\n            else\n            {\n                getVoucher();\n            }\n        }\n        private function getVoucher():void\n        {\n            drmManager.loadVoucher( drmContentData, LoadVoucherSetting.ALLOW_SERVER );\n        }\n\n        private function authenticateUser():void\n        {\n            drmManager.authenticate( drmContentData.serverURL, drmContentData.domain, userName, password );\n        }\n        private function onAuthenticationError( event:DRMAuthenticationErrorEvent ):void\n        {\n            trace( "Authentication error: " + event.errorID + ", " + event.subErrorID );\n        }\n\n        private function onAuthenticationComplete( event:DRMAuthenticationCompleteEvent ):void\n        {\n            trace( "Authenticated to: " + event.serverURL + ", domain: " + event.domain );\n            getVoucher();\n        }\n        private function onDRMStatus( event:DRMStatusEvent ):void\n        {\n            trace( "DRM Status: " + event.detail);\n            trace("--Voucher allows offline playback = " + event.isAvailableOffline );\n            trace("--Voucher already cached          = " + event.isLocal );\n            trace("--Voucher required authentication = " + !event.isAnonymous );\n        }\n        private function onDRMError( event:DRMErrorEvent ):void\n        {\n            trace( "DRM error event: " + event.errorID + ", " + event.subErrorID + ", " + event.text );\n        }\n        public function onPlayStatus( info:Object ):void\n        {\n            preloadStream.close();\n        }\n    }\n}\n')))}h.isMDXComponent=!0}}]);