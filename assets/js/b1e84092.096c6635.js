"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[22788],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),k=r,m=d["".concat(s,".").concat(k)]||d[k]||u[k]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},94613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:1},i="Basics of networking and communication",l={unversionedId:"development/networking-and-communication/basics-of-networking-and-communication",id:"development/networking-and-communication/basics-of-networking-and-communication",title:"Basics of networking and communication",description:"When you build applications in Flash Player or AIR, you often need to access",source:"@site/docs/development/networking-and-communication/basics-of-networking-and-communication.md",sourceDirName:"development/networking-and-communication",slug:"/development/networking-and-communication/basics-of-networking-and-communication",permalink:"/docs/development/networking-and-communication/basics-of-networking-and-communication",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/networking-and-communication/basics-of-networking-and-communication.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mainSidebar",previous:{title:"Networking and communication",permalink:"/docs/development/networking-and-communication/"},next:{title:"Sockets",permalink:"/docs/development/networking-and-communication/sockets"}},s={},c=[{value:"Important concepts and terms",id:"important-concepts-and-terms",level:4},{value:"Network interfaces",id:"network-interfaces",level:2},{value:"Network connectivity changes",id:"network-connectivity-changes",level:2},{value:"Service monitoring",id:"service-monitoring",level:3},{value:"Flash CS4 and CS5 Professional",id:"flash-cs4-and-cs5-professional",level:4},{value:"Flash CS3 Professional",id:"flash-cs3-professional",level:4},{value:"HTTP monitoring",id:"http-monitoring",level:3},{value:"Socket monitoring",id:"socket-monitoring",level:3},{value:"Domain Name System (DNS) records",id:"domain-name-system-dns-records",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"basics-of-networking-and-communication"},"Basics of networking and communication"),(0,r.kt)("p",null,"When you build applications in Flash Player or AIR, you often need to access\nresources outside your application. For example, you might send a request for an\nimage to an Internet web server and get the image data in return. Or, you might\nsend serialized objects back and forth over a socket connection with an\napplication server. The Flash Player and AIR APIs provide several classes that\nallow your applications to participate in this exchange. These APIs support\nIP-based networking for protocols like UDP, TCP, HTTP, RTMP, and RTMFP."),(0,r.kt)("p",null,"The following classes can be used to send and receive data across a network:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,(0,r.kt)("p",null,"Class")),(0,r.kt)("th",null,(0,r.kt)("p",null,"Supported data formats")),(0,r.kt)("th",null,(0,r.kt)("p",null,"Protocols")),(0,r.kt)("th",null,(0,r.kt)("p",null,"Description")))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/Loader.html"},"Loader"))),(0,r.kt)("td",null,(0,r.kt)("p",null,"SWF, PNG, JPEG, GIF")),(0,r.kt)("td",null,(0,r.kt)("p",null,"HTTP, HTTPS")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Loads supported data types and converts the data into a display object."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"../display/display-programming/loading-display-content-dynamically"},"Loading display content dynamically"),"."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/URLLoader.html"},"URLLoader"))),(0,r.kt)("td",null,(0,r.kt)("p",null,"Any (text, XML, binary, etc.)")),(0,r.kt)("td",null,(0,r.kt)("p",null,"HTTP, HTTPS")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Loads arbitrary formats of data. Your application is responsible for interpreting the data."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"./http-communications/loading-external-data#using-the-urlloader-class"},"Using the URLLoader class")))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/FileReference.html"},"FileReference"))),(0,r.kt)("td",null,(0,r.kt)("p",null,"Any")),(0,r.kt)("td",null,(0,r.kt)("p",null,"HTTP")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Upload and download files."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"../files-and-data/working-with-the-file-system/using-the-filereference-class"},"Using the FileReference class")))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetConnection.html"},"NetConnection"))),(0,r.kt)("td",null,(0,r.kt)("p",null,"Video, audio, ActionScript Message Format (AMF)")),(0,r.kt)("td",null,(0,r.kt)("p",null,"HTTP, HTTPS, RTMP, RTMFP")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Connects to video, audio and remote object streams."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"../rich-media-content/working-with-video"},"Working with video"),"."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/media/Sound.html"},"Sound"))),(0,r.kt)("td",null,(0,r.kt)("p",null,"Audio")),(0,r.kt)("td",null,(0,r.kt)("p",null,"HTTP")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Loads and plays supported audio formats."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"../rich-media-content/working-with-sound/loading-external-sound-files"},"Loading external sound files"),"."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/XMLSocket.html"},"XMLSocket"))),(0,r.kt)("td",null,(0,r.kt)("p",null,"XML")),(0,r.kt)("td",null,(0,r.kt)("p",null,"TCP")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Exchanges XML messages with an XMLSocket server."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"./sockets#xml-sockets"},"XML sockets"),"."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/Socket.html"},"Socket"))),(0,r.kt)("td",null,(0,r.kt)("p",null,"Any")),(0,r.kt)("td",null,(0,r.kt)("p",null,"TCP")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Connects to a TCP socket server."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"./sockets#binary-client-sockets"},"Binary client sockets"),"."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/SecureSocket.html"},"SecureSocket"),"(AIR)")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Any")),(0,r.kt)("td",null,(0,r.kt)("p",null,"TCP with SSLv3 or TLSv1")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Connects to a TCP socket server that requires SSL or TLS security."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"./sockets#secure-client-sockets-air"},"Secure client sockets (AIR)"),"."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/ServerSocket.html"},"ServerSocket"),"(AIR)")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Any")),(0,r.kt)("td",null,(0,r.kt)("p",null,"TCP")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Acts as a server for incoming TCP socket connections."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"./sockets#server-sockets"},"Server sockets"),"."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,(0,r.kt)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/DatagramSocket.html"},"DatagramSocket"),"(AIR)")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Any")),(0,r.kt)("td",null,(0,r.kt)("p",null,"UDP")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Sends and receives UDP packets."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{href:"./sockets#udp-sockets-air"},"UDP sockets (AIR)")))))),(0,r.kt)("p",null,"Often, when creating a web application it is helpful to store persistent\ninformation about the user's application state. HTML pages and applications\ntypically use cookies for this purpose. In Flash Player, you can use the\nSharedObject class for the same purpose. See\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/files-and-data/storing-local-data/shared-objects"},"Shared objects"),". (The\nSharedObject class can be used in AIR applications, but there are fewer\nrestrictions when just saving the data to a regular file.)"),(0,r.kt)("p",null,"When your Flash Player or AIR application needs to communicate with another\nFlash Player or AIR application on the same computer, you can use the\nLocalConnection class. For example, two (or more) SWFs on the same web page can\ncommunicate with each other. Likewise, a SWF running on a web page can\ncommunicate with an AIR application. See\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/networking-and-communication/communicating-with-other-flash-player-and-air-instances"},"Communicating with other Flash Player and AIR instances"),"."),(0,r.kt)("p",null,"When you need to communicate with other, non-SWF processes on the local\ncomputer, you can use the NativeProcess class added in AIR 2. The NativeProcess\nclass allows your AIR application to launch and communicate with other\napplications. See\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/networking-and-communication/communicating-with-native-processes-in-air"},"Communicating with native processes in AIR"),"."),(0,r.kt)("p",null,"When you need information about the network environment of the computer on which\nan AIR application is running, you can use the following classes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"NetworkInfo \u2014 Provides information about the available network interfaces,\nsuch as the computer's IP address. See\n",(0,r.kt)("a",{parentName:"p",href:"#network-interfaces"},"Network interfaces"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"DNSResolver \u2014 Allows you to look up DNS records. See\n",(0,r.kt)("a",{parentName:"p",href:"#domain-name-system-dns-records"},"Domain Name System (DNS) records"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ServiceMonitor \u2014 Allows you to monitor the availability of a server. See\n",(0,r.kt)("a",{parentName:"p",href:"#service-monitoring"},"Service monitoring"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"URLMonitor \u2014 Allows you to monitor the availability of a resource at a\nparticular URL. See ",(0,r.kt)("a",{parentName:"p",href:"#http-monitoring"},"HTTP monitoring"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"SocketMonitor and SecureSocketMonitor\u2014Allows you to monitor the availability\nof a resource at a socket. See ",(0,r.kt)("a",{parentName:"p",href:"#socket-monitoring"},"Socket monitoring"),"."))),(0,r.kt)("h4",{id:"important-concepts-and-terms"},"Important concepts and terms"),(0,r.kt)("p",null,"The following reference list contains important terms that you will encounter\nwhen programming networking and communications code:"),(0,r.kt)("p",null,"External data",(0,r.kt)("br",{parentName:"p"}),"\n","Data that is stored in some form outside of the application, and loaded into the\napplication when needed. This data could be stored in a file that's loaded\ndirectly, or stored in a database or other form that is retrieved by calling\nscripts or programs running on a server."),(0,r.kt)("p",null,"URL-encoded variables",(0,r.kt)("br",{parentName:"p"}),"\n","The URL-encoded format provides a way to represent several variables (pairs of\nvariable names and values) in a single string of text. Individual variables are\nwritten in the format name=value. Each variable (that is, each name-value pair)\nis separated by ampersand characters, like this:\nvariable1=value1&variable2=value2. In this way, an indefinite number of\nvariables can be sent as a single message."),(0,r.kt)("p",null,"MIME type",(0,r.kt)("br",{parentName:"p"}),"\n","A standard code used to identify the type of a given file in Internet\ncommunication. Any given file type has a specific code that is used to identify\nit. When sending a file or message, a computer (such as a web server or a user's\nFlash Player or AIR instance) will specify the type of file being sent."),(0,r.kt)("p",null,"HTTP",(0,r.kt)("br",{parentName:"p"}),"\n","Hypertext Transfer Protocol\u2014a standard format for delivering web pages and\nvarious other types of content that are sent over the Internet."),(0,r.kt)("p",null,"Request method",(0,r.kt)("br",{parentName:"p"}),"\n","When an application (such as an AIR application or a web browser) sends a\nmessage (called an HTTP request) to a web server, any data being sent can be\nembedded in the request in one of two ways; these are the two request methods\nGET and POST. On the server end, the program receiving the request will need to\nlook in the appropriate portion of the request to find the data, so the request\nmethod used to send data from your application should match the request method\nused to read that data on the server."),(0,r.kt)("p",null,"Socket connection",(0,r.kt)("br",{parentName:"p"}),"\n","A persistent connection for communication between two computers."),(0,r.kt)("p",null,"Upload",(0,r.kt)("br",{parentName:"p"}),"\n","To send a file to another computer."),(0,r.kt)("p",null,"Download",(0,r.kt)("br",{parentName:"p"}),"\n","To retrieve a file from another computer."),(0,r.kt)("h2",{id:"network-interfaces"},"Network interfaces"),(0,r.kt)("p",null,"You can use the NetworkInfo object to discover the hardware and software network\ninterfaces available to your application. The NetworkInfo object is a\n",(0,r.kt)("em",{parentName:"p"},"singleton")," object, you do not need to create one. Instead, use the static class\nproperty, ",(0,r.kt)("inlineCode",{parentName:"p"},"networkInfo"),", to access the single NetworkInfo object. The\nNetworkInfo object also dispatches a ",(0,r.kt)("inlineCode",{parentName:"p"},"networkChange")," event when one of the\navailable interfaces change."),(0,r.kt)("p",null,"Call the ",(0,r.kt)("inlineCode",{parentName:"p"},"findInterfaces()")," method to get a list of NetworkInterface objects.\nEach NetworkInterface object in the list describes one of the available\ninterfaces. The NetworkInterface object provides such information as the IP\naddress, hardware address, maximum transmission unit, and whether the interface\nis active."),(0,r.kt)("p",null,"The following code example traces the NetworkInterface properties of each\ninterface on the client computer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'package\n{\n    import flash.display.Sprite;\n    import flash.net.InterfaceAddress;\n    import flash.net.NetworkInfo;\n    import flash.net.NetworkInterface;\n\n    public class NetworkInformationExample extends Sprite\n    {\n        public function NetworkInformationExample()\n        {\n            var networkInfo:NetworkInfo = NetworkInfo.networkInfo;\n            var interfaces:Vector.<NetworkInterface> = networkInfo.findInterfaces();\n\n            if( interfaces != null )\n            {\n                trace( "Interface count: " + interfaces.length );\n                for each ( var interfaceObj:NetworkInterface in interfaces )\n                {\n                    trace( "\\nname: "             + interfaceObj.name );\n                    trace( "display name: "     + interfaceObj.displayName );\n                    trace( "mtu: "                 + interfaceObj.mtu );\n                    trace( "active?: "             + interfaceObj.active );\n                    trace( "parent interface: " + interfaceObj.parent );\n                    trace( "hardware address: " + interfaceObj.hardwareAddress );\n                    if( interfaceObj.subInterfaces != null )\n                    {\n                        trace( "# subinterfaces: " + interfaceObj.subInterfaces.length );\n                    }\n                    trace("# addresses: "     + interfaceObj.addresses.length );\n                    for each ( var address:InterfaceAddress in interfaceObj.addresses )\n                    {\n                        trace( "  type: "           + address.ipVersion );\n                        trace( "  address: "         + address.address );\n                        trace( "  broadcast: "         + address.broadcast );\n                        trace( "  prefix length: "     + address.prefixLength );\n                    }\n                }\n            }\n        }\n    }\n}\n')),(0,r.kt)("p",null,"For more information, see:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetworkInfo.html"},"NetworkInfo"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetworkInterface.html"},"NetworkInterface"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/InterfaceAddress.html"},"InterfaceAddress"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"http://www.flexpert.be/2011/04/detecting-the-network-connection-type-with-flex-4-5/"},"Flexpert: Detecting the network connection type with Flex 4.5")))),(0,r.kt)("h2",{id:"network-connectivity-changes"},"Network connectivity changes"),(0,r.kt)("p",null,"Your AIR application can run in environments with uncertain and changing network\nconnectivity. To help an application manage connections to online resources,\nAdobe AIR sends a network change event whenever a network connection becomes\navailable or unavailable. Both the NetworkInfo object and the application's\nNativeApplication object dispatch the ",(0,r.kt)("inlineCode",{parentName:"p"},"networkChange")," event. To react to this\nevent, add a listener:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NetworkInfo.networkInfo.addEventListener(Event.NETWORK_CHANGE, onNetworkChange);\n")),(0,r.kt)("p",null,"And define an event handler function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"function onNetworkChange(event:Event)\n{\n    //Check resource availability\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"networkChange")," event does not indicate a change in all network activity,\nonly that an individual network connection has changed. AIR does not attempt to\ninterpret the meaning of the network change. A networked computer can have many\nreal and virtual connections, so losing a connection does not necessarily mean\nlosing a resource. On the other hand, new connections do not guarantee improved\nresource availability, either. Sometimes a new connection can even block access\nto resources previously available (for example, when connecting to a VPN)."),(0,r.kt)("p",null,"In general, the only way for an application to determine whether it can connect\nto a remote resource is to try it. The service monitoring framework provides an\nevent-based means of responding to changes in network connectivity to a\nspecified host."),(0,r.kt)("p",null,"Note: The service monitoring framework detects whether a server responds\nacceptably to a request. A successful check does not guarantee full\nconnectivity. Scalable web services often use caching and load-balancing\nappliances to redirect traffic to a cluster of web servers. In this situation,\nservice providers only provide a partial diagnosis of network connectivity."),(0,r.kt)("h3",{id:"service-monitoring"},"Service monitoring"),(0,r.kt)("p",null,"The service monitor framework, separate from the AIR framework, resides in the\nfile aircore.swc. To use the framework, the aircore.swc file must be included in\nyour build process."),(0,r.kt)("p",null,"Adobe\xae Flash\xae Builder includes this library automatically."),(0,r.kt)("p",null,"The ServiceMonitor class implements the framework for monitoring network\nservices and provides a base functionality for service monitors. By default, an\ninstance of the ServiceMonitor class dispatches events regarding network\nconnectivity. The ServiceMonitor object dispatches these events when the\ninstance is created and whenever the runtime detects a network change.\nAdditionally, you can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"pollInterval")," property of a ServiceMonitor\ninstance to check connectivity at a specified interval in milliseconds,\nregardless of general network connectivity events. A ServiceMonitor object does\nnot check network connectivity until the ",(0,r.kt)("inlineCode",{parentName:"p"},"start()")," method is called."),(0,r.kt)("p",null,"The URLMonitor class, a subclass of the ServiceMonitor class, detects changes in\nHTTP connectivity for a specified URLRequest."),(0,r.kt)("p",null,"The SocketMonitor class, also a subclass of the ServiceMonitor class, detects\nchanges in connectivity to a specified host at a specified port."),(0,r.kt)("p",null,"Note: Prior to AIR 2, the service monitor framework was published in the\nservicemonitor.swc library. This library is now deprecated. Use the aircore.swc\nlibrary instead."),(0,r.kt)("h4",{id:"flash-cs4-and-cs5-professional"},"Flash CS4 and CS5 Professional"),(0,r.kt)("p",null,"To use these classes in Adobe\xae Flash\xae CS4 or CS5 Professional:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Select the File ",">"," Publish Settings command.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click the Settings button for ActionScript 3.0. Select Library Path.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click the Browse to SWC button and browse to the AIK folder in your Flash\nProfessional installation folder.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Within this folder, find the /frameworks/libs/air/aircore.swc (for AIR 2) or\n/frameworks/libs/air/servicemonitor.swc (for AIR 1.5).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click the OK button.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the following import statement to your ActionScript 3.0 code: import\nair.net.","*",";"))),(0,r.kt)("h4",{id:"flash-cs3-professional"},"Flash CS3 Professional"),(0,r.kt)("p",null,"To use these classes in Adobe\xae Flash\xae CS3 Professional, drag the\nServiceMonitorShim component from the Components panel to the Library. Then, add\nthe following ",(0,r.kt)("inlineCode",{parentName:"p"},"import")," statement to your ActionScript 3.0 code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import air.net.*;\n")),(0,r.kt)("h3",{id:"http-monitoring"},"HTTP monitoring"),(0,r.kt)("p",null,"The URLMonitor class determines if HTTP requests can be made to a specified\naddress at port 80 (the typical port for HTTP communication). The following code\nuses an instance of the URLMonitor class to detect connectivity changes to the\nAdobe website:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import air.net.URLMonitor;\nimport flash.net.URLRequest;\nimport flash.events.StatusEvent;\nvar monitor:URLMonitor;\nmonitor = new URLMonitor(new URLRequest('http://www.example.com'));\nmonitor.addEventListener(StatusEvent.STATUS, announceStatus);\nmonitor.start();\nfunction announceStatus(e:StatusEvent):void {\n    trace(\"Status change. Current status: \" + monitor.available);\n}\n")),(0,r.kt)("h3",{id:"socket-monitoring"},"Socket monitoring"),(0,r.kt)("p",null,"AIR applications can also use socket connections for push-model connectivity.\nFirewalls and network routers typically restrict network communication on\nunauthorized ports for security reasons. For this reason, developers must\nconsider that users do not always have the capability to make socket\nconnections."),(0,r.kt)("p",null,"The following code uses an instance of the SocketMonitor class to detect\nconnectivity changes to a socket connection. The port monitored is 6667, a\ncommon port for IRC:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import air.net.ServiceMonitor;\nimport flash.events.StatusEvent;\n\nsocketMonitor = new SocketMonitor('www.example.com',6667);\nsocketMonitor.addEventListener(StatusEvent.STATUS, socketStatusChange);\nsocketMonitor.start();\n\nfunction announceStatus(e:StatusEvent):void {\n    trace(\"Status change. Current status: \" + socketMonitor.available);\n}\n")),(0,r.kt)("p",null,"If the socket server requires a secure connection, you can use the\nSecureSocketMonitor class instead of SocketMonitor."),(0,r.kt)("h2",{id:"domain-name-system-dns-records"},"Domain Name System (DNS) records"),(0,r.kt)("p",null,"You can look up DNS resource records using the DNSResolver class. DNS resource\nrecords provide information like the IP address of a domain name and the domain\nname of an IP address. You can look up the following types of DNS resource\nrecords:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ARecord\u2014IPv4 address for a host.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"AAAARecord\u2014IPv6 address for a host.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"MXRecord\u2014mail exchange record for a host.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"PTRRecord\u2014host name for an IP address.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"SRVRecord\u2014service record for a service."))),(0,r.kt)("p",null,"To look up a record, you pass a query string and the class object representing\nthe record type to the ",(0,r.kt)("inlineCode",{parentName:"p"},"lookup()")," method of the DNSResolver object. The query\nstring to use depends on the record type:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Record class"),(0,r.kt)("th",{parentName:"tr",align:null},"Query string"),(0,r.kt)("th",{parentName:"tr",align:null},"Example query string"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ARecord"),(0,r.kt)("td",{parentName:"tr",align:null},"host name"),(0,r.kt)("td",{parentName:"tr",align:null},'"example.com"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AAAARecord"),(0,r.kt)("td",{parentName:"tr",align:null},"host name"),(0,r.kt)("td",{parentName:"tr",align:null},'"example.com"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MXRecord"),(0,r.kt)("td",{parentName:"tr",align:null},"host name"),(0,r.kt)("td",{parentName:"tr",align:null},'"example.com"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PTRRecord"),(0,r.kt)("td",{parentName:"tr",align:null},"IP address"),(0,r.kt)("td",{parentName:"tr",align:null},'"208.77.188.166"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SRVRecord"),(0,r.kt)("td",{parentName:"tr",align:null},"Service identifier: ","_","service.","_","protocol.host"),(0,r.kt)("td",{parentName:"tr",align:null},'"',"_","sip.","_",'tcp.example.com"')))),(0,r.kt)("p",null,'The following code example looks up the IP address of the host "example.com".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'package\n{\n    import flash.display.Sprite;\n    import flash.events.DNSResolverEvent;\n    import flash.events.ErrorEvent;\n    import flash.net.dns.ARecord;\n    import flash.net.dns.DNSResolver;\n\n    public class DNSResolverExample extends Sprite\n    {\n\n        public function DNSResolverExample()\n        {\n            var resolver:DNSResolver = new DNSResolver();\n            resolver.addEventListener( DNSResolverEvent.LOOKUP, lookupComplete );\n            resolver.addEventListener( ErrorEvent.ERROR, lookupError );\n\n            resolver.lookup( "example.com.", ARecord );\n        }\n\n        private function lookupComplete( event:DNSResolverEvent ):void\n        {\n            trace( "Query string: " + event.host );\n            trace( "Record count: " + event.resourceRecords.length );\n            for each( var record:* in event.resourceRecords )\n            {\n                if( record is ARecord ) trace( record.address );\n            }\n\n        }\n\n        private function lookupError( error:ErrorEvent ):void\n        {\n            trace("Error: " + error.text );\n        }\n    }\n}\n')),(0,r.kt)("p",null,"For more information, see:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/dns/DNSResolver.html"},"DNSResolver"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/events/DNSResolverEvent.html"},"DNSResolverEvent"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/dns/ARecord.html"},"ARecord"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/dns/AAAARecord.html"},"AAAARecord"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/dns/MXRecord.html"},"MXRecord"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/dns/PTRRecord.html"},"PTRRecord"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/dns/SRVRecord.html"},"SRVRecord")))))}u.isMDXComponent=!0}}]);