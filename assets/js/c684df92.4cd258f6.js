"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[53156],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(n),h=i,u=c["".concat(d,".").concat(h)]||c[h]||y[h]||r;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},22282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:3},o="Handling application display changes",s={unversionedId:"development/user-interaction/keyboard-input/virtual-keyboards/handling-application-display-changes",id:"development/user-interaction/keyboard-input/virtual-keyboards/handling-application-display-changes",title:"Handling application display changes",description:"In AIR, you can turn off the default panning and resizing behavior associated",source:"@site/docs/development/user-interaction/keyboard-input/virtual-keyboards/handling-application-display-changes.md",sourceDirName:"development/user-interaction/keyboard-input/virtual-keyboards",slug:"/development/user-interaction/keyboard-input/virtual-keyboards/handling-application-display-changes",permalink:"/docs/development/user-interaction/keyboard-input/virtual-keyboards/handling-application-display-changes",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/keyboard-input/virtual-keyboards/handling-application-display-changes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Adding virtual keyboard support for interactive objects",permalink:"/docs/development/user-interaction/keyboard-input/virtual-keyboards/adding-virtual-keyboard-support-for-interactive-objects"},next:{title:"Mouse input",permalink:"/docs/development/user-interaction/mouse-input/"}},d={},l=[],p={toc:l},c="wrapper";function y(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"handling-application-display-changes"},"Handling application display changes"),(0,i.kt)("p",null,"In AIR, you can turn off the default panning and resizing behavior associated\nwith raising a soft keyboard by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"softKeyboardBehavior")," element in\nthe application descriptor to ",(0,i.kt)("inlineCode",{parentName:"p"},"none"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<softKeyboardBehavior>none</softKeyboardBehavior>\n")),(0,i.kt)("p",null,"When you turn off the automatic behavior, it is your application's\nresponsibility to make any necessary adjustments to the application display. A\nsoftKeyboardActivate event is dispatched when the keyboard opens. When the\n",(0,i.kt)("inlineCode",{parentName:"p"},"softKeyboardActivate")," event is dispatched, the ",(0,i.kt)("inlineCode",{parentName:"p"},"softKeyboardRect")," property of\nthe stage contains the dimensions of the area obscured by the open keyboard. Use\nthese dimensions to move or resize your content so that it is displayed properly\nwhile the keyboard is open and the user is typing. (When the keyboard is closed,\nthe dimensions of the softKeyboardRect rectangle are all zero.)"),(0,i.kt)("p",null,"When the keyboard closes, a ",(0,i.kt)("inlineCode",{parentName:"p"},"softKeyboardDeactivate")," event is dispatched, and\nyou can return the application display to normal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package  {\n    import flash.display.MovieClip;\n    import flash.events.SoftKeyboardEvent;\n    import flash.events.Event;\n    import flash.display.StageScaleMode;\n    import flash.display.StageAlign;\n    import flash.display.InteractiveObject;\n    import flash.text.TextFieldType;\n    import flash.text.TextField;\n\n    public class PanningExample extends MovieClip {\n\n        private var textField:TextField = new TextField();\n\n        public function PanningExample() {\n            this.stage.scaleMode = StageScaleMode.NO_SCALE;\n            this.stage.align = StageAlign.TOP_LEFT;\n\n            textField.y = this.stage.stageHeight - 201;\n            textField.width = this.stage.stageWidth;\n            textField.height = 200;\n            textField.type = TextFieldType.INPUT;\n            textField.border = true;\n            textField.wordWrap = true;\n            textField.multiline = true;\n\n            this.addChild( textField );\n\n            //track soft keyboard and stage resize events\n            textField.addEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATE, onKeyboardChange );\n            textField.addEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE, onKeyboardChange );\n            this.stage.addEventListener( Event.RESIZE, onDisplayAreaChange );\n        }\n\n        private function onDisplayAreaChange( event:Event ):void\n        {\n            textField.y = this.stage.stageHeight - 201;\n            textField.width = this.stage.stageWidth;\n        }\n\n        private function onKeyboardChange( event:SoftKeyboardEvent ):void\n        {\n            var field:InteractiveObject = textField;\n            var offset:int = 0;\n\n            //if the softkeyboard is open and the field is at least partially covered\n            if( (this.stage.softKeyboardRect.y != 0) && (field.y + field.height > this.stage.softKeyboardRect.y) )\n                offset = field.y + field.height - this.stage.softKeyboardRect.y;\n\n            //but don't push the top of the field above the top of the screen\n            if( field.y - offset < 0 ) offset += field.y - offset;\n\n            this.y = -offset;\n        }\n    }\n}\n")),(0,i.kt)("p",null,"Note: On Android, there are circumstances, including fullscreen mode, in which\nthe exact dimensions of the keyboard are not available from the operating\nsystem. In these cases, the size is estimated. Also, in landscape orientations,\nthe native fullscreen IME keyboard is used for all text entry. This IME keyboard\nhas a built-in text entry field and obscures the entire stage. There is no way\nto display a landscape keyboard that does not fill the screen."))}y.isMDXComponent=!0}}]);