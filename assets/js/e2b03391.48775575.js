"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[96420],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=m(n),d=i,u=p["".concat(o,".").concat(d)]||p[d]||h[d]||l;return n?a.createElement(u,r(r({ref:t},c),{},{components:n})):a.createElement(u,r({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var m=2;m<l;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99593:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var a=n(87462),i=(n(67294),n(3905));const l={sidebar_position:6},r="Event handling example: Alarm Clock",s={unversionedId:"development/core-actionscript-classes/handling-events/event-handling-example-alarm-clock",id:"development/core-actionscript-classes/handling-events/event-handling-example-alarm-clock",title:"Event handling example: Alarm Clock",description:"The Alarm Clock example consists of a clock that allows the user to specify a",source:"@site/docs/development/core-actionscript-classes/handling-events/event-handling-example-alarm-clock.md",sourceDirName:"development/core-actionscript-classes/handling-events",slug:"/development/core-actionscript-classes/handling-events/event-handling-example-alarm-clock",permalink:"/docs/development/core-actionscript-classes/handling-events/event-handling-example-alarm-clock",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/handling-events/event-handling-example-alarm-clock.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"mainSidebar",previous:{title:"Event listeners",permalink:"/docs/development/core-actionscript-classes/handling-events/event-listeners"},next:{title:"Working with application domains",permalink:"/docs/development/core-actionscript-classes/working-with-application-domains"}},o={},m=[{value:"Alarm Clock overview",id:"alarm-clock-overview",level:2},{value:"Triggering the alarm",id:"triggering-the-alarm",level:2},{value:"Notifying others of the alarm",id:"notifying-others-of-the-alarm",level:2},{value:"Providing a custom alarm event",id:"providing-a-custom-alarm-event",level:2}],c={toc:m},p="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"event-handling-example-alarm-clock"},"Event handling example: Alarm Clock"),(0,i.kt)("p",null,"The Alarm Clock example consists of a clock that allows the user to specify a\ntime at which an alarm will go off, as well as a message to be displayed at that\ntime. The Alarm Clock example builds on the SimpleClock application from\n",(0,i.kt)("a",{parentName:"p",href:"/docs/development/core-actionscript-classes/working-with-dates-and-times/"},"Working with dates and times")," Alarm\nClock illustrates several aspects of working with events in ActionScript 3.0,\nincluding:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Listening and responding to an event")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Notifying listeners of an event")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Creating a custom event type"))),(0,i.kt)("p",null,"To get the application files for this sample, see\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original"},(0,i.kt)("em",{parentName:"a"},"FlashPlatformAS3DevGuideExamples.zip")),".\nThe Alarm Clock application files can be found in the Samples/AlarmClock folder.\nThe application includes these files:"),(0,i.kt)("table",null,(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,(0,i.kt)("p",null,"File")),(0,i.kt)("th",null,(0,i.kt)("p",null,"Description")))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"AlarmClockApp.mxml"),(0,i.kt)("p",null,"or"),(0,i.kt)("p",null,"AlarmClockApp.fla")),(0,i.kt)("td",null,(0,i.kt)("p",null,"The main application file in Flash (FLA) or Flex (MXML)."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"com/example/programmingas3/clock/AlarmClock.as")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A class which extends the SimpleClock class, adding alarm clock functionality."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"com/example/programmingas3/clock/AlarmEvent.as")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A custom event class (a subclass of flash.events.Event) which serves as the event object for the AlarmClock class's",(0,i.kt)("samp",null,"alarm")," event."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"com/example/programmingas3/clock/AnalogClockFace.as")),(0,i.kt)("td",null,(0,i.kt)("p",null,"Draws a round clock face and hour, minute, and seconds hands based on the time (described in the SimpleClock example)."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"com/example/programmingas3/clock/SimpleClock.as")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A clock interface component with simple timekeeping functionality (described in the SimpleClock example)."))))),(0,i.kt)("h2",{id:"alarm-clock-overview"},"Alarm Clock overview"),(0,i.kt)("p",null,"The primary functionality of the clock in this example, including tracking the\ntime and displaying the clock face, reuses the SimpleClock application code,\nwhich is described in\n",(0,i.kt)("a",{parentName:"p",href:"/docs/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock"},"Date and time example: Simple analog clock"),'.\nThe AlarmClock class extends the SimpleClock class from that example by adding\nthe functionality required for an alarm clock, including setting the alarm time\nand providing notification when the alarm "goes off."'),(0,i.kt)("p",null,"Providing notification when something happens is the job that events are made\nfor. The AlarmClock class exposes the Alarm event, which other objects can\nlisten for in order to perform desired actions. In addition, the AlarmClock\nclass uses an instance of the Timer class to determine when to trigger its\nalarm. Like the AlarmClock class, the Timer class provides an event to notify\nother objects (an AlarmClock instance, in this case) when a certain amount of\ntime has passed. As with most ActionScript applications, events form an\nimportant part of the functionality of the Alarm Clock sample application."),(0,i.kt)("h2",{id:"triggering-the-alarm"},"Triggering the alarm"),(0,i.kt)("p",null,"As mentioned previously, the only functionality that the AlarmClock class\nactually provides relates to setting and triggering the alarm. The built-in\nTimer class (flash.utils.Timer) provides a way for a developer to define code\nthat will be executed after a specified amount of time. The AlarmClock class\nuses a Timer instance to determine when to set off the alarm."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    import flash.events.TimerEvent;\n    import flash.utils.Timer;\n\n    /**\n     * The Timer that will be used for the alarm.\n     */\n    public var alarmTimer:Timer;\n    ...\n    /**\n     * Instantiates a new AlarmClock of a given size.\n     */\n    public override function initClock(faceSize:Number = 200):void\n    {\n        super.initClock(faceSize);\n        alarmTimer = new Timer(0, 1);\n        alarmTimer.addEventListener(TimerEvent.TIMER, onAlarm);\n    }\n")),(0,i.kt)("p",null,"The Timer instance defined in the AlarmClock class is named ",(0,i.kt)("inlineCode",{parentName:"p"},"alarmTimer"),". The\n",(0,i.kt)("inlineCode",{parentName:"p"},"initClock()")," method, which performs necessary setup operations for the\nAlarmClock instance, does two things with the ",(0,i.kt)("inlineCode",{parentName:"p"},"alarmTimer")," variable. First, the\nvariable is instantiated with parameters instructing the Timer instance to wait\n0 milliseconds and only trigger its timer event one time. After instantiating\n",(0,i.kt)("inlineCode",{parentName:"p"},"alarmTimer"),", the code calls that variable's ",(0,i.kt)("inlineCode",{parentName:"p"},"addEventListener()")," method to\nindicate that it wants to listen to that variable's ",(0,i.kt)("inlineCode",{parentName:"p"},"timer")," event. A Timer\ninstance works by dispatching its ",(0,i.kt)("inlineCode",{parentName:"p"},"timer")," event after a specified amount of time\nhas passed. The AlarmClock class will need to know when the ",(0,i.kt)("inlineCode",{parentName:"p"},"timer")," event is\ndispatched in order to set off its own alarm. By calling ",(0,i.kt)("inlineCode",{parentName:"p"},"addEventListener()"),",\nthe AlarmClock code registers itself as a listener with ",(0,i.kt)("inlineCode",{parentName:"p"},"alarmTimer"),". The two\nparameters indicate that the AlarmClock class wants to listen for the ",(0,i.kt)("inlineCode",{parentName:"p"},"timer"),"\nevent (indicated by the constant ",(0,i.kt)("inlineCode",{parentName:"p"},"TimerEvent.TIMER"),"), and that when the event\nhappens, the AlarmClock class's ",(0,i.kt)("inlineCode",{parentName:"p"},"onAlarm()")," method should be called in response\nto the event."),(0,i.kt)("p",null,"In order to actually set the alarm, the AlarmClock class's ",(0,i.kt)("inlineCode",{parentName:"p"},"setAlarm()")," method\nis called, as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    /**\n     * Sets the time at which the alarm should go off.\n     * @param hour The hour portion of the alarm time.\n     * @param minutes The minutes portion of the alarm time.\n     * @param message The message to display when the alarm goes off.\n     * @return The time at which the alarm will go off.\n     */\n    public function setAlarm(hour:Number = 0, minutes:Number = 0, message:String = \"Alarm!\"):Date\n    {\n        this.alarmMessage = message;\n        var now:Date = new Date();\n        // Create this time on today's date.\n        alarmTime = new Date(now.fullYear, now.month, now.date, hour, minutes);\n\n        // Determine if the specified time has already passed today.\n        if (alarmTime <= now)\n        {\n            alarmTime.setTime(alarmTime.time + MILLISECONDS_PER_DAY);\n        }\n\n        // Stop the alarm timer if it's currently set.\n        alarmTimer.reset();\n        // Calculate how many milliseconds should pass before the alarm should\n        // go off (the difference between the alarm time and now) and set that\n        // value as the delay for the alarm timer.\n        alarmTimer.delay = Math.max(1000, alarmTime.time - now.time);\n        alarmTimer.start();\n\n        return alarmTime;\n    }\n")),(0,i.kt)("p",null,"This method does several things, including storing the alarm message and\ncreating a Date object (",(0,i.kt)("inlineCode",{parentName:"p"},"alarmTime"),") representing the actual moment in time when\nthe alarm is to go off. Of most relevance to the current discussion, in the\nfinal several lines of the method, the ",(0,i.kt)("inlineCode",{parentName:"p"},"alarmTimer")," variable's timer is set and\nactivated. First, its ",(0,i.kt)("inlineCode",{parentName:"p"},"reset()")," method is called, stopping the timer and\nresetting it in case it is already running. Next, the current time (represented\nby the ",(0,i.kt)("inlineCode",{parentName:"p"},"now")," variable) is subtracted from the ",(0,i.kt)("inlineCode",{parentName:"p"},"alarmTime")," variable's value to\ndetermine how many milliseconds need to pass before the alarm goes off. The\nTimer class doesn't trigger its ",(0,i.kt)("inlineCode",{parentName:"p"},"timer")," event at an absolute time, so it is this\nrelative time difference that is assigned to the ",(0,i.kt)("inlineCode",{parentName:"p"},"delay")," property of\n",(0,i.kt)("inlineCode",{parentName:"p"},"alarmTimer"),". Finally, the ",(0,i.kt)("inlineCode",{parentName:"p"},"start()")," method is called to actually start the\ntimer."),(0,i.kt)("p",null,"Once the specified amount of time has passed, ",(0,i.kt)("inlineCode",{parentName:"p"},"alarmTimer")," dispatches the\n",(0,i.kt)("inlineCode",{parentName:"p"},"timer")," event. Because the AlarmClock class registered its ",(0,i.kt)("inlineCode",{parentName:"p"},"onAlarm()")," method as\na listener for that event, when the ",(0,i.kt)("inlineCode",{parentName:"p"},"timer")," event happens, ",(0,i.kt)("inlineCode",{parentName:"p"},"onAlarm()")," is\ncalled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    /**\n     * Called when the timer event is dispatched.\n     */\n    public function onAlarm(event:TimerEvent):void\n    {\n        trace("Alarm!");\n        var alarm:AlarmEvent = new AlarmEvent(this.alarmMessage);\n        this.dispatchEvent(alarm);\n    }\n')),(0,i.kt)("p",null,"A method that is registered as an event listener must be defined with the\nappropriate signature (that is, the set of parameters and return type of the\nmethod). To be a listener for the Timer class's ",(0,i.kt)("inlineCode",{parentName:"p"},"timer")," event, a method must\ndefine one parameter whose data type is TimerEvent (flash.events.TimerEvent), a\nsubclass of the Event class. When the Timer instance calls its event listeners,\nit passes a TimerEvent instance as the event object."),(0,i.kt)("h2",{id:"notifying-others-of-the-alarm"},"Notifying others of the alarm"),(0,i.kt)("p",null,"Like the Timer class, the AlarmClock class provides an event that allows other\ncode to receive notifications when the alarm goes off. For a class to use the\nevent-handling framework built into ActionScript, that class must implement the\nflash.events.IEventDispatcher interface. Most commonly, this is done by\nextending the flash.events.EventDispatcher class, which provides a standard\nimplementation of IEventDispatcher (or by extending one of EventDispatcher's\nsubclasses). As described previously, the AlarmClock class extends the\nSimpleClock class, which (through a chain of inheritance) extends the\nEventDispatcher class. All of this means that the AlarmClock class already has\nbuilt-in functionality to provide its own events."),(0,i.kt)("p",null,"Other code can register to be notified of the AlarmClock class's ",(0,i.kt)("inlineCode",{parentName:"p"},"alarm")," event\nby calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"addEventListener()")," method that AlarmClock inherits from\nEventDispatcher. When an AlarmClock instance is ready to notify other code that\nits ",(0,i.kt)("inlineCode",{parentName:"p"},"alarm")," event has been raised, it does so by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatchEvent()"),"\nmethod, which is also inherited from EventDispatcher."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"        var alarm:AlarmEvent = new AlarmEvent(this.alarmMessage);\n        this.dispatchEvent(alarm);\n")),(0,i.kt)("p",null,"These lines of code are taken from the AlarmClock class's ",(0,i.kt)("inlineCode",{parentName:"p"},"onAlarm()")," method\n(shown in its entirety previously). The AlarmClock instance's ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatchEvent()"),"\nmethod is called, which in turn notifies all the registered listeners that the\nAlarmClock instance's ",(0,i.kt)("inlineCode",{parentName:"p"},"alarm")," event has been triggered. The parameter that is\npassed to ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatchEvent()")," is the event object that will be passed along to the\nlistener methods. In this case, it is an instance of the AlarmEvent class, an\nEvent subclass created specifically for this example."),(0,i.kt)("h2",{id:"providing-a-custom-alarm-event"},"Providing a custom alarm event"),(0,i.kt)("p",null,"All event listeners receive an event object parameter with information about the\nparticular event being triggered. In many cases, the event object is an instance\nof the Event class. However, in some cases it is useful to provide additional\ninformation to event listeners. A common way to accomplish this is to define a\nnew class, a subclass of the Event class, and use an instance of that class as\nthe event object. In this example, an AlarmEvent instance is used as the event\nobject when the AlarmClock class's ",(0,i.kt)("inlineCode",{parentName:"p"},"alarm")," event is dispatched. The AlarmEvent\nclass, shown here, provides additional information about the ",(0,i.kt)("inlineCode",{parentName:"p"},"alarm")," event,\nspecifically the alarm message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    import flash.events.Event;\n\n    /**\n     * This custom Event class adds a message property to a basic Event.\n     */\n    public class AlarmEvent extends Event\n    {\n        /**\n         * The name of the new AlarmEvent type.\n         */\n        public static const ALARM:String = "alarm";\n\n        /**\n         * A text message that can be passed to an event handler\n         * with this event object.\n         */\n        public var message:String;\n\n        /**\n         * Constructor.\n         * @param message The text to display when the alarm goes off.\n         */\n        public function AlarmEvent(message:String = "ALARM!")\n        {\n            super(ALARM);\n            this.message = message;\n        }\n        ...\n    }\n')),(0,i.kt)("p",null,"The best way to create a custom event object class is to define a class that\nextends the Event class, as shown in the preceding example. To supplement the\ninherited functionality, the AlarmEvent class defines a property ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," that\ncontains the text of the alarm message associated with the event; the ",(0,i.kt)("inlineCode",{parentName:"p"},"message"),"\nvalue is passed in as a parameter in the AlarmEvent constructor. The AlarmEvent\nclass also defines the constant ",(0,i.kt)("inlineCode",{parentName:"p"},"ALARM"),", which can be used to refer to the\nspecific event (",(0,i.kt)("inlineCode",{parentName:"p"},"alarm"),") when calling the AlarmClock class's\n",(0,i.kt)("inlineCode",{parentName:"p"},"addEventListener()")," method."),(0,i.kt)("p",null,"In addition to adding custom functionality, every Event subclass must override\nthe inherited ",(0,i.kt)("inlineCode",{parentName:"p"},"clone()")," method as part of the ActionScript event-handling\nframework. Event subclasses can also optionally override the inherited\n",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," method to include the custom event's properties in the value\nreturned when the ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," method is called."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    /**\n     * Creates and returns a copy of the current instance.\n     * @return A copy of the current instance.\n     */\n    public override function clone():Event\n    {\n        return new AlarmEvent(message);\n    }\n\n    /**\n     * Returns a String containing all the properties of the current\n     * instance.\n     * @return A string representation of the current instance.\n     */\n    public override function toString():String\n    {\n        return formatToString("AlarmEvent", "type", "bubbles", "cancelable", "eventPhase", "message");\n    }\n')),(0,i.kt)("p",null,"The overridden ",(0,i.kt)("inlineCode",{parentName:"p"},"clone()")," method needs to return a new instance of the custom\nEvent subclass, with all the custom properties set to match the current\ninstance. In the overridden ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," method, the utility method\n",(0,i.kt)("inlineCode",{parentName:"p"},"formatToString()")," (inherited from Event) is used to provide a string with the\nname of the custom type, as well as the names and values of all its properties."))}h.isMDXComponent=!0}}]);