"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[26498],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=d(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||g[h]||i;return n?a.createElement(m,o(o({ref:t},s),{},{components:n})):a.createElement(m,o({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:r,o[1]=p;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},50385:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:3},o="Supporting the drag-in gesture",p={unversionedId:"development/user-interaction/drag-and-drop-in-air/supporting-the-drag-in-gesture",id:"development/user-interaction/drag-and-drop-in-air/supporting-the-drag-in-gesture",title:"Supporting the drag-in gesture",description:"To support the drag-in gesture, your application (or, more typically, a visual",source:"@site/docs/development/user-interaction/drag-and-drop-in-air/supporting-the-drag-in-gesture.md",sourceDirName:"development/user-interaction/drag-and-drop-in-air",slug:"/development/user-interaction/drag-and-drop-in-air/supporting-the-drag-in-gesture",permalink:"/docs/development/user-interaction/drag-and-drop-in-air/supporting-the-drag-in-gesture",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/drag-and-drop-in-air/supporting-the-drag-in-gesture.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Supporting the drag-out gesture",permalink:"/docs/development/user-interaction/drag-and-drop-in-air/supporting-the-drag-out-gesture"},next:{title:"Drag and drop in HTML",permalink:"/docs/development/user-interaction/drag-and-drop-in-air/drag-and-drop-in-html"}},l={},d=[{value:"Steps in a typical drop operation",id:"steps-in-a-typical-drop-operation",level:2},{value:"Acknowledging a drag-in gesture",id:"acknowledging-a-drag-in-gesture",level:2},{value:"Completing the drop",id:"completing-the-drop",level:2},{value:"Updating the visual appearance of a component",id:"updating-the-visual-appearance-of-a-component",level:2},{value:"Tracking mouse position during a drag-in gesture",id:"tracking-mouse-position-during-a-drag-in-gesture",level:2}],s={toc:d},c="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"supporting-the-drag-in-gesture"},"Supporting the drag-in gesture"),(0,r.kt)("p",null,"To support the drag-in gesture, your application (or, more typically, a visual\ncomponent of your application) must respond to ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragEnter")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragOver")," events."),(0,r.kt)("h2",{id:"steps-in-a-typical-drop-operation"},"Steps in a typical drop operation"),(0,r.kt)("p",null,"The following sequence of events is typical for a drop operation:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The user drags a clipboard object over a component.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The component dispatches a ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragEnter")," event.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragEnter")," event handler examines the event object to check the\navailable data formats and allowed actions. If the component can handle the\ndrop, it calls ",(0,r.kt)("inlineCode",{parentName:"p"},"NativeDragManager.acceptDragDrop()"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The NativeDragManager changes the mouse cursor to indicate that the object\ncan be dropped.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The user drops the object over the component.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The receiving component dispatches a ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragDrop")," event.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The receiving component reads the data in the desired format from the\nClipboard object within the event object.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If the drag gesture originated within an AIR application, then the\ninitiating interactive object dispatches a ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragComplete")," event. If\nthe gesture originated outside AIR, no feedback is sent."))),(0,r.kt)("h2",{id:"acknowledging-a-drag-in-gesture"},"Acknowledging a drag-in gesture"),(0,r.kt)("p",null,"When a user drags a clipboard item into the bounds of a visual component, the\ncomponent dispatches ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragEnter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragOver")," events. To determine\nwhether the component can accept the clipboard item, the handlers for these\nevents can check the ",(0,r.kt)("inlineCode",{parentName:"p"},"clipboard")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"allowedActions")," properties of the event\nobject. To signal that the component can accept the drop, the event handler must\ncall the ",(0,r.kt)("inlineCode",{parentName:"p"},"NativeDragManager.acceptDragDrop()")," method, passing a reference to the\nreceiving component. If more than one registered event listener calls the\n",(0,r.kt)("inlineCode",{parentName:"p"},"acceptDragDrop()")," method, the last handler in the list takes precedence. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"acceptDragDrop()")," call remains valid until the mouse leaves the bounds of the\naccepting object, triggering the ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragExit")," event."),(0,r.kt)("p",null,"If more than one action is permitted in the ",(0,r.kt)("inlineCode",{parentName:"p"},"allowedActions")," parameter passed to\n",(0,r.kt)("inlineCode",{parentName:"p"},"doDrag()"),", the user can indicate which of the allowed actions they intend to\nperform by holding down a modifier key. The drag manager changes the cursor\nimage to tell the user which action would occur if they completed the drop. The\nintended action is reported by the ",(0,r.kt)("inlineCode",{parentName:"p"},"dropAction")," property of the NativeDragEvent\nobject. The action set for a drag gesture is advisory only. The components\ninvolved in the transfer must implement the appropriate behavior. To complete a\nmove action, for example, the drag initiator might remove the dragged item and\nthe drop target might add it."),(0,r.kt)("p",null,"Your drag target can limit the drop action to one of the three possible actions\nby setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"dropAction")," property of NativeDragManager class. If a user tries\nto choose a different action using the keyboard, then the NativeDragManager\ndisplays the ",(0,r.kt)("em",{parentName:"p"},"unavailable")," cursor. Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"dropAction")," property in the handlers\nfor both the ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragEnter")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragOver")," events."),(0,r.kt)("p",null,"The following example illustrates an event handler for a ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragEnter")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragOver")," event. This handler only accepts a drag-in gesture if the\nclipboard being dragged contains text-format data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import flash.desktop.NativeDragManager;\nimport flash.events.NativeDragEvent;\n\npublic function onDragIn(event:NativeDragEvent):void{\n    NativeDragManager.dropAction = NativeDragActions.MOVE;\n    if(event.clipboard.hasFormat(ClipboardFormats.TEXT_FORMAT)){\n        NativeDragManager.acceptDragDrop(this); //'this' is the receiving component\n    }\n}\n")),(0,r.kt)("h2",{id:"completing-the-drop"},"Completing the drop"),(0,r.kt)("p",null,"When the user drops a dragged item on an interactive object that has accepted\nthe gesture, the interactive object dispatches a ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragDrop")," event. The\nhandler for this event can extract the data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"clipboard")," property of the\nevent object."),(0,r.kt)("p",null,"When the clipboard contains an application-defined format, the ",(0,r.kt)("inlineCode",{parentName:"p"},"transferMode"),"\nparameter passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getData()")," method of the Clipboard object determines\nwhether the drag manager returns a reference or a serialized version of the\nobject."),(0,r.kt)("p",null,"The following example illustrates an event handler for the ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragDrop"),"\nevent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import flash.desktop.Clipboard;\nimport flash.events.NativeDragEvent;\n\npublic function onDrop(event:NativeDragEvent):void {\n    if (event.clipboard.hasFormat(ClipboardFormats.TEXT_FORMAT)) {\n    var text:String =\n        String(event.clipboard.getData(ClipboardFormats.TEXT_FORMAT,\n                                    ClipboardTransferMode.ORIGINAL_PREFERRED));\n}\n")),(0,r.kt)("p",null,"Once the event handler exits, the Clipboard object is no longer valid. Any\nattempt to access the object or its data generates an error."),(0,r.kt)("h2",{id:"updating-the-visual-appearance-of-a-component"},"Updating the visual appearance of a component"),(0,r.kt)("p",null,"A component can update its visual appearance based on the NativeDragEvent\nevents. The following table describes the types of changes that a typical\ncomponent would make in response to the different events:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nativeDragStart"),(0,r.kt)("td",{parentName:"tr",align:null},"The initiating interactive object can use the ",(0,r.kt)("inlineCode",{parentName:"td"},"nativeDragStart")," event to provide visual feedback that the drag gesture originated from that interactive object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nativeDragUpdate"),(0,r.kt)("td",{parentName:"tr",align:null},"The initiating interactive object can use the nativeDragUpdate event to update its state during the gesture. (This event does not exist in AIR for Linux.)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nativeDragEnter"),(0,r.kt)("td",{parentName:"tr",align:null},"A potential receiving interactive object can use this event to take the focus, or indicate visually that it can or cannot accept the drop.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nativeDragOver"),(0,r.kt)("td",{parentName:"tr",align:null},'A potential receiving interactive object can use this event to respond to the movement of the mouse within the interactive object, such as when the mouse enters a "hot" region of a complex component such as a street map display.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nativeDragExit"),(0,r.kt)("td",{parentName:"tr",align:null},"A potential receiving interactive object can use this event to restore its state when a drag gesture moves outside its bounds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nativeDragComplete"),(0,r.kt)("td",{parentName:"tr",align:null},"The initiating interactive object can use this event to update its associated data model, such as by removing an item from a list, and to restore its visual state.")))),(0,r.kt)("h2",{id:"tracking-mouse-position-during-a-drag-in-gesture"},"Tracking mouse position during a drag-in gesture"),(0,r.kt)("p",null,"While a drag gesture remains over a component, that component dispatches\n",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragOver")," events. These events are dispatched every few milliseconds and\nalso whenever the mouse moves. The ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragOver")," event object can be used to\ndetermine the position of the mouse over the component. Having access to the\nmouse position can be helpful in situations where the receiving component is\ncomplex, but is not made up of sub-components. For example, if your application\ndisplayed a bitmap containing a street map and you wanted to highlight zones on\nthe map when the user dragged information into them, you could use the mouse\ncoordinates reported in the ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeDragOver")," event to track the mouse position\nwithin the map."))}g.isMDXComponent=!0}}]);