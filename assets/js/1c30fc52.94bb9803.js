"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[46376],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var o=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=o.createContext({}),c=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return o.createElement(p.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),u=i,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||r;return t?o.createElement(f,a(a({ref:n},l),{},{components:t})):o.createElement(f,a({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<r;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},12586:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(87462),i=(t(67294),t(3905));const r={},a="Basics of 3D display objects",s={unversionedId:"development/display/working-in-three-dimensions/basics-of-3d-objects",id:"development/display/working-in-three-dimensions/basics-of-3d-objects",title:"Basics of 3D display objects",description:"The main difference between a two-dimensional (2D) object and a",source:"@site/docs/development/display/working-in-three-dimensions/basics-of-3d-objects.md",sourceDirName:"development/display/working-in-three-dimensions",slug:"/development/display/working-in-three-dimensions/basics-of-3d-objects",permalink:"/docs/development/display/working-in-three-dimensions/basics-of-3d-objects",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-in-three-dimensions/basics-of-3d-objects.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Working in three dimensions (3D)",permalink:"/docs/development/display/working-in-three-dimensions/"},next:{title:"Creating and moving 3D display objects",permalink:"/docs/development/display/working-in-three-dimensions/creating-and-moving-3d-display-objects"}},p={},c=[{value:"Important concepts and terms",id:"important-concepts-and-terms",level:4}],l={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basics-of-3d-display-objects"},"Basics of 3D display objects"),(0,i.kt)("p",null,"The main difference between a two-dimensional (2D) object and a\nthree-dimensional (3D) object projected on a two-dimensional screen is the\naddition of a third dimension to the object. The third dimension allows the\nobject to move toward and away from viewpoint of the user."),(0,i.kt)("p",null,"When you explicitly set the ",(0,i.kt)("inlineCode",{parentName:"p"},"z")," property of a display object to a numeric value,\nthe object automatically creates a 3D transformation matrix. You can alter this\nmatrix to modify the 3D transformation settings of that object."),(0,i.kt)("p",null,"In addition, 3D rotation differs from 2D rotation. In 2D the axis of rotation is\nalways perpendicular to the x/y plane - in other words, on the z-axis. In 3D the\naxis of rotation can be around any of the x, y, or z axes. Setting the rotation\nand scaling properties of a display object enable it to move in 3D space."),(0,i.kt)("h4",{id:"important-concepts-and-terms"},"Important concepts and terms"),(0,i.kt)("p",null,"The following reference list contains important terms that you will encounter\nwhen programming 3-dimensional graphics:"),(0,i.kt)("p",null,"Perspective",(0,i.kt)("br",{parentName:"p"}),"\n","In a 2D plane, representation of parallel lines as converging on a vanishing\npoint to give the illusion of depth and distance."),(0,i.kt)("p",null,"Projection",(0,i.kt)("br",{parentName:"p"}),"\n","The production of a 2D image of a higher-dimensional object; 3D projection maps\n3D points to a 2D plane."),(0,i.kt)("p",null,"Rotation",(0,i.kt)("br",{parentName:"p"}),"\n","Changing the orientation (and often the position) of an object by moving every\npoint included in the object in a circular motion."),(0,i.kt)("p",null,"Transformation",(0,i.kt)("br",{parentName:"p"}),"\n","Altering 3D points or sets of points by translation, rotation, scale, skew, or a\ncombination of these actions."),(0,i.kt)("p",null,"Translation",(0,i.kt)("br",{parentName:"p"}),"\n","Changing the position of an object by moving every point included in the object\nby the same amount in the same direction."),(0,i.kt)("p",null,"Vanishing point",(0,i.kt)("br",{parentName:"p"}),"\n","Point at which receding parallel lines seem to meet when represented in linear\nperspective."),(0,i.kt)("p",null,"Vector",(0,i.kt)("br",{parentName:"p"}),"\n","A 3D vector represents a point or a location in the three-dimensional space\nusing the Cartesian coordinates x, y, and z."),(0,i.kt)("p",null,"Vertex",(0,i.kt)("br",{parentName:"p"}),"\n","A corner point."),(0,i.kt)("p",null,"Textured mesh",(0,i.kt)("br",{parentName:"p"}),"\n","Any point defining an object in 3D space."),(0,i.kt)("p",null,"UV mapping",(0,i.kt)("br",{parentName:"p"}),"\n","A way to apply a texture or bitmap to a 3D surface. UV mapping assigns values to\ncoordinates on an image as percentages of the horizontal (U) axis and vertical\n(V) axis."),(0,i.kt)("p",null,"T value",(0,i.kt)("br",{parentName:"p"}),"\n","The scaling factor for determining the size of a 3D object as the object moves\ntoward, or away from, the current point of view."),(0,i.kt)("p",null,"Culling",(0,i.kt)("br",{parentName:"p"}),"\n","Rendering, or not, surfaces with specific winding. Using culling you can hide\nsurfaces that are not visible to the current point of view."))}m.isMDXComponent=!0}}]);