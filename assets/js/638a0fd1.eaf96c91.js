"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[72428],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),p=l(t),h=a,m=p["".concat(s,".").concat(h)]||p[h]||c[h]||r;return t?o.createElement(m,i(i({ref:n},u),{},{components:t})):o.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=h;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d[p]="string"==typeof e?e:a,i[1]=d;for(var l=2;l<r;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},39903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var o=t(87462),a=(t(67294),t(3905));const r={sidebar_position:3},i="Loading external sound files",d={unversionedId:"development/rich-media-content/working-with-sound/loading-external-sound-files",id:"development/rich-media-content/working-with-sound/loading-external-sound-files",title:"Loading external sound files",description:"Each instance of the Sound class exists to load and trigger the playback of a",source:"@site/docs/development/rich-media-content/working-with-sound/loading-external-sound-files.md",sourceDirName:"development/rich-media-content/working-with-sound",slug:"/development/rich-media-content/working-with-sound/loading-external-sound-files",permalink:"/docs/development/rich-media-content/working-with-sound/loading-external-sound-files",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-sound/loading-external-sound-files.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Understanding the sound architecture",permalink:"/docs/development/rich-media-content/working-with-sound/understanding-the-sound-architecture"},next:{title:"Working with embedded sounds",permalink:"/docs/development/rich-media-content/working-with-sound/working-with-embedded-sounds"}},s={},l=[{value:"Monitoring the sound loading process",id:"monitoring-the-sound-loading-process",level:2}],u={toc:l},p="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"loading-external-sound-files"},"Loading external sound files"),(0,a.kt)("p",null,"Each instance of the Sound class exists to load and trigger the playback of a\nspecific sound resource. An application can't reuse a Sound object to load more\nthan one sound. If it wants to load a new sound resource, it should create a new\nSound object."),(0,a.kt)("p",null,"If you are loading a small sound file, such as a click sound to be attached to a\nbutton, your application can create a new Sound and have it automatically load\nthe sound file, as shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var req:URLRequest = new URLRequest("click.mp3");\nvar s:Sound = new Sound(req);\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Sound()")," constructor accepts a URLRequest object as its first parameter.\nWhen a value for the URLRequest parameter is supplied, the new Sound object\nstarts loading the specified sound resource automatically."),(0,a.kt)("p",null,"In all but the simplest cases, your application should pay attention to the\nsound's loading progress and watch for errors during loading. For example, if\nthe click sound is fairly large, it might not be completely loaded by the time\nthe user clicks the button that triggers the sound. Trying to play an unloaded\nsound could cause a run-time error. It's safer to wait for the sound to load\ncompletely before letting users take actions that might start sounds playing."),(0,a.kt)("p",null,"A Sound object dispatches a number of different events during the sound loading\nprocess. Your application can listen for these events to track loading progress\nand make sure that the sound loads completely before playing. The following\ntable lists the events that can be dispatched by a Sound object."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Event"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"open ( ",(0,a.kt)("inlineCode",{parentName:"td"},"Event.OPEN"),")"),(0,a.kt)("td",{parentName:"tr",align:null},"Dispatched right before the sound loading operation begins.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"progress ( ",(0,a.kt)("inlineCode",{parentName:"td"},"ProgressEvent.PROGRESS"),")"),(0,a.kt)("td",{parentName:"tr",align:null},"Dispatched periodically during the sound loading process when data is received from the file or stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id3 ( ",(0,a.kt)("inlineCode",{parentName:"td"},"Event.ID3"),")"),(0,a.kt)("td",{parentName:"tr",align:null},"Dispatched when ID3 data is available for an mp3 sound.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"complete ( ",(0,a.kt)("inlineCode",{parentName:"td"},"Event.COMPLETE"),")"),(0,a.kt)("td",{parentName:"tr",align:null},"Dispatched when all of the sound resource's data has been loaded.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ioError ( ",(0,a.kt)("inlineCode",{parentName:"td"},"IOErrorEvent.IO_ERROR"),")"),(0,a.kt)("td",{parentName:"tr",align:null},"Dispatched when a sound file cannot be located or when the loading process is interrupted before all sound data can be received.")))),(0,a.kt)("p",null,"The following code illustrates how to play a sound after it has finished\nloading:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import flash.events.Event;\nimport flash.media.Sound;\nimport flash.net.URLRequest;\n\nvar s:Sound = new Sound();\ns.addEventListener(Event.COMPLETE, onSoundLoaded);\nvar req:URLRequest = new URLRequest("bigSound.mp3");\ns.load(req);\n\nfunction onSoundLoaded(event:Event):void\n{\n    var localSound:Sound = event.target as Sound;\n    localSound.play();\n}\n')),(0,a.kt)("p",null,"First, the code sample creates a new Sound object without giving it an initial\nvalue for the URLRequest parameter. Then, it listens for the ",(0,a.kt)("inlineCode",{parentName:"p"},"Event.COMPLETE"),"\nevent from the Sound object, which causes the ",(0,a.kt)("inlineCode",{parentName:"p"},"onSoundLoaded()")," method to\nexecute when all the sound data is loaded. Next, it calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"Sound.load()"),"\nmethod with a new URLRequest value for the sound file."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onSoundLoaded()")," method executes when the sound loading is complete. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"target")," property of the Event object is a reference to the Sound object.\nCalling the ",(0,a.kt)("inlineCode",{parentName:"p"},"play()")," method of the Sound object then starts the sound playback."),(0,a.kt)("h2",{id:"monitoring-the-sound-loading-process"},"Monitoring the sound loading process"),(0,a.kt)("p",null,"Sound files can be very large and take a long time to load. While Flash Player\nand AIR let your application play sounds even before they are fully loaded, you\nmight want to give the user an indication of how much of the sound data has been\nloaded and how much of the sound has already been played."),(0,a.kt)("p",null,"The Sound class dispatches two events that make it relatively easy to display\nthe loading progress of a sound: ",(0,a.kt)("inlineCode",{parentName:"p"},"ProgressEvent.PROGRESS")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Event.COMPLETE"),".\nThe following example shows how to use these events to display progress\ninformation about the sound being loaded:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import flash.events.Event;\nimport flash.events.ProgressEvent;\nimport flash.media.Sound;\nimport flash.net.URLRequest;\n\nvar s:Sound = new Sound();\ns.addEventListener(ProgressEvent.PROGRESS, onLoadProgress);\ns.addEventListener(Event.COMPLETE, onLoadComplete);\ns.addEventListener(IOErrorEvent.IO_ERROR, onIOError);\n\nvar req:URLRequest = new URLRequest("bigSound.mp3");\ns.load(req);\n\nfunction onLoadProgress(event:ProgressEvent):void\n{\n    var loadedPct:uint =         Math.round(100 * (event.bytesLoaded / event.bytesTotal));\n    trace("The sound is " + loadedPct + "% loaded.");\n}\n\nfunction onLoadComplete(event:Event):void\n{\n    var localSound:Sound = event.target as Sound;\n    localSound.play();\n}\nfunction onIOError(event:IOErrorEvent)\n{\n    trace("The sound could not be loaded: " + event.text);\n}\n')),(0,a.kt)("p",null,"This code first creates a Sound object and then adds listeners to that object\nfor the ",(0,a.kt)("inlineCode",{parentName:"p"},"ProgressEvent.PROGRESS")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Event.COMPLETE")," events. After the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Sound.load()")," method has been called and the first data is received from the\nsound file, a ",(0,a.kt)("inlineCode",{parentName:"p"},"ProgressEvent.PROGRESS")," event occurs and triggers the\n",(0,a.kt)("inlineCode",{parentName:"p"},"onSoundLoadProgress()")," method."),(0,a.kt)("p",null,"The percentage of the sound data that has been loaded is equal to the value of\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"bytesLoaded")," property of the ProgressEvent object divided by the value of\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"bytesTotal")," property. The same ",(0,a.kt)("inlineCode",{parentName:"p"},"bytesLoaded")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bytesTotal")," properties\nare available on the Sound object as well. The example above simply shows\nmessages about the sound loading progress, but you can easily use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"bytesLoaded")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bytesTotal")," values to update progress bar components, such as\nthe ones that come with the Adobe Flex framework or the Adobe Flash authoring\ntool."),(0,a.kt)("p",null,"This example also shows how an application can recognize and respond to an error\nwhen loading sound files. For example, if a sound file with the given filename\ncannot be located, an ",(0,a.kt)("inlineCode",{parentName:"p"},"Event.IO_ERROR")," event is dispatched by the Sound object.\nIn the previous code, the ",(0,a.kt)("inlineCode",{parentName:"p"},"onIOError()")," method executes and displays a brief\nerror message when an error occurs."))}c.isMDXComponent=!0}}]);