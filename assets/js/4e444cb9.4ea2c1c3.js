"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[60751],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),g=a,m=d["".concat(l,".").concat(g)]||d[g]||h[g]||i;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},32978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:7},s="Arrays example: PlayList",o={unversionedId:"development/core-actionscript-classes/working-with-arrays/arrays-example-playlist",id:"development/core-actionscript-classes/working-with-arrays/arrays-example-playlist",title:"Arrays example: PlayList",description:"The PlayList example demonstrates techniques for working with arrays, in the",source:"@site/docs/development/core-actionscript-classes/working-with-arrays/arrays-example-playlist.md",sourceDirName:"development/core-actionscript-classes/working-with-arrays",slug:"/development/core-actionscript-classes/working-with-arrays/arrays-example-playlist",permalink:"/docs/development/core-actionscript-classes/working-with-arrays/arrays-example-playlist",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-arrays/arrays-example-playlist.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"mainSidebar",previous:{title:"Extending the Array class",permalink:"/docs/development/core-actionscript-classes/working-with-arrays/extending-the-array-class"},next:{title:"Handling errors",permalink:"/docs/development/core-actionscript-classes/handling-errors/"}},l={},p=[{value:"PlayList class overview",id:"playlist-class-overview",level:2},{value:"Adding a song to the list",id:"adding-a-song-to-the-list",level:2},{value:"Sorting the list of songs",id:"sorting-the-list-of-songs",level:2},{value:"Properties for sorting",id:"properties-for-sorting",level:4},{value:"Sorting by property and specifying sort options",id:"sorting-by-property-and-specifying-sort-options",level:4},{value:"Combining array elements into a character-delimited string",id:"combining-array-elements-into-a-character-delimited-string",level:2}],c={toc:p},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"arrays-example-playlist"},"Arrays example: PlayList"),(0,a.kt)("p",null,"The PlayList example demonstrates techniques for working with arrays, in the\ncontext of a music playlist application that manages a list of songs. These\ntechniques are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Creating an indexed array")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Adding items to an indexed array")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Sorting an array of objects by different properties, using different sorting\noptions")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Converting an array to a character-delimited string"))),(0,a.kt)("p",null,"To get the application files for this sample, see\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original"},(0,a.kt)("em",{parentName:"a"},"FlashPlatformAS3DevGuideExamples.zip")),".\nThe PlayList application files can be found in the Samples/PlayList folder. The\napplication consists of the following files:"),(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,(0,a.kt)("p",null,"File")),(0,a.kt)("th",null,(0,a.kt)("p",null,"Description")))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,"PlayList.mxml"),(0,a.kt)("p",null,"or"),(0,a.kt)("p",null,"PlayList.fla")),(0,a.kt)("td",null,(0,a.kt)("p",null,"The main application file in Flash (FLA) or Flex (MXML)."))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,"com/example/programmingas3/playlist/PlayList.as")),(0,a.kt)("td",null,(0,a.kt)("p",null,"A class representing a list of songs. It uses an Array to store the list, and manages the sorting of the list's items.."))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,"com/example/programmingas3/playlist/Song.as")),(0,a.kt)("td",null,(0,a.kt)("p",null,"A value object representing information about a single song. The items that are managed by the PlayList class are Song instances."))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,"com/example/programmingas3/playlist/SortProperty.as")),(0,a.kt)("td",null,(0,a.kt)("p",null,"A pseudo-enumeration whose available values represent the properties of the Song class by which a list of Song objects can be sorted."))))),(0,a.kt)("h2",{id:"playlist-class-overview"},"PlayList class overview"),(0,a.kt)("p",null,"The PlayList class manages a set of Song objects. It has public methods with\nfunctionality for adding a song to the playlist (the ",(0,a.kt)("inlineCode",{parentName:"p"},"addSong()")," method) and\nsorting the songs in the list (the ",(0,a.kt)("inlineCode",{parentName:"p"},"sortList()")," method). In addition, the class\nincludes a read-only accessor property, ",(0,a.kt)("inlineCode",{parentName:"p"},"songList"),", which provides access to the\nactual set of songs in the playlist. Internally, the PlayList class keeps track\nof its songs using a private Array variable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"public class PlayList\n{\n    private var _songs:Array;\n    private var _currentSort:SortProperty = null;\n    private var _needToSort:Boolean = false;\n    ...\n}\n")),(0,a.kt)("p",null,"In addition to the ",(0,a.kt)("inlineCode",{parentName:"p"},"_songs")," Array variable, which is used by the PlayList class\nto keep track of its list of songs, two other private variables keep track of\nwhether the list needs to be sorted ( ",(0,a.kt)("inlineCode",{parentName:"p"},"_needToSort")," ) and which property the\nsong list is sorted by at a given time ( ",(0,a.kt)("inlineCode",{parentName:"p"},"_currentSort")," )."),(0,a.kt)("p",null,"As with all objects, declaring an Array instance is only half the job of\ncreating an Array. Before accessing an Array instance's properties or methods,\nit must be instantiated, which is done in the PlayList class's constructor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    public function PlayList()\n    {\n        this._songs = new Array();\n        // Set the initial sorting.\n        this.sortList(SortProperty.TITLE);\n    }\n")),(0,a.kt)("p",null,"The first line of the constructor instantiates the ",(0,a.kt)("inlineCode",{parentName:"p"},"_songs")," variable, so that it\nis ready to be used. In addition, the ",(0,a.kt)("inlineCode",{parentName:"p"},"sortList()")," method is called to set the\ninitial sort-by property."),(0,a.kt)("h2",{id:"adding-a-song-to-the-list"},"Adding a song to the list"),(0,a.kt)("p",null,"When a user enters a new song into the application, the code in the data entry\nform calls the PlayList class's ",(0,a.kt)("inlineCode",{parentName:"p"},"addSong()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    /**\n     * Adds a song to the playlist.\n     */\n    public function addSong(song:Song):void\n    {\n        this._songs.push(song);\n        this._needToSort = true;\n    }\n")),(0,a.kt)("p",null,"Inside ",(0,a.kt)("inlineCode",{parentName:"p"},"addSong()"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"_songs")," array's ",(0,a.kt)("inlineCode",{parentName:"p"},"push()")," method is called, adding the\nSong object that was passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"addSong()")," as a new element in that array. With\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"push()")," method, the new element is added to the end of the array,\nregardless of any sorting that might have been applied previously. This means\nthat after the ",(0,a.kt)("inlineCode",{parentName:"p"},"push()")," method has been called, the list of songs is likely to\nno longer be sorted correctly, so the ",(0,a.kt)("inlineCode",{parentName:"p"},"_needToSort")," variable is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),".\nIn theory, the ",(0,a.kt)("inlineCode",{parentName:"p"},"sortList()")," method could be called immediately, removing the\nneed to keep track of whether the list is sorted or not at a given time. In\npractice, however, there is no need for the list of songs to be sorted until\nimmediately before it is retrieved. By deferring the sorting operation, the\napplication doesn't perform sorting that is unnecessary if, for example, several\nsongs are added to the list before it is retrieved."),(0,a.kt)("h2",{id:"sorting-the-list-of-songs"},"Sorting the list of songs"),(0,a.kt)("p",null,"Because the Song instances that are managed by the playlist are complex objects,\nusers of the application may wish to sort the playlist according to different\nproperties, such as song title or year of publication. In the PlayList\napplication, the task of sorting the list of songs has three parts: identifying\nthe property by which the list should be sorted, indicating what sorting options\nneed to be used when sorting by that property, and performing the actual sort\noperation."),(0,a.kt)("h4",{id:"properties-for-sorting"},"Properties for sorting"),(0,a.kt)("p",null,"A Song object keeps track of several properties, including song title, artist,\npublication year, filename, and a user-selected set of genres in which the song\nbelongs. Of these, only the first three are practical for sorting. As a matter\nof convenience for developers, the example includes the SortProperty class,\nwhich acts as an enumeration with values representing the properties available\nfor sorting."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    public static const TITLE:SortProperty = new SortProperty("title");\n    public static const ARTIST:SortProperty = new SortProperty("artist");\n    public static const YEAR:SortProperty = new SortProperty("year");\n')),(0,a.kt)("p",null,"The SortProperty class contain three constants, ",(0,a.kt)("inlineCode",{parentName:"p"},"TITLE"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ARTIST"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"YEAR"),",\neach of which stores a String containing the actual name of the associated Song\nclass property that can be used for sorting. Throughout the rest of the code,\nwhenever a sort property is indicated, it is done using the enumeration member.\nFor instance, in the PlayList constructor, the list is sorted initially by\ncalling the ",(0,a.kt)("inlineCode",{parentName:"p"},"sortList()")," method, as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"        // Set the initial sorting.\n        this.sortList(SortProperty.TITLE);\n")),(0,a.kt)("p",null,"Because the property for sorting is specified as ",(0,a.kt)("inlineCode",{parentName:"p"},"SortProperty.TITLE"),", the songs\nare sorted according to their title."),(0,a.kt)("h4",{id:"sorting-by-property-and-specifying-sort-options"},"Sorting by property and specifying sort options"),(0,a.kt)("p",null,"The work of actually sorting the list of songs is performed by the PlayList\nclass in the ",(0,a.kt)("inlineCode",{parentName:"p"},"sortList()")," method, as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    /**\n     * Sorts the list of songs according to the specified property.\n     */\n    public function sortList(sortProperty:SortProperty):void\n    {\n        ...\n        var sortOptions:uint;\n        switch (sortProperty)\n        {\n            case SortProperty.TITLE:\n                sortOptions = Array.CASEINSENSITIVE;\n                break;\n            case SortProperty.ARTIST:\n                sortOptions = Array.CASEINSENSITIVE;\n                break;\n            case SortProperty.YEAR:\n                sortOptions = Array.NUMERIC;\n                break;\n        }\n\n        // Perform the actual sorting of the data.\n        this._songs.sortOn(sortProperty.propertyName, sortOptions);\n\n        // Save the current sort property.\n        this._currentSort = sortProperty;\n\n        // Record that the list is sorted.\n        this._needToSort = false;\n    }\n")),(0,a.kt)("p",null,"When sorting by title or artist, it makes sense to sort alphabetically, but when\nsorting by year, it's most logical to perform a numeric sort. The ",(0,a.kt)("inlineCode",{parentName:"p"},"switch"),"\nstatement is used to define the appropriate sorting option, stored in the\nvariable ",(0,a.kt)("inlineCode",{parentName:"p"},"sortOptions"),", according to the value specified in the ",(0,a.kt)("inlineCode",{parentName:"p"},"sortProperty"),"\nparameter. Here again the named enumeration members are used to distinguish\nbetween properties, rather than hard-coded values."),(0,a.kt)("p",null,"With the sort property and sort options determined, the ",(0,a.kt)("inlineCode",{parentName:"p"},"_songs")," array is\nactually sorted by calling its ",(0,a.kt)("inlineCode",{parentName:"p"},"sortOn()")," method, passing those two values as\nparameters. The current sort property is recorded, as is the fact that the song\nlist is currently sorted."),(0,a.kt)("h2",{id:"combining-array-elements-into-a-character-delimited-string"},"Combining array elements into a character-delimited string"),(0,a.kt)("p",null,"In addition to using an array to maintain the song list in the PlayList class,\nin this example arrays are also used in the Song class to help manage the list\nof genres to which a given song belongs. Consider this snippet from the Song\nclass's definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'private var _genres:String;\n\npublic function Song(title:String, artist:String, year:uint, filename:String, genres:Array)\n{\n    ...\n    // Genres are passed in as an array\n    // but stored as a semicolon-separated string.\n    this._genres = genres.join(";");\n}\n')),(0,a.kt)("p",null,"When creating a new Song instance, the ",(0,a.kt)("inlineCode",{parentName:"p"},"genres")," parameter that is used to\nspecify the genre (or genres) the song belongs to is defined as an Array\ninstance. This makes it convenient to group multiple genres together into a\nsingle variable that can be passed to the constructor. However, internally the\nSong class maintains the genres in the private ",(0,a.kt)("inlineCode",{parentName:"p"},"_genres")," variable as a\nsemicolon-separated String instance. The Array parameter is converted into a\nsemicolon-separated string by calling its ",(0,a.kt)("inlineCode",{parentName:"p"},"join()")," method with the literal\nstring value ",(0,a.kt)("inlineCode",{parentName:"p"},'";"')," as the specified delimiter."),(0,a.kt)("p",null,"By the same token, the ",(0,a.kt)("inlineCode",{parentName:"p"},"genres")," accessors allow genres to be set or retrieved as\nan Array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    public function get genres():Array\n    {\n        // Genres are stored as a semicolon-separated String,\n        // so they need to be transformed into an Array to pass them back out.\n        return this._genres.split(";");\n    }\n    public function set genres(value:Array):void\n    {\n        // Genres are passed in as an array,\n        // but stored as a semicolon-separated string.\n        this._genres = value.join(";");\n    }\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"genres")," ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," accessor behaves exactly the same as the constructor; it\naccepts an Array and calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"join()")," method to convert it to a\nsemicolon-separated String. The ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," accessor performs the opposite operation:\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"_genres")," variable's ",(0,a.kt)("inlineCode",{parentName:"p"},"split()")," method is called, splitting the String into\nan array of values using the specified delimiter (the literal string value ",(0,a.kt)("inlineCode",{parentName:"p"},'";"'),"\nas before)."))}h.isMDXComponent=!0}}]);