"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[51637],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,u=d["".concat(s,".").concat(m)]||d[m]||h[m]||r;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},52052:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:4},o="External API example: Communicating between ActionScript and JavaScript in a web browser",l={unversionedId:"development/networking-and-communication/using-the-external-api/external-api-example-communicating-between-actionscript-and-javascript-in-a-web-browser",id:"development/networking-and-communication/using-the-external-api/external-api-example-communicating-between-actionscript-and-javascript-in-a-web-browser",title:"External API example: Communicating between ActionScript and JavaScript in a web browser",description:"This sample application demonstrates appropriate techniques for communicating",source:"@site/docs/development/networking-and-communication/using-the-external-api/external-api-example-communicating-between-actionscript-and-javascript-in-a-web-browser.md",sourceDirName:"development/networking-and-communication/using-the-external-api",slug:"/development/networking-and-communication/using-the-external-api/external-api-example-communicating-between-actionscript-and-javascript-in-a-web-browser",permalink:"/docs/development/networking-and-communication/using-the-external-api/external-api-example-communicating-between-actionscript-and-javascript-in-a-web-browser",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/networking-and-communication/using-the-external-api/external-api-example-communicating-between-actionscript-and-javascript-in-a-web-browser.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mainSidebar",previous:{title:"Using the ExternalInterface class",permalink:"/docs/development/networking-and-communication/using-the-external-api/using-the-externalinterface-class"},next:{title:"XML signature validation in AIR",permalink:"/docs/development/networking-and-communication/xml-signature-validation-in-air/"}},s={},c=[{value:"Preparing for ActionScript-browser communication",id:"preparing-for-actionscript-browser-communication",level:2},{value:"Exposing ActionScript methods to JavaScript",id:"exposing-actionscript-methods-to-javascript",level:2},{value:"Communication from ActionScript to the browser",id:"communication-from-actionscript-to-the-browser",level:2},{value:"Calling ActionScript code from JavaScript",id:"calling-actionscript-code-from-javascript",level:2},{value:"Detecting the browser type",id:"detecting-the-browser-type",level:2}],p={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"external-api-example-communicating-between-actionscript-and-javascript-in-a-web-browser"},"External API example: Communicating between ActionScript and JavaScript in a web browser"),(0,i.kt)("p",null,"This sample application demonstrates appropriate techniques for communicating\nbetween ActionScript and JavaScript in a web browser, in the context of an\nInstant Messaging application that allows a person to chat with him or herself\n(hence the name of the application: Introvert IM). Messages are sent between an\nHTML form in the web page and a SWF interface using the external API. The\ntechniques demonstrated by this example include the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Properly initiating communication by verifying that the browser is ready to\ncommunicate before setting up communication")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Checking whether the container supports the external API")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Calling JavaScript functions from ActionScript, passing parameters, and\nreceiving values in response")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Making ActionScript methods available to be called by JavaScript, and\nperforming those calls"))),(0,i.kt)("p",null,"To get the application files for this sample, see\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original"},(0,i.kt)("em",{parentName:"a"},"FlashPlatformAS3DevGuideExamples.zip")),".\nThe Introvert IM application files can be found in the Samples/IntrovertIM_HTML\nfolder. The application consists of the following files:"),(0,i.kt)("table",null,(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,(0,i.kt)("p",null,"File")),(0,i.kt)("th",null,(0,i.kt)("p",null,"Description")))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"IntrovertIMApp.fla"),(0,i.kt)("p",null,"or"),(0,i.kt)("p",null,"IntrovertIMApp.mxml")),(0,i.kt)("td",null,(0,i.kt)("p",null,"The main application file for Flash (FLA) or Flex (MXML)."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"com/example/programmingas3/introvertIM/IMManager.as")),(0,i.kt)("td",null,(0,i.kt)("p",null,"The class that establishes and manages communication between ActionScript and the container."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"com/example/programmingas3/introvertIM/IMMessageEvent.as")),(0,i.kt)("td",null,(0,i.kt)("p",null,"Custom event type, dispatched by the IMManager class when a message is received from the container."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"com/example/programmingas3/introvertIM/IMStatus.as")),(0,i.kt)("td",null,(0,i.kt)("p",null,'Enumeration whose values represent the different "availability" status values that can be selected in the application.'))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"html-flash/IntrovertIMApp.html"),(0,i.kt)("p",null,"or"),(0,i.kt)("p",null,"html-template/index.template.html")),(0,i.kt)("td",null,(0,i.kt)("p",null,"The HTML page for the application for Flash (html-flash/IntrovertIMApp.html) or the template that is used to create the container HTML page for the application for Adobe Flex (html-template/index.template.html). This file contains all the JavaScript functions that make up the container part of the application."))))),(0,i.kt)("h2",{id:"preparing-for-actionscript-browser-communication"},"Preparing for ActionScript-browser communication"),(0,i.kt)("p",null,"One of the most common uses for the external API is to allow ActionScript\napplications to communicate with a web browser. Using the external API,\nActionScript methods can call code written in JavaScript and vice versa. Because\nof the complexity of browsers and how they render pages internally, there is no\nway to guarantee that a SWF document will register its callbacks before the\nfirst JavaScript on the HTML page runs. For that reason, before calling\nfunctions in the SWF document from JavaScript, your SWF document should always\ncall the HTML page to notify it that the SWF document is ready to accept\nconnections."),(0,i.kt)("p",null,"For example, through a series of steps performed by the IMManager class, the\nIntrovert IM determines whether the browser is ready for communication and\nprepares the SWF file for communication. The first step, determining when the\nbrowser is ready for communication, happens in the IMManager constructor, as\nfollows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public function IMManager(initialStatus:IMStatus)\n{\n    _status = initialStatus;\n\n    // Check if the container is able to use the external API.\n    if (ExternalInterface.available)\n    {\n        try\n        {\n            // This calls the isContainerReady() method, which in turn calls\n            // the container to see if Flash Player has loaded and the container\n            // is ready to receive calls from the SWF.\n            var containerReady:Boolean = isContainerReady();\n            if (containerReady)\n            {\n                // If the container is ready, register the SWF's functions.\n                setupCallbacks();\n            }\n            else\n            {\n                // If the container is not ready, set up a Timer to call the\n                // container at 100ms intervals. Once the container responds that\n                // it's ready, the timer will be stopped.\n                var readyTimer:Timer = new Timer(100);\n                readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);\n                readyTimer.start();\n            }\n        }\n        ...\n    }\n    else\n    {\n        trace(\"External interface is not available for this container.\");\n    }\n}\n")),(0,i.kt)("p",null,"First of all, the code checks whether the external API is even available in the\ncurrent container using the ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.available")," property. If so, it\nbegins the process of setting up communication. Because security exceptions and\nother errors can occur when you attempt communication with an external\napplication, the code is wrapped in a ",(0,i.kt)("inlineCode",{parentName:"p"},"try")," block (the corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"catch"),"\nblocks were omitted from the listing for brevity)."),(0,i.kt)("p",null,"The code next calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"isContainerReady()")," method, listed here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'private function isContainerReady():Boolean\n{\n    var result:Boolean = ExternalInterface.call("isReady");\n    return result;\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"isContainerReady()")," method in turn uses ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.call()")," method\nto call the JavaScript function ",(0,i.kt)("inlineCode",{parentName:"p"},"isReady()"),", as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<script language="JavaScript">\n    \x3c!--\n    // ------- Private vars -------\n    var jsReady = false;\n    ...\n    // ------- functions called by ActionScript -------\n    // called to check if the page has initialized and JavaScript is available\n    function isReady()\n    {\n        return jsReady;\n    }\n    ...\n    // called by the onload event of the <body> tag\n    function pageInit()\n    {\n        // Record that JavaScript is ready to go.\n        jsReady = true;\n    }\n    ...\n    //--\x3e\n<\/script>\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"isReady()")," function simply returns the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"jsReady")," variable.\nThat variable is initially ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," ; once the ",(0,i.kt)("inlineCode",{parentName:"p"},"onload")," event of the web page has\nbeen triggered, the variable's value is changed to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". In other words, if\nActionScript calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"isReady()")," function before the page is loaded,\nJavaScript returns ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," to ",(0,i.kt)("inlineCode",{parentName:"p"},'ExternalInterface.call("isReady")'),", and\nconsequently the ActionScript ",(0,i.kt)("inlineCode",{parentName:"p"},"isContainerReady()")," method returns ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". Once\nthe page has loaded, the JavaScript ",(0,i.kt)("inlineCode",{parentName:"p"},"isReady()")," function returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", so the\nActionScript ",(0,i.kt)("inlineCode",{parentName:"p"},"isContainerReady()")," method also returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"Back in the IMManager constructor, one of two things happens depending on the\nreadiness of the container. If ",(0,i.kt)("inlineCode",{parentName:"p"},"isContainerReady()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the code\nsimply calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"setupCallbacks()")," method, which completes the process of\nsetting up communication with JavaScript. On the other hand, if\n",(0,i.kt)("inlineCode",{parentName:"p"},"isContainerReady()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", the process is essentially put on hold. A\nTimer object is created and is told to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"timerHandler()")," method every\n100 milliseconds, as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"private function timerHandler(event:TimerEvent):void\n{\n    // Check if the container is now ready.\n    var isReady:Boolean = isContainerReady();\n    if (isReady)\n    {\n        // If the container has become ready, we don't need to check anymore,\n        // so stop the timer.\n        Timer(event.target).stop();\n        // Set up the ActionScript methods that will be available to be\n        // called by the container.\n        setupCallbacks();\n    }\n}\n")),(0,i.kt)("p",null,"Each time the ",(0,i.kt)("inlineCode",{parentName:"p"},"timerHandler()")," method gets called, it once again checks the\nresult of the ",(0,i.kt)("inlineCode",{parentName:"p"},"isContainerReady()")," method. Once the container is initialized,\nthat method returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true.")," The code then stops the Timer and calls the\n",(0,i.kt)("inlineCode",{parentName:"p"},"setupCallbacks()")," method to finish the process of setting up communication with\nthe browser."),(0,i.kt)("h2",{id:"exposing-actionscript-methods-to-javascript"},"Exposing ActionScript methods to JavaScript"),(0,i.kt)("p",null,"As the previous example showed, once the code determines that the browser is\nready, the ",(0,i.kt)("inlineCode",{parentName:"p"},"setupCallbacks()")," method is called. This method prepares\nActionScript to receive calls from JavaScript, as shown here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'private function setupCallbacks():void\n{\n    // Register the SWF client functions with the container\n    ExternalInterface.addCallback("newMessage", newMessage);\n    ExternalInterface.addCallback("getStatus", getStatus);\n    // Notify the container that the SWF is ready to be called.\n    ExternalInterface.call("setSWFIsReady");\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"setCallBacks()")," method finishes the task of preparing for communication\nwith the container by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.addCallback()")," to register the\ntwo methods that will be available to be called from JavaScript. In this code,\nthe first parameter\u2014the name by which the method is known to JavaScript (\n",(0,i.kt)("inlineCode",{parentName:"p"},'"newMessage"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"getStatus"'),")\u2014is the same as the method's name in\nActionScript. (In this case, there was no benefit to using different names, so\nthe same name was reused for simplicity.) Finally, the\n",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.call()")," method is used to call the JavaScript function\n",(0,i.kt)("inlineCode",{parentName:"p"},"setSWFIsReady()"),", which notifies the container that the ActionScript functions\nhave been registered."),(0,i.kt)("h2",{id:"communication-from-actionscript-to-the-browser"},"Communication from ActionScript to the browser"),(0,i.kt)("p",null,"The Introvert IM application demonstrates a range of examples of calling\nJavaScript functions in the container page. In the simplest case (an example\nfrom the ",(0,i.kt)("inlineCode",{parentName:"p"},"setupCallbacks()")," method), the JavaScript function ",(0,i.kt)("inlineCode",{parentName:"p"},"setSWFIsReady()"),"\nis called without passing any parameters or receiving a value in return:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ExternalInterface.call("setSWFIsReady");\n')),(0,i.kt)("p",null,"In another example from the ",(0,i.kt)("inlineCode",{parentName:"p"},"isContainerReady()")," method, ActionScript calls the\n",(0,i.kt)("inlineCode",{parentName:"p"},"isReady()")," function and receives a Boolean value in response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'var result:Boolean = ExternalInterface.call("isReady");\n')),(0,i.kt)("p",null,"You can also pass parameters to JavaScript functions using the external API. For\ninstance, consider the IMManager class's ",(0,i.kt)("inlineCode",{parentName:"p"},"sendMessage()"),' method, which is called\nwhen the user is sending a new message to his or her "conversation partner":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public function sendMessage(message:String):void\n{\n    ExternalInterface.call("newMessage", message);\n}\n')),(0,i.kt)("p",null,"Once again, ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.call()")," is used to call the designated JavaScript\nfunction, notifying the browser of the new message. In addition, the message\nitself is passed as an additional parameter to ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.call()"),", and\nconsequently it is passed as a parameter to the JavaScript function\n",(0,i.kt)("inlineCode",{parentName:"p"},"newMessage()"),"."),(0,i.kt)("h2",{id:"calling-actionscript-code-from-javascript"},"Calling ActionScript code from JavaScript"),(0,i.kt)("p",null,"Communication is supposed to be a two-way street, and the Introvert IM\napplication is no exception. Not only does the Flash Player IM client call\nJavaScript to send messages, but the HTML form calls JavaScript code to send\nmessages to and ask for information from the SWF file as well. For example, when\nthe SWF file notifies the container that it has finished establishing contact\nand it's ready to communicate, the first thing the browser does is call the\nIMManager class's ",(0,i.kt)("inlineCode",{parentName:"p"},"getStatus()")," method to retrieve the initial user availability\nstatus from the SWF IM client. This is done in the web page, in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"updateStatus()")," function, as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<script language="JavaScript">\n    ...\n    function updateStatus()\n    {\n        if (swfReady)\n        {\n            var currentStatus = getSWF("IntrovertIMApp").getStatus();\n            document.forms["imForm"].status.value = currentStatus;\n        }\n    }\n    ...\n<\/script>\n')),(0,i.kt)("p",null,"The code checks the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"swfReady")," variable, which tracks whether the\nSWF file has notified the browser that it has registered its methods with the\nExternalInterface class. If the SWF file is ready to receive communication, the\nnext line ( ",(0,i.kt)("inlineCode",{parentName:"p"},"var currentStatus ="),"...) actually calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"getStatus()")," method in\nthe IMManager class. Three things happen in this line of code:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getSWF()")," JavaScript function is called, returning a reference to the\nJavaScript object representing the SWF file. The parameter passed to\n",(0,i.kt)("inlineCode",{parentName:"p"},"getSWF()")," determines which browser object is returned in case there is more\nthan one SWF file in an HTML page. The value passed to that parameter must\nmatch the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," attribute of the ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," tag and ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," attribute of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"embed")," tag used to include the SWF file.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Using the reference to the SWF file, the ",(0,i.kt)("inlineCode",{parentName:"p"},"getStatus()")," method is called as\nthough it's a method of the SWF object. In this case the function name \"\n",(0,i.kt)("inlineCode",{parentName:"p"},"getStatus")," \" is used because that's the name under which the ActionScript\nfunction is registered using ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.addCallback()"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getStatus()")," ActionScript method returns a value, and that value is\nassigned to the ",(0,i.kt)("inlineCode",{parentName:"p"},"currentStatus")," variable, which is then assigned as the\ncontent (the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," property) of the ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," text field."))),(0,i.kt)("p",null,"Note: If you're following along in the code, you've probably noticed that in the\nsource code for the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateStatus()")," function, the line of code that calls the\n",(0,i.kt)("inlineCode",{parentName:"p"},"getSWF()"),' function, is actually written as follows: var currentStatus =\ngetSWF("\\${application}").getStatus(); The ',(0,i.kt)("inlineCode",{parentName:"p"},"${application}")," text is a\nplaceholder in the HTML page template; when Adobe Flash Builder generates the\nactual HTML page for the application, this placeholder text is replaced by the\nsame text that is used as the ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," tag's ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," attribute and the ",(0,i.kt)("inlineCode",{parentName:"p"},"embed"),"\ntag's ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," attribute ( ",(0,i.kt)("inlineCode",{parentName:"p"},"IntrovertIMApp")," in the example). That is the value\nthat is expected by the ",(0,i.kt)("inlineCode",{parentName:"p"},"getSWF()")," function."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sendMessage()")," JavaScript function demonstrates passing a parameter to an\nActionScript function. ( ",(0,i.kt)("inlineCode",{parentName:"p"},"sendMessage()")," is thefunction that is called when the\nuser presses the Send button on the HTML page.)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<script language="JavaScript">\n    ...\n    function sendMessage(message)\n    {\n        if (swfReady)\n        {\n            ...\n            getSWF("IntrovertIMApp").newMessage(message);\n        }\n    }\n    ...\n<\/script>\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"newMessage()")," ActionScript method expects one parameter, so the JavaScript\n",(0,i.kt)("inlineCode",{parentName:"p"},"message")," variable gets passed to ActionScript by using it as a parameter in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"newMessage()")," method call in the JavaScript code."),(0,i.kt)("h2",{id:"detecting-the-browser-type"},"Detecting the browser type"),(0,i.kt)("p",null,"Because of differences in how browsers access content, it's important to always\nuse JavaScript to detect which browser the user is running and to access the\nmovie according to the browser-specific syntax, using the window or document\nobject, as shown in the ",(0,i.kt)("inlineCode",{parentName:"p"},"getSWF()")," JavaScript function in this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<script language="JavaScript">\n    ...\n    function getSWF(movieName)\n    {\n        if (navigator.appName.indexOf("Microsoft") != -1)\n        {\n            return window[movieName];\n        }\n        else\n        {\n            return document[movieName];\n        }\n    }\n    ...\n<\/script>\n')),(0,i.kt)("p",null,"If your script does not detect the user's browser type, the user might see\nunexpected behavior when playing SWF files in an HTML container."))}h.isMDXComponent=!0}}]);