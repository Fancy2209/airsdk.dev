"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[75496],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(n),h=i,u=d["".concat(s,".").concat(h)]||d[h]||m[h]||l;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=h;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[d]="string"==typeof e?e:i,o[1]=r;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},57576:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const l={sidebar_position:3},o="Date and time example: Simple analog clock",r={unversionedId:"development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock",id:"development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock",title:"Date and time example: Simple analog clock",description:"A simple analog clock example illustrates these two date and time concepts:",source:"@site/docs/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock.md",sourceDirName:"development/core-actionscript-classes/working-with-dates-and-times",slug:"/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock",permalink:"/docs/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Controlling time intervals",permalink:"/docs/development/core-actionscript-classes/working-with-dates-and-times/controlling-time-intervals"},next:{title:"Working with strings",permalink:"/docs/development/core-actionscript-classes/working-with-strings/"}},s={},c=[{value:"Defining the SimpleClock class",id:"defining-the-simpleclock-class",level:2},{value:"Creating the clock face",id:"creating-the-clock-face",level:2},{value:"Starting the timer",id:"starting-the-timer",level:2},{value:"Displaying the current time",id:"displaying-the-current-time",level:2}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"date-and-time-example-simple-analog-clock"},"Date and time example: Simple analog clock"),(0,i.kt)("p",null,"A simple analog clock example illustrates these two date and time concepts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Getting the current date and time and extracting values for the hours,\nminutes, and seconds")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Using a Timer to set the pace of an application"),(0,i.kt)("p",{parentName:"li"},"To get the application files for this sample, see\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original"},(0,i.kt)("em",{parentName:"a"},"FlashPlatformAS3DevGuideExamples.zip")),".\nThe SimpleClock application files can be found in the folder\nSamples/SimpleClock. The application consists of the following files:"),(0,i.kt)("table",null,(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,(0,i.kt)("p",null,"File")),(0,i.kt)("th",null,(0,i.kt)("p",null,"Description")))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"SimpleClockApp.mxml"),(0,i.kt)("p",null,"or"),(0,i.kt)("p",null,"SimpleClockApp.fla")),(0,i.kt)("td",null,(0,i.kt)("p",null,"The main application file in Flash (FLA) or Flex (MXML)."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"com/example/programmingas3/simpleclock/SimpleClock.as")),(0,i.kt)("td",null,(0,i.kt)("p",null,"The main application file."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"com/example/programmingas3/simpleclock/AnalogClockFace.as")),(0,i.kt)("td",null,(0,i.kt)("p",null,"Draws a round clock face and hour, minute, and seconds hands based on the time."))))))),(0,i.kt)("h2",{id:"defining-the-simpleclock-class"},"Defining the SimpleClock class"),(0,i.kt)("p",null,"The clock example is simple, but it's a good idea to organize even simple\napplications well so you could easily expand them in the future. To that end,\nthe SimpleClock application uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleClock")," class to handle the startup and\ntime-keeping tasks, and then uses another class named AnalogClockFace to\nactually display the time."),(0,i.kt)("p",null,"Here is the code that defines and initializes the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleClock")," class (note that\nin the Flash version, ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleClock")," extends the Sprite class instead):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"public class SimpleClock extends UIComponent \n{ \n    /** \n     * The time display component. \n     */ \n    private var face:AnalogClockFace; \n     \n    /** \n     * The Timer that acts like a heartbeat for the application. \n     */ \n    private var ticker:Timer;\n")),(0,i.kt)("p",null,"The class has two important properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"face")," property, which is an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"AnalogClockFace")," class")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ticker")," property, which is an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Timer")," class"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleClock")," class uses a default constructor. The ",(0,i.kt)("inlineCode",{parentName:"p"},"initClock()")," method\ntakes care of the real setup work, creating the clock face and starting the\nTimer instance ticking."))),(0,i.kt)("h2",{id:"creating-the-clock-face"},"Creating the clock face"),(0,i.kt)("p",null,"The next lines in the SimpleClock code create the clock face that is used to\ndisplay the time:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"/** \n * Sets up a SimpleClock instance. \n */ \npublic function initClock(faceSize:Number = 200)  \n{ \n    // creates the clock face and adds it to the display list \n    face = new AnalogClockFace(Math.max(20, faceSize)); \n    face.init(); \n    addChild(face); \n        \n    // draws the initial clock display \n    face.draw();\n")),(0,i.kt)("p",null,"The size of the face can be passed in to the ",(0,i.kt)("inlineCode",{parentName:"p"},"initClock()")," method. If no\n",(0,i.kt)("inlineCode",{parentName:"p"},"faceSize")," value is passed, a default size of 200 pixels is used."),(0,i.kt)("p",null,"Next, the application initializes the face and then adds it to the display list\nusing\ntheaddChild()",(0,i.kt)("inlineCode",{parentName:"p"},"method inherited from the DisplayObjectContainer class. Then it calls the"),"AnalogClockFace.draw()`\nmethod to display the clock face once, showing the current time."),(0,i.kt)("h2",{id:"starting-the-timer"},"Starting the timer"),(0,i.kt)("p",null,"After creating the clock face, the ",(0,i.kt)("inlineCode",{parentName:"p"},"initClock()")," method sets up a timer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"// creates a Timer that fires an event once per second \nticker = new Timer(1000);  \n\n// designates the onTick() method to handle Timer events \nticker.addEventListener(TimerEvent.TIMER, onTick); \n\n// starts the clock ticking \nticker.start();\n")),(0,i.kt)("p",null,"First this method instantiates a Timer instance that will dispatch an event once\nper second (every 1000 milliseconds). Since no second ",(0,i.kt)("inlineCode",{parentName:"p"},"repeatCount")," parameter is\npassed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Timer()")," constructor, the Timer will keep repeating indefinitely."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleClock.onTick()")," method will execute once per second when the ",(0,i.kt)("inlineCode",{parentName:"p"},"timer"),"\nevent is received:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"public function onTick(event:TimerEvent):void  \n{ \n    // updates the clock display \n    face.draw(); \n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AnalogClockFace.draw()")," method simply draws the clock face and hands."),(0,i.kt)("h2",{id:"displaying-the-current-time"},"Displaying the current time"),(0,i.kt)("p",null,"Most of the code in the AnalogClockFace class involves setting up the clock\nface's display elements. When the AnalogClockFace is initialized, it draws a\ncircular outline, places a numeric text label at each hour mark, and then\ncreates three Shape objects, one each for the hour hand, the minute hand, and\nthe second hand on the clock."),(0,i.kt)("p",null,"Once the SimpleClock application is running, it calls the\n",(0,i.kt)("inlineCode",{parentName:"p"},"AnalogClockFace.draw()")," method each second, as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"/** \n * Called by the parent container when the display is being drawn. \n */ \npublic override function draw():void \n{ \n    // stores the current date and time in an instance variable \n    currentTime = new Date(); \n    showTime(currentTime); \n}\n")),(0,i.kt)("p",null,"This method saves the current time in a variable, so the time can't change in\nthe middle of drawing the clock hands. Then it calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"showTime()")," method to\ndisplay the hands, as the following shows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"/** \n    * Displays the given Date/Time in that good old analog clock style. \n    */ \npublic function showTime(time:Date):void  \n{ \n    // gets the time values \n    var seconds:uint = time.getSeconds(); \n    var minutes:uint = time.getMinutes(); \n    var hours:uint = time.getHours(); \n\n    // multiplies by 6 to get degrees \n    this.secondHand.rotation = 180 + (seconds * 6); \n    this.minuteHand.rotation = 180 + (minutes * 6); \n\n    // Multiply by 30 to get basic degrees, then \n    // add up to 29.5 degrees (59 * 0.5) \n    // to account for the minutes. \n    this.hourHand.rotation = 180 + (hours * 30) + (minutes * 0.5); \n}\n")),(0,i.kt)("p",null,"First, this method extracts the values for the hours, minutes, and seconds of\nthe current time. Then it uses these values to calculate the angle for each\nhand. Since the second hand makes a full rotation in 60 seconds, it rotates 6\ndegrees each second (360/60). The minute hand rotates the same amount each\nminute."),(0,i.kt)("p",null,"The hour hand updates every minute, too, so it can show some progress as the\nminutes tick by. It rotates 30 degrees each hour (360/12), but it also rotates\nhalf a degree each minute (30 degrees divided by 60 minutes)."))}m.isMDXComponent=!0}}]);