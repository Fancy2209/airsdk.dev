"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[54431],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),l=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(a),h=i,f=p["".concat(d,".").concat(h)]||p[h]||u[h]||r;return a?n.createElement(f,o(o({ref:t},c),{},{components:a})):n.createElement(f,o({ref:t},c))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=h;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},68110:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var n=a(87462),i=(a(67294),a(3905));const r={sidebar_position:7.9},o="Working with database data types",s={unversionedId:"development/files-and-data/working-with-local-sql-databases-in-air/working-with-database-data-types",id:"development/files-and-data/working-with-local-sql-databases-in-air/working-with-database-data-types",title:"Working with database data types",description:"When a table is created in a database, the SQL statement for creating the table",source:"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-database-data-types.md",sourceDirName:"development/files-and-data/working-with-local-sql-databases-in-air",slug:"/development/files-and-data/working-with-local-sql-databases-in-air/working-with-database-data-types",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-database-data-types",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-database-data-types.md",tags:[],version:"current",sidebarPosition:7.9,frontMatter:{sidebar_position:7.9},sidebar:"mainSidebar",previous:{title:"Handling database errors",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/handling-database-errors"},next:{title:"Working with byte arrays",permalink:"/docs/development/files-and-data/working-with-bytearrays/"}},d={},l=[],c={toc:l},p="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"working-with-database-data-types"},"Working with database data types"),(0,i.kt)("p",null,"When a table is created in a database, the SQL statement for creating the table\ndefines the affinity, or data type, for each column in the table. Although\naffinity declarations can be omitted, it's a good idea to explicitly declare\ncolumn affinity in your ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE TABLE")," SQL statements."),(0,i.kt)("p",null,"As a general rule, any object that you store in a database using an ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT"),"\nstatement is returned as an instance of the same data type when you execute a\n",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statement. However, the data type of the retrieved value can be\ndifferent depending on the affinity of the database column in which the value is\nstored. When a value is stored in a column, if its data type doesn't match the\ncolumn's affinity, the database attempts to convert the value to match the\ncolumn's affinity. For example, if a database column is declared with ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMERIC"),"\naffinity, the database attempts to convert inserted data into a numeric storage\nclass ( ",(0,i.kt)("inlineCode",{parentName:"p"},"INTEGER")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"REAL"),') before storing the data. The database throws an\nerror if the data can\'t be converted. According to this rule, if the String\n"12345" is inserted into a ',(0,i.kt)("inlineCode",{parentName:"p"},"NUMERIC")," column, the database automatically converts\nit to the integer value 12345 before storing it in the database. When it's\nretrieved with a ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statement, the value is returned as an instance of a\nnumeric data type (such as Number) rather than as a String instance."),(0,i.kt)("p",null,"The best way to avoid undesirable data type conversion is to follow two rules.\nFirst, define each column with the affinity that matches the type of data that\nit is intended to store. Next, only insert values whose data type matches the\ndefined affinity. Following these rules provides two benefits. When you insert\nthe data it isn't converted unexpectedly (possibly losing its intended meaning\nas a result). In addition, when you retrieve the data it is returned with its\noriginal data type."),(0,i.kt)("p",null,"For more information about the available column affinity types and using data\ntypes in SQL statements, see the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/development/appendixes/sql-support-in-local-databases/data-type-support"},"Data type support"),"."))}u.isMDXComponent=!0}}]);