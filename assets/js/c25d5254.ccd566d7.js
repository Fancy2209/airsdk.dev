"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[15251],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return n?o.createElement(h,i(i({ref:t},l),{},{components:n})):o.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[p]="string"==typeof e?e:r,i[1]=d;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},28770:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const a={sidebar_position:10},i="Working with sound metadata",d={unversionedId:"development/rich-media-content/working-with-sound/working-with-sound-metadata",id:"development/rich-media-content/working-with-sound/working-with-sound-metadata",title:"Working with sound metadata",description:"Sound files that use the mp3 format can contain additional data about the sound",source:"@site/docs/development/rich-media-content/working-with-sound/working-with-sound-metadata.md",sourceDirName:"development/rich-media-content/working-with-sound",slug:"/development/rich-media-content/working-with-sound/working-with-sound-metadata",permalink:"/docs/development/rich-media-content/working-with-sound/working-with-sound-metadata",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-sound/working-with-sound-metadata.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"mainSidebar",previous:{title:"Controlling sound volume and panning",permalink:"/docs/development/rich-media-content/working-with-sound/controlling-sound-volume-and-panning"},next:{title:"Accessing raw sound data",permalink:"/docs/development/rich-media-content/working-with-sound/accessing-raw-sound-data"}},s={},c=[],l={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"working-with-sound-metadata"},"Working with sound metadata"),(0,r.kt)("p",null,"Sound files that use the mp3 format can contain additional data about the sound\nin the form of ID3 tags."),(0,r.kt)("p",null,"Not every mp3 file contains ID3 metadata. When a Sound object loads an mp3 sound\nfile, it dispatches an ",(0,r.kt)("inlineCode",{parentName:"p"},"Event.ID3")," event if the sound file contains ID3\nmetadata. To prevent run-time errors, your application should wait to receive\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"Event.ID3")," event before accessing the ",(0,r.kt)("inlineCode",{parentName:"p"},"Sound.id3")," property for a loaded\nsound."),(0,r.kt)("p",null,"The following code shows how to recognize when the ID3 metadata for a sound file\nhas been loaded:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import flash.events.Event;\nimport flash.media.ID3Info;\nimport flash.media.Sound;\n\nvar s:Sound = new Sound();\ns.addEventListener(Event.ID3, onID3InfoReceived);\ns.load("mySound.mp3");\n\nfunction onID3InfoReceived(event:Event)\n{\n    var id3:ID3Info = event.target.id3;\n\n    trace("Received ID3 Info:");\n    for (var propName:String in id3)\n    {\n        trace(propName + " = " + id3[propName]);\n    }\n}\n')),(0,r.kt)("p",null,"This code starts by creating a Sound object and telling it to listen for the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Event.ID3")," event. When the sound file's ID3 metadata is loaded, the\n",(0,r.kt)("inlineCode",{parentName:"p"},"onID3InfoReceived()")," method is called. The target of the Event object that is\npassed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"onID3InfoReceived()")," method is the original Sound object, so the\nmethod then gets the Sound object's ",(0,r.kt)("inlineCode",{parentName:"p"},"id3")," property and then iterates through all\nof its named properties to trace their values."))}u.isMDXComponent=!0}}]);