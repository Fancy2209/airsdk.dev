"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[51703],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,m=u["".concat(i,".").concat(d)]||u[d]||g[d]||o;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[u]="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},45843:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:6},s="Groups",p={unversionedId:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/groups",id:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/groups",title:"Groups",description:"You can specify a group in a regular expression by using parentheses, as",source:"@site/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/groups.md",sourceDirName:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax",slug:"/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/groups",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/groups",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/groups.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"mainSidebar",previous:{title:"Alternation",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/alternation"},next:{title:"Flags and properties",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/flags-and-properties"}},i={},l=[{value:"Using groups with quantifiers",id:"using-groups-with-quantifiers",level:4},{value:"Using groups with the alternator (|) character",id:"using-groups-with-the-alternator--character",level:4},{value:"Using groups to capture substring matches",id:"using-groups-to-capture-substring-matches",level:4},{value:"Using noncapturing groups and lookahead groups",id:"using-noncapturing-groups-and-lookahead-groups",level:4},{value:"Using named groups",id:"using-named-groups",level:4}],c={toc:l},u="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"groups"},"Groups"),(0,a.kt)("p",null,"You can specify a group in a regular expression by using parentheses, as\nfollows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/class-(\\d*)/\n")),(0,a.kt)("p",null,"A group is a subsection of a pattern. You can use groups to do the following\nthings:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Apply a quantifier to more than one character.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Delineate subpatterns to be applied with alternation (by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"|"),"\ncharacter).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Capture substring matches (for example, by using ",(0,a.kt)("inlineCode",{parentName:"p"},"\\1")," in a regular expression\nto match a previously matched group, or by using ",(0,a.kt)("inlineCode",{parentName:"p"},"$1")," similarly in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method of the String class)."))),(0,a.kt)("p",null,"The following sections provide details on these uses of groups."),(0,a.kt)("h4",{id:"using-groups-with-quantifiers"},"Using groups with quantifiers"),(0,a.kt)("p",null,"If you do not use a group, a quantifier applies to the character or character\nclass that precedes it, as the following shows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var pattern:RegExp = /ab*/;\n// matches the character a followed by\n// zero or more occurrences of the character b\n\npattern = /a\\d+/;\n// matches the character a followed by\n// one or more digits\n\npattern = /a[123]{1,3}/;\n// matches the character a followed by\n// one to three occurrences of either 1, 2, or 3\n")),(0,a.kt)("p",null,"However, you can use a group to apply a quantifier to more than one character or\ncharacter class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var pattern:RegExp = /(ab)*/;\n// matches zero or more occurrences of the character a\n// followed by the character b, such as ababab\n\npattern = /(a\\d)+/;\n// matches one or more occurrences of the character a followed by\n// a digit, such as a1a5a8a3\n\npattern = /(spam ){1,3}/;\n// matches 1 to 3 occurrences of the word spam followed by a space\n")),(0,a.kt)("p",null,"For more information on quantifiers, see ",(0,a.kt)("a",{parentName:"p",href:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers"},"Quantifiers"),"."),(0,a.kt)("h4",{id:"using-groups-with-the-alternator--character"},"Using groups with the alternator (","|",") character"),(0,a.kt)("p",null,"You can use groups to define the group of characters to which you want to apply\nan alternator (",(0,a.kt)("inlineCode",{parentName:"p"},"|"),") character, as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var pattern:RegExp = /cat|dog/;\n// matches cat or dog\n\npattern = /ca(t|d)og/;\n// matches catog or cadog\n")),(0,a.kt)("h4",{id:"using-groups-to-capture-substring-matches"},"Using groups to capture substring matches"),(0,a.kt)("p",null,"When you define a standard parenthetical group in a pattern, you can later refer\nto it in the regular expression. This is known as a ",(0,a.kt)("em",{parentName:"p"},"backreference"),", and these\nsorts of groups are known as ",(0,a.kt)("em",{parentName:"p"},"capturing groups"),". For example, in the following\nregular expression, the sequence ",(0,a.kt)("inlineCode",{parentName:"p"},"\\1")," matches whatever substring matched the\ncapturing parenthetical group:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var pattern:RegExp = /(\\d+)-by-\\1/;\n// matches the following: 48-by-48\n")),(0,a.kt)("p",null,"You can specify up to 99 of these backreferences in a regular expression by\ntyping ",(0,a.kt)("inlineCode",{parentName:"p"},"\\1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"\\2"),", ... , ",(0,a.kt)("inlineCode",{parentName:"p"},"\\99"),"."),(0,a.kt)("p",null,"Similarly, in the ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method of the String class, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"$1$99")," \u2013\nto insert captured group substring matches in the replacement string:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var pattern:RegExp = /Hi, (\\w+)\\./;\nvar str:String = "Hi, Bob.";\ntrace(str.replace(pattern, "$1, hello."));\n\u2003\u2003// output: Bob, hello.\n')),(0,a.kt)("p",null,"Also, if you use capturing groups, the ",(0,a.kt)("inlineCode",{parentName:"p"},"exec()")," method of the RegExp class and\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"match()")," method of the String class return substrings that match the\ncapturing groups:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var pattern:RegExp = /(\\w+)@(\\w+).(\\w+)/;\nvar str:String = "bob@example.com";\ntrace(pattern.exec(str));\n\u2003\u2003// bob@example.com,bob,example,com\n')),(0,a.kt)("h4",{id:"using-noncapturing-groups-and-lookahead-groups"},"Using noncapturing groups and lookahead groups"),(0,a.kt)("p",null,'A noncapturing group is one that is used for grouping only; it is not\n"collected," and it does not match numbered backreferences. Use ',(0,a.kt)("inlineCode",{parentName:"p"},"(?:")," and ",(0,a.kt)("inlineCode",{parentName:"p"},")")," to\ndefine noncapturing groups, as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var pattern = /(?:com|org|net);\n")),(0,a.kt)("p",null,"For example, note the difference between putting ",(0,a.kt)("inlineCode",{parentName:"p"},"(com|org)")," in a capturing\nversus a noncapturing group (the ",(0,a.kt)("inlineCode",{parentName:"p"},"exec()")," method lists capturing groups after\nthe complete match):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var pattern:RegExp = /(\\w+)@(\\w+).(com|org)/;\nvar str:String = "bob@example.com";\ntrace(pattern.exec(str));\n// bob@example.com,bob,example,com\n\n//noncapturing:\nvar pattern:RegExp = /(\\w+)@(\\w+).(?:com|org)/;\nvar str:String = "bob@example.com";\ntrace(pattern.exec(str));\n\u2003\u2003// bob@example.com,bob,example\n')),(0,a.kt)("p",null,"A special type of noncapturing group is the ",(0,a.kt)("em",{parentName:"p"},"lookahead group,")," of which there\nare two types: the ",(0,a.kt)("em",{parentName:"p"},"positive lookahead group")," and the ",(0,a.kt)("em",{parentName:"p"},"negative lookahead\ngroup.")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"(?=")," and ",(0,a.kt)("inlineCode",{parentName:"p"},")")," to define a positive lookahead group, which specifies that the\nsubpattern in the group must match at the position. However, the portion of the\nstring that matches the positive lookahead group can match remaining patterns in\nthe regular expression. For example, because ",(0,a.kt)("inlineCode",{parentName:"p"},"(?=e)")," is a positive lookahead\ngroup in the following code, the character ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," that it matches can be matched by\na subsequent part of the regular expression\u2014in this case, the capturing group,\n",(0,a.kt)("inlineCode",{parentName:"p"},"(\\w*)"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var pattern:RegExp = /sh(?=e)(\\w*)/i;\nvar str:String = "Shelly sells seashells by the seashore";\ntrace(pattern.exec(str));\n// Shelly,elly\n')),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"(?!")," and ",(0,a.kt)("inlineCode",{parentName:"p"},")")," to define a negative lookahead group that specifies that the\nsubpattern in the group must ",(0,a.kt)("em",{parentName:"p"},"not")," match at the position. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var pattern:RegExp = /sh(?!e)(\\w*)/i;\nvar str:String = "She sells seashells by the seashore";\ntrace(pattern.exec(str));\n// shore,ore\n')),(0,a.kt)("h4",{id:"using-named-groups"},"Using named groups"),(0,a.kt)("p",null,"A named group is a type of group in a regular expression that is given a named\nidentifier. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"(?P<name>")," and ",(0,a.kt)("inlineCode",{parentName:"p"},")")," to define the named group. For example, the\nfollowing regular expression includes a named group with the identifier named\n",(0,a.kt)("inlineCode",{parentName:"p"},"digits"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var pattern = /[a-z]+(?P<digits>\\d+)[a-z]+/;\n")),(0,a.kt)("p",null,"When you use the ",(0,a.kt)("inlineCode",{parentName:"p"},"exec()")," method, a matching named group is added as a property\nof the ",(0,a.kt)("inlineCode",{parentName:"p"},"result")," array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var myPattern:RegExp = /([a-z]+)(?P<digits>\\d+)[a-z]+/;\nvar str:String = "a123bcd";\nvar result:Array = myPattern.exec(str);\ntrace(result.digits); // 123\n')),(0,a.kt)("p",null,"Here is another example, which uses two named groups, with the identifiers\n",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dom"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var emailPattern:RegExp =\n    /(?P<name>(\\w|[_.\\-])+)@(?P<dom>((\\w|-)+))+\\.\\w{2,4}+/;\nvar address:String = "bob@example.com";\nvar result:Array = emailPattern.exec(address);\ntrace(result.name); // bob\ntrace(result.dom); // example\n')),(0,a.kt)("p",null,"Note: Named groups are not part of the ECMAScript language specification. They\nare an added feature in ActionScript 3.0."))}g.isMDXComponent=!0}}]);