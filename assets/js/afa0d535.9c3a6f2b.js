"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[62541],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),p=r,m=u["".concat(s,".").concat(p)]||u[p]||h[p]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},99587:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:2},i="DRM-related members and events of the NetStream class",l={unversionedId:"development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class",id:"development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class",title:"DRM-related members and events of the NetStream class",description:"The NetStream class provides a one-way streaming connection between Flash Player",source:"@site/docs/development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class.md",sourceDirName:"development/rich-media-content/using-digital-rights-management",slug:"/development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class",permalink:"/docs/development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Understanding the protected content workflow",permalink:"/docs/development/rich-media-content/using-digital-rights-management/understanding-the-protected-content-workflow"},next:{title:"Using the DRMStatusEvent class",permalink:"/docs/development/rich-media-content/using-digital-rights-management/using-the-drmstatusevent-class"}},s={},d=[],c={toc:d},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"drm-related-members-and-events-of-the-netstream-class"},"DRM-related members and events of the NetStream class"),(0,r.kt)("p",null,"The NetStream class provides a one-way streaming connection between Flash Player\nor an AIR application, and either Flash Media Server or the local file system.\n(The NetStream class also supports progressive download.) A NetStream object is\na channel within a NetConnection object. The NetStream class dispatches four\nDRM-related events:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,(0,r.kt)("p",null,"Event")),(0,r.kt)("th",null,(0,r.kt)("p",null,"Description")))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,"drmAuthenticate"),(0,r.kt)("p",null,"(AIR only)")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Defined in the DRMAuthenticateEvent class. This event is dispatched when a NetStream object tries to play protected content that requires a user credential for authentication before playback."),(0,r.kt)("p",null,"The properties of this event include header, usernamePrompt, passwordPrompt, and urlPrompt properties that can be used in obtaining and setting the user's credentials. This event occurs repeatedly until the NetStream object receives valid user credentials."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,"drmError")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Defined in the DRMErrorEvent class and dispatched when a NetStream object tries to play protected content and encounters a DRM-related error. For example, DRM error event object is dispatched when the user authorization fails. This error could occur because the user has not purchased the rights to view the content. It could also occur because the content provider does not support the viewing application."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,"drmStatus")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Defined in the DRMStatusEvent class. This event is dispatched when the protected content begins playing (when the user is authenticated and authorized to play the content). The DRMStatusEvent object contains information related to the voucher. Voucher information includes whether the content can be made available offline or when the voucher expires and the content can no longer be viewed."))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,"status")),(0,r.kt)("td",null,(0,r.kt)("p",null,'Defined in events.StatusEvent and only dispatched when the application attempts to play protected content, by invoking the NetStream.play() method. The value of the status code property is "DRM.encryptedFLV".'))))),(0,r.kt)("p",null,"The NetStream class includes the following DRM-specific methods, for use in AIR\nonly:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,(0,r.kt)("p",null,"Method")),(0,r.kt)("th",null,(0,r.kt)("p",null,"Description")))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,"resetDRMVouchers()")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Deletes all the locally cached digital rights management (DRM) voucher data. The application must download the vouchers again for the user to be able to access the encrypted content."),(0,r.kt)("p",null,"For example, the following code removes all vouchers from the cache:"),(0,r.kt)("p",null,"NetStream.resetDRMVouchers();"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,"setDRMAuthenticationCredentials()")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Passes a set of authentication credentials, namely user name, password, and authentication type, to the NetStream object for authentication. Valid authentication types are ",(0,r.kt)("samp",null,'"drm"')," and ",(0,r.kt)("samp",null,'"proxy"'),". With ",(0,r.kt)("samp",null,'"drm"')," authentication type, the credentials provided are authenticated against Adobe Access. With ",(0,r.kt)("samp",null,'"proxy"'),"authentication type, the credentials authenticate against the proxy server and must match the credentials required by the proxy server. For example, an enterprise can require the application to authenticate against a proxy server before the user can access the Internet. The proxy option allows this type of authentication. Unless anonymous authentication is used, after the proxy authentication, the user must still authenticate against Adobe Access to obtain the voucher and play the content. You can use ",(0,r.kt)("samp",null,"setDRMAuthenticationCredentials()"),'a second time, with " ',(0,r.kt)("samp",null,"drm"),' " option, to authenticate against Adobe Access.'))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("p",null,"preloadEmbeddedMetadata()")),(0,r.kt)("td",null,(0,r.kt)("p",null,"Parses a local media file for embedded metadata. When DRM-related metadata is found, AIR calls the ",(0,r.kt)("samp",null,"onDRMContentData()")," callback function."))))),(0,r.kt)("p",null,"In addition, in AIR, a NetStream object calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"onDRMContentData()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayStatus()")," callback functions as a result of a call to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"preloadEmbeddedMetaData()")," method. The ",(0,r.kt)("inlineCode",{parentName:"p"},"onDRMContentData()")," function is called\nwhen DRM metadata is encountered in a media file. The ",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayStatus()")," function\nis called when the file has been parsed. The ",(0,r.kt)("inlineCode",{parentName:"p"},"onDRMContentData()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayStatus()")," functions must be defined on the ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," object assigned to\nthe NetStream instance. If you use the same NetStream object to preload vouchers\nand play content, wait for the ",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayStatus()")," call generated by\n",(0,r.kt)("inlineCode",{parentName:"p"},"preloadEmbeddedMetaData()")," before starting playback."),(0,r.kt)("p",null,'In the following code for AIR, user name ("administrator"), password\n("password") and the "drm" authentication type are set for authenticating the\nuser. The setDRMAuthenticationCredentials() method must provide credentials that\nmatch credentials known and accepted by the content provider. These credentials\nare the same user credentials that permit the user to view the content. The code\nfor playing the video and making sure that a successful connection to the video\nstream has been made is not included here.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var connection:NetConnection = new NetConnection();\nconnection.connect(null);\n\nvar videoStream:NetStream = new NetStream(connection);\n\nvideoStream.addEventListener(DRMAuthenticateEvent.DRM_AUTHENTICATE,\n                        drmAuthenticateEventHandler)\n\nprivate function drmAuthenticateEventHandler(event:DRMAuthenticateEvent):void\n{\n    videoStream.setDRMAuthenticationCredentials("administrator", "password", "drm");\n}\n')))}h.isMDXComponent=!0}}]);