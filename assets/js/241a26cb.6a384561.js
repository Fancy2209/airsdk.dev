"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[93590],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),s=p(n),l=o,m=s["".concat(c,".").concat(l)]||s[l]||h[l]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=l;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u[s]="string"==typeof e?e:o,i[1]=u;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},2499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>u,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:4},i="Touch and drag",u={unversionedId:"development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag",id:"development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag",title:"Touch and drag",description:"Two methods were added to",source:"@site/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag.md",sourceDirName:"development/user-interaction/touch-multitouch-and-gesture-input",slug:"/development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag",permalink:"/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mainSidebar",previous:{title:"Touch event handling",permalink:"/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-event-handling"},next:{title:"Gesture event handling",permalink:"/docs/development/user-interaction/touch-multitouch-and-gesture-input/gesture-event-handling"}},c={},p=[],d={toc:p},s="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"touch-and-drag"},"Touch and drag"),(0,o.kt)("p",null,"Two methods were added to\n",(0,o.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/Sprite.html"},"the Sprite class"),"\nto provide additional support for touch-enabled applications supporting\ntouch-point input: ",(0,o.kt)("inlineCode",{parentName:"p"},"Sprite.startTouchDrag()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Sprite.stopTouchDrag()"),". These\nmethods behave the same as ",(0,o.kt)("inlineCode",{parentName:"p"},"Sprite.startDrag()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Sprite.stopDrag()")," do for\nmouse events. However, notice the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sprite.startTouchDrag()")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"Sprite.stopTouchDrag()")," methods both take ",(0,o.kt)("inlineCode",{parentName:"p"},"touchPointID")," values as parameters."),(0,o.kt)("p",null,"The runtime assigns the ",(0,o.kt)("inlineCode",{parentName:"p"},"touchPointID")," value to the event object for a touch\nevent. Use this value to respond to a specific touch point in the case the\nenvironment supports multiple, simultaneous, touch points (even if it does not\nhandle gestures). For more information about the ",(0,o.kt)("inlineCode",{parentName:"p"},"touchPointID")," property, see\n",(0,o.kt)("a",{parentName:"p",href:"/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-event-handling#touch-point-id"},"Touch Point ID"),"."),(0,o.kt)("p",null,"The following code shows a simple start drag event handler and a stop drag event\nhandler for a touch event. The variable ",(0,o.kt)("inlineCode",{parentName:"p"},"bg")," is a display object that contains\n",(0,o.kt)("inlineCode",{parentName:"p"},"mySprite"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mySprite.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin);\nmySprite.addEventListener(TouchEvent.TOUCH_END, onTouchEnd);\n\nfunction onTouchBegin(e:TouchEvent) {\n    e.target.startTouchDrag(e.touchPointID, false, bg.getRect(this));\n    trace("touch begin");\n}\n\nfunction onTouchEnd(e:TouchEvent) {\n    e.target.stopTouchDrag(e.touchPointID);\n    trace("touch end");\n}\n')),(0,o.kt)("p",null,"And the following shows a more advanced example combining dragging with touch\nevent phases:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;\nvar mySprite:Sprite = new Sprite();\n\nmySprite.graphics.beginFill(0x336699);\nmySprite.graphics.drawRect(0,0,40,40);\naddChild(mySprite);\n\nmySprite.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin);\nmySprite.addEventListener(TouchEvent.TOUCH_MOVE, onTouchMove);\nmySprite.addEventListener(TouchEvent.TOUCH_END, onTouchEnd);\n\nfunction onTouchBegin(evt:TouchEvent) {\n    evt.target.startTouchDrag(evt.touchPointID);\n    evt.target.scaleX *= 1.5;\n    evt.target.scaleY *= 1.5;\n}\n\nfunction onTouchMove(evt:TouchEvent) {\n    evt.target.alpha = 0.5;\n}\n\nfunction onTouchEnd(evt:TouchEvent) {\n    evt.target.stopTouchDrag(evt.touchPointID);\n    evt.target.width = 40;\n    evt.target.height = 40;\n    evt.target.alpha = 1;\n}\n")))}h.isMDXComponent=!0}}]);