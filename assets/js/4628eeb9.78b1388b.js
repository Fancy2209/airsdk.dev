"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[35125],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},f="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),f=p(n),h=a,y=f["".concat(l,".").concat(h)]||f[h]||m[h]||i;return n?r.createElement(y,o(o({ref:t},d),{},{components:n})):r.createElement(y,o({ref:t},d))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[f]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},29031:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:4},o="The read buffer and the bytesAvailable property of a FileStream object",s={unversionedId:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-read-buffer-and-the-bytesavailable-property-of-a-filestream-object",id:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-read-buffer-and-the-bytesavailable-property-of-a-filestream-object",title:"The read buffer and the bytesAvailable property of a FileStream object",description:"When a FileStream object with read capabilities (one in which the fileMode",source:"@site/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-read-buffer-and-the-bytesavailable-property-of-a-filestream-object.md",sourceDirName:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects",slug:"/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-read-buffer-and-the-bytesavailable-property-of-a-filestream-object",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-read-buffer-and-the-bytesavailable-property-of-a-filestream-object",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-read-buffer-and-the-bytesavailable-property-of-a-filestream-object.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mainSidebar",previous:{title:"The position property of a FileStream object",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-position-property-of-a-filestream-object"},next:{title:"Asynchronous programming and the events generated by a FileStream object opened asynchronously",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/asynchronous-programming-and-the events-generated-by-a-filestream-object-opened-asynchronously"}},l={},p=[],d={toc:p},f="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-read-buffer-and-the-bytesavailable-property-of-a-filestream-object"},"The read buffer and the bytesAvailable property of a FileStream object"),(0,a.kt)("p",null,"When a FileStream object with read capabilities (one in which the ",(0,a.kt)("inlineCode",{parentName:"p"},"fileMode"),"\nparameter of the ",(0,a.kt)("inlineCode",{parentName:"p"},"open()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"openAsync()")," method was set to ",(0,a.kt)("inlineCode",{parentName:"p"},"READ")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"UPDATE"),")\nis opened, the runtime stores the data in an internal buffer. The FileStream\nobject begins reading data into the buffer as soon as you open the file (by\ncalling the ",(0,a.kt)("inlineCode",{parentName:"p"},"open()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"openAsync()")," method of the FileStream object)."),(0,a.kt)("p",null,"For a file opened for synchronous operations (using the ",(0,a.kt)("inlineCode",{parentName:"p"},"open()")," method), you\ncan always set the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," pointer to any valid position (within the bounds\nof the file) and begin reading any amount of data (within the bounds of the\nfile), as shown in the following code (which assumes that the file contains at\nleast 100 bytes):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.open(myFile, FileMode.READ);\nmyFileStream.position = 10;\nmyFileStream.readBytes(myByteArray, 0, 20);\nmyFileStream.position = 89;\nmyFileStream.readBytes(myByteArray, 0, 10);\n')),(0,a.kt)("p",null,'Whether a file is opened for synchronous or asynchronous operations, the read\nmethods always read from the "available" bytes, represented by the\n',(0,a.kt)("inlineCode",{parentName:"p"},"bytesAvalable")," property. When reading synchronously, all of the bytes of the\nfile are available all of the time. When reading asynchronously, the bytes\nbecome available starting at the position specified by the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," property,\nin a series of asynchronous buffer fills signaled by ",(0,a.kt)("inlineCode",{parentName:"p"},"progress")," events."),(0,a.kt)("p",null,"For files opened for ",(0,a.kt)("em",{parentName:"p"},"synchronous")," operations, the ",(0,a.kt)("inlineCode",{parentName:"p"},"bytesAvailable")," property is\nalways set to represent the number of bytes from the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," property to the\nend of the file (all bytes in the file are always available for reading)."),(0,a.kt)("p",null,"For files opened for ",(0,a.kt)("em",{parentName:"p"},"asynchronous")," operations, you need to ensure that the read\nbuffer has consumed enough data before calling a read method. For a file opened\nasynchronously, as the read operation progresses, the data from the file,\nstarting at the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," specified when the read operation started, is added\nto the buffer, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"bytesAvailable")," property increments with each byte read.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"bytesAvailable")," property indicates the number of bytes available starting\nwith the byte at the position specified by the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," property to the end of\nthe buffer. Periodically, the FileStream object sends a ",(0,a.kt)("inlineCode",{parentName:"p"},"progress")," event."),(0,a.kt)("p",null,"For a file opened asynchronously, as data becomes available in the read buffer,\nthe FileStream object periodically dispatches the ",(0,a.kt)("inlineCode",{parentName:"p"},"progress")," event. For example,\nthe following code reads data into a ByteArray object, ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes"),", as it is read\ninto the buffer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var bytes:ByteArray = new ByteArray();\nvar myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.addEventListener(ProgressEvent.PROGRESS, progressHandler);\nmyFileStream.openAsync(myFile, FileMode.READ);\n\nfunction progressHandler(event:ProgressEvent):void\n{\n    myFileStream.readBytes(bytes, myFileStream.position, myFileStream.bytesAvailable);\n}\n')),(0,a.kt)("p",null,"For a file opened asynchronously, only the data in the read buffer can be read.\nFurthermore, as you read the data, it is removed from the read buffer. For read\noperations, you need to ensure that the data exists in the read buffer before\ncalling the read operation. For example, the following code reads 8000 bytes of\ndata starting from position 4000 in the file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.addEventListener(ProgressEvent.PROGRESS, progressHandler);\nmyFileStream.addEventListener(Event.COMPLETE, completed);\nmyFileStream.openAsync(myFile, FileMode.READ);\nmyFileStream.position = 4000;\n\nvar str:String = "";\n\nfunction progressHandler(event:Event):void\n{\n    if (myFileStream.bytesAvailable > 8000 )\n    {\n        str += myFileStream.readMultiByte(8000, "iso-8859-1");\n    }\n}\n')),(0,a.kt)("p",null,"During a write operation, the FileStream object does not read data into the read\nbuffer. When a write operation completes (all data in the write buffer is\nwritten to the file), the FileStream object starts a new read buffer (assuming\nthat the associated FileStream object was opened with read capabilities), and\nstarts reading data into the read buffer, starting from the position specified\nby the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," property. The ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," property may be the position of the\nlast byte written, or it may be a different position, if the user specifies a\ndifferent value for the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," object after the write operation."))}m.isMDXComponent=!0}}]);