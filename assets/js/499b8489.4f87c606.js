"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[77005],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),d=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(m.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=d(n),v=r,u=c["".concat(m,".").concat(v)]||c[v]||p[v]||i;return n?a.createElement(u,o(o({ref:t},l),{},{components:n})):a.createElement(u,o({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=v;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},63589:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={},o="Monitoring NetStream events",s={unversionedId:"development/rich-media-content/working-with-video/monitoring-netstream-events",id:"development/rich-media-content/working-with-video/monitoring-netstream-events",title:"Monitoring NetStream events",description:"Two types of events provide valuable usage data: netStatus and",source:"@site/docs/development/rich-media-content/working-with-video/monitoring-netstream-events.md",sourceDirName:"development/rich-media-content/working-with-video",slug:"/development/rich-media-content/working-with-video/monitoring-netstream-events",permalink:"/docs/development/rich-media-content/working-with-video/monitoring-netstream-events",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-video/monitoring-netstream-events.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Detecting player domain",permalink:"/docs/development/rich-media-content/working-with-video/detecting-player-domain"},next:{title:"Using the StageVideo APIs",permalink:"/docs/development/rich-media-content/working-with-video/using-the-stagevideo-apis"}},m={},d=[],l={toc:d},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"monitoring-netstream-events"},"Monitoring NetStream events"),(0,r.kt)("p",null,"Two types of events provide valuable usage data: ",(0,r.kt)("inlineCode",{parentName:"p"},"netStatus")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"mediaTypeData"),". In addition, a timer can be used to periodically log the\nposition of the NetStream playhead."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"netStatus")," events provide information you can use to determine how much of a\nstream a user viewed. Buffer and RTMFP stream transition events also result in a\n",(0,r.kt)("inlineCode",{parentName:"p"},"netStatus")," event."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mediaTypeData")," events provide meta and XMP data information. The\nNetstream.Play.Complete event is dispatched as a ",(0,r.kt)("inlineCode",{parentName:"p"},"mediaTypeData")," event. Other\ndata embedded in the stream are also available through ",(0,r.kt)("inlineCode",{parentName:"p"},"mediaTypeData")," events,\nincluding cue points, text, and images."),(0,r.kt)("p",null,"The following example illustrates how to create a class that monitors status and\ndata events from any active NetStreams in an application. Typically, such a\nclass would upload the data it was interested in analyzing to a server for\ncollection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'package com.adobe.example\n{\n    import flash.events.NetDataEvent;\n    import flash.events.NetMonitorEvent;\n    import flash.events.NetStatusEvent;\n    import flash.net.NetMonitor;\n    import flash.net.NetStream;\n\n    public class NetStreamEventMonitor\n    {\n        private var netmon:NetMonitor;\n        private var heartbeat:Timer = new Timer( 5000 );\n\n        public function NetStreamEventMonitor()\n        {\n            //Create NetMonitor object\n            netmon = new NetMonitor();\n            netmon.addEventListener( NetMonitorEvent.NET_STREAM_CREATE, newNetStream );\n\n            //Start the heartbeat timer\n            heartbeat.addEventListener( TimerEvent.TIMER, onHeartbeat );\n            heartbeat.start();\n        }\n\n        //On new NetStream\n        private function newNetStream( event:NetMonitorEvent ):void\n        {\n            trace( "New Netstream object");\n            var stream:NetStream = event.netStream;\n            stream.addEventListener(NetDataEvent.MEDIA_TYPE_DATA, onStreamData);\n            stream.addEventListener(NetStatusEvent.NET_STATUS, onStatus);\n        }\n\n        //On data events from a NetStream object\n        private function onStreamData( event:NetDataEvent ):void\n        {\n\n            var netStream:NetStream = event.target as NetStream;\n            trace( "Data event from " + netStream.info.uri + " at " + event.timestamp );\n            switch( event.info.handler )\n            {\n                case "onMetaData":\n                    //handle metadata;\n                    break;\n                case "onXMPData":\n                    //handle XMP;\n                    break;\n                case "onPlayStatus":\n                    //handle NetStream.Play.Complete\n                case "onImageData":\n                    //handle image\n                    break;\n                case "onTextData":\n                    //handle text\n                    break;\n                default:\n                    //handle other events\n\n            }\n        }\n\n        //On status events from a NetStream object\n        private function onStatus( event:NetStatusEvent ):void\n        {\n            trace( "Status event from " + event.target.info.uri + " at " + event.target.time );\n            //handle status events\n        }\n        //On heartbeat timer\n        private function onHeartbeat( event:TimerEvent ):void\n        {\n            var streams:Vector.<NetStream> = netmon.listStreams();\n            for( var i:int = 0; i < streams.length; i++ )\n            {\n                trace( "Heartbeat on " + streams[i].info.uri + " at " + streams[i].time );\n                //handle heartbeat event\n            }\n        }\n\n    }\n}\n')))}p.isMDXComponent=!0}}]);