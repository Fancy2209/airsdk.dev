"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[85926],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>g});var i=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);r&&(i=i.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,i,n=function(e,r){if(null==e)return{};var t,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=i.createContext({}),s=function(e){var r=i.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},m=function(e){var r=s(e.components);return i.createElement(p.Provider,{value:r},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return i.createElement(i.Fragment,{},r)}},f=i.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(t),f=n,g=d["".concat(p,".").concat(f)]||d[f]||c[f]||o;return t?i.createElement(g,a(a({ref:r},m),{},{components:t})):i.createElement(g,a({ref:r},m))}));function g(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,a=new Array(o);a[0]=f;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l[d]="string"==typeof e?e:n,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},20007:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=t(87462),n=(t(67294),t(3905));const o={sidebar_position:1},a="Dropping remote files",l={unversionedId:"development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files",id:"development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files",title:"Dropping remote files",description:"Use the URLFilePromise class to create file promise objects representing files",source:"@site/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files.md",sourceDirName:"development/user-interaction/drag-and-drop-in-air/dropping-file-promises",slug:"/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files",permalink:"/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mainSidebar",previous:{title:"Dropping file promises",permalink:"/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/"},next:{title:"Implementing the IFilePromise interface",permalink:"/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/implementing-the-ifilepromise-interface"}},p={},s=[],m={toc:s},d="wrapper";function c(e){let{components:r,...t}=e;return(0,n.kt)(d,(0,i.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dropping-remote-files"},"Dropping remote files"),(0,n.kt)("p",null,"Use the URLFilePromise class to create file promise objects representing files\nor data available at a URL. Add one or more file promise objects to the\nclipboard using the ",(0,n.kt)("inlineCode",{parentName:"p"},"FILE_PROMISE_LIST")," clipboard format. In the following\nexample, a single file, available at ",(0,n.kt)("a",{parentName:"p",href:"http://www.example.com/foo.txt"},"http://www.example.com/foo.txt"),", is\ndownloaded and saved to the drop location as bar.txt. (The remote and the local\nfile names do not have to match.)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'if( Clipboard.supportsFilePromise )\n{\n    var filePromise:URLFilePromise = new URLFilePromise();\n    filePromise.request = new URLRequest("http://example.com/foo.txt");\n    filePromise.relativePath = "bar.txt";\n\n    var fileList:Array = new Array( filePromise );\n    var clipboard:Clipboard = new Clipboard();\n    clipboard.setData( ClipboardFormats.FILE_PROMISE_LIST_FORMAT, fileList );\n    NativeDragManager.doDrag( dragSource, clipboard );\n}\n')),(0,n.kt)("p",null,"You can allow the user to drag more than one file at a time by adding more file\npromise objects to the array assigned to the clipboard. You can also specify\nsubdirectories in the ",(0,n.kt)("inlineCode",{parentName:"p"},"relativePath")," property so that some or all of the files\nincluded in the operation are placed in a subfolder relative to the drop\nlocation."),(0,n.kt)("p",null,"The following example illustrates how to initiate a drag operation that includes\nmultiple file promises. In this example, an html page, ",(0,n.kt)("em",{parentName:"p"},"article.html")," , is put\non the clipboard as a file promise, along with its two linked image files. The\nimages are copied into an ",(0,n.kt)("em",{parentName:"p"},"images")," subfolder so that the relative links are\nmaintained."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'if( Clipboard.supportsFilePromise )\n{\n    //Create the promise objects\n    var filePromise:URLFilePromise = new URLFilePromise();\n    filePromise.request = new URLRequest("http://example.com/article.html");\n    filePromise.relativePath = "article.html";\n\n    var image1Promise:URLFilePromise = new URLFilePromise();\n    image1Promise.request = new URLRequest("http://example.com/images/img_1.jpg");\n    image1Promise.relativePath = "images/img_1.html";\n    var image2Promise:URLFilePromise = new URLFilePromise();\n    image2Promise.request = new URLRequest("http://example.com/images/img_2.jpg");\n    image2Promise.relativePath = "images/img_2.jpg";\n\n    //Put the promise objects onto the clipboard inside an array\n    var fileList:Array = new Array( filePromise, image1Promise, image2Promise );\n    var clipboard:Clipboard = new Clipboard();\n    clipboard.setData( ClipboardFormats.FILE_PROMISE_LIST_FORMAT, fileList );\n    //Start the drag operation\n    NativeDragManager.doDrag( dragSource, clipboard );\n}\n')))}c.isMDXComponent=!0}}]);