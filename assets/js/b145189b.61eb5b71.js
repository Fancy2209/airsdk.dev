"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[49886],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=p(n),m=a,d=h["".concat(o,".").concat(m)]||h[m]||c[m]||i;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[h]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},33327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:4},l="Regular expressions example: A Wiki parser",s={unversionedId:"development/core-actionscript-classes/using-regular-expressions/regular-expressions-example-a-wiki-parser",id:"development/core-actionscript-classes/using-regular-expressions/regular-expressions-example-a-wiki-parser",title:"Regular expressions example: A Wiki parser",description:"This simple Wiki text conversion example illustrates a number of uses for",source:"@site/docs/development/core-actionscript-classes/using-regular-expressions/regular-expressions-example-a-wiki-parser.md",sourceDirName:"development/core-actionscript-classes/using-regular-expressions",slug:"/development/core-actionscript-classes/using-regular-expressions/regular-expressions-example-a-wiki-parser",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expressions-example-a-wiki-parser",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/using-regular-expressions/regular-expressions-example-a-wiki-parser.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mainSidebar",previous:{title:"Methods for using regular expressions with strings",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/methods-for-using-regular-expressions-with-strings"},next:{title:"Overview",permalink:"/docs/development/core-actionscript-classes/working-with-xml/"}},o={},p=[{value:"Defining the WikiParser class",id:"defining-the-wikiparser-class",level:2},{value:"Converting boldface and italic patterns",id:"converting-boldface-and-italic-patterns",level:4},{value:"Converting bullet patterns",id:"converting-bullet-patterns",level:4},{value:"Converting paragraph Wiki patterns",id:"converting-paragraph-wiki-patterns",level:4},{value:"Converting URLs to HTML &lt;a&gt; tags",id:"converting-urls-to-html-a-tags",level:2},{value:"Converting U.S. dollar strings to euro strings",id:"converting-us-dollar-strings-to-euro-strings",level:2}],u={toc:p},h="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"regular-expressions-example-a-wiki-parser"},"Regular expressions example: A Wiki parser"),(0,a.kt)("p",null,"This simple Wiki text conversion example illustrates a number of uses for\nregular expressions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Converting lines of text that match a source Wiki pattern to the appropriate\nHTML output strings.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Using a regular expression to convert URL patterns to HTML ",(0,a.kt)("inlineCode",{parentName:"p"},"<a>")," hyperlink\ntags.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Using a regular expression to convert U.S. dollar strings (such as ",(0,a.kt)("inlineCode",{parentName:"p"},'"$9.95"'),")\nto euro strings (such as ",(0,a.kt)("inlineCode",{parentName:"p"},'"8.24 \u20ac"'),")."))),(0,a.kt)("p",null,"To get the application files for this sample, see\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original"},(0,a.kt)("em",{parentName:"a"},"FlashPlatformAS3DevGuideExamples.zip")),".\nThe WikiEditor application files can be found in the folder Samples/WikiEditor.\nThe application consists of the following files:"),(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,(0,a.kt)("p",null,"File")),(0,a.kt)("th",null,(0,a.kt)("p",null,"Description")))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,"WikiEditor.mxml"),(0,a.kt)("p",null,"or"),(0,a.kt)("p",null,"WikiEditor.fla")),(0,a.kt)("td",null,(0,a.kt)("p",null,"The main application file in Flash (FLA) or Flex (MXML)."))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,"com/example/programmingas3/regExpExamples/WikiParser.as")),(0,a.kt)("td",null,(0,a.kt)("p",null,"A class that includes methods that use regular expressions to convert Wiki input text patterns to the equivalent HTML output."))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,"com/example/programmingas3/regExpExamples/URLParser.as")),(0,a.kt)("td",null,(0,a.kt)("p",null,"A class that includes methods that use regular expressions to convert URL strings to HTML ",(0,a.kt)("samp",null,"<a>"),"hyperlink tags."))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,"com/example/programmingas3/regExpExamples/CurrencyConverter.as")),(0,a.kt)("td",null,(0,a.kt)("p",null,"A class that includes methods that use regular expressions to convert U.S. dollar strings to euro strings."))))),(0,a.kt)("h2",{id:"defining-the-wikiparser-class"},"Defining the WikiParser class"),(0,a.kt)("p",null,"The WikiParser class includes methods that convert Wiki input text into the\nequivalent HTML output. This is not a very robust Wiki conversion application,\nbut it does illustrate some good uses of regular expressions for pattern\nmatching and string conversion."),(0,a.kt)("p",null,"The constructor function, along with the ",(0,a.kt)("inlineCode",{parentName:"p"},"setWikiData()")," method, simply\ninitializes a sample string of Wiki input text, as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"public function WikiParser()\n{\n    wikiData = setWikiData();\n}\n")),(0,a.kt)("p",null,"When the user clicks the Test button in the sample application, the application\ninvokes the ",(0,a.kt)("inlineCode",{parentName:"p"},"parseWikiString()")," method of the WikiParser object. This method\ncalls a number of other methods, which in turn assemble the resulting HTML\nstring."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"public function parseWikiString(wikiString:String):String\n{\n    var result:String = parseBold(wikiString);\n    result = parseItalic(result);\n    result = linesToParagraphs(result);\n    result = parseBullets(result);\n    return result;\n}\n")),(0,a.kt)("p",null,"Each of the methods called\u2014 ",(0,a.kt)("inlineCode",{parentName:"p"},"parseBold()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"parseItalic()"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"linesToParagraphs()"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"parseBullets()")," \u2014uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method of the\nstring to replace matching patterns, defined by a regular expression, in order\nto transform the input Wiki text into HTML-formatted text."),(0,a.kt)("h4",{id:"converting-boldface-and-italic-patterns"},"Converting boldface and italic patterns"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"parseBold()")," method looks for a Wiki boldface text pattern (such as\n",(0,a.kt)("inlineCode",{parentName:"p"},"'''foo'''"),") and transforms it into its HTML equivalent (such as ",(0,a.kt)("inlineCode",{parentName:"p"},"<b>foo</b>"),"),\nas follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"private function parseBold(input:String):String\n{\n    var pattern:RegExp = /'''(.*?)'''/g;\n    return input.replace(pattern, \"<b>$1</b>\");\n}\n")),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"(.?*)")," portion of the regular expression matches any number of\ncharacters (",(0,a.kt)("inlineCode",{parentName:"p"},"*"),") between the tw defining ",(0,a.kt)("inlineCode",{parentName:"p"},"'''")," patterns. The ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," quantifier\nmakes the match nongreedy, so that for a string such as\n",(0,a.kt)("inlineCode",{parentName:"p"},"'''aaa''' bbb '''ccc'''"),", the first matched string will be ",(0,a.kt)("inlineCode",{parentName:"p"},"'''aaa'''")," and not\nthe entire string (which starts and ends with the ",(0,a.kt)("inlineCode",{parentName:"p"},"'''")," pattern)."),(0,a.kt)("p",null,"The parentheses in the regular expression define a capturing group, and the\n",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method refers to this group by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"$1")," code in the\nreplacement string. The ",(0,a.kt)("inlineCode",{parentName:"p"},"g")," (",(0,a.kt)("inlineCode",{parentName:"p"},"global"),") flag in the regular expression ensures\nthat the ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method replaces all matches in the string (not simply the\nfirst one)."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"parseItalic()")," method works similarly to the ",(0,a.kt)("inlineCode",{parentName:"p"},"parseBold()")," method, except\nthat it checks for two apostrophes (",(0,a.kt)("inlineCode",{parentName:"p"},"''"),") as the delimiter for italic text (not\nthree):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"private function parseItalic(input:String):String\n{\n    var pattern:RegExp = /''(.*?)''/g;\n    return input.replace(pattern, \"<i>$1</i>\");\n}\n")),(0,a.kt)("h4",{id:"converting-bullet-patterns"},"Converting bullet patterns"),(0,a.kt)("p",null,"As the following example shows, the ",(0,a.kt)("inlineCode",{parentName:"p"},"parseBullet()")," method looks for the Wiki\nbullet line pattern (such as ",(0,a.kt)("inlineCode",{parentName:"p"},"* foo"),") and transforms it into its HTML equivalent\n(such as ",(0,a.kt)("inlineCode",{parentName:"p"},"<li>foo</li>"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'private function parseBullets(input:String):String\n{\n    var pattern:RegExp = /^\\*(.*)/gm;\n    return input.replace(pattern, "<li>$1</li>");\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"^")," symbol at the beginning of the regular expression matches the beginning\nof a line. The ",(0,a.kt)("inlineCode",{parentName:"p"},"m")," (",(0,a.kt)("inlineCode",{parentName:"p"},"multiline"),") flag in the regular expression causes the\nregular expression to match the ",(0,a.kt)("inlineCode",{parentName:"p"},"^")," symbol against the start of a line, not\nsimply the start of the string."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"\\*")," pattern matches an asterisk character (the backslash is used to signal\na literal asterisk instead of a ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," quantifier)."),(0,a.kt)("p",null,"The parentheses in the regular expression define a capturing group, and the\n",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method refers to this group by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"$1")," code in the\nreplacement string. The ",(0,a.kt)("inlineCode",{parentName:"p"},"g")," (",(0,a.kt)("inlineCode",{parentName:"p"},"global"),") flag in the regular expression ensures\nthat the ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method replaces all matches in the string (not simply the\nfirst one)."),(0,a.kt)("h4",{id:"converting-paragraph-wiki-patterns"},"Converting paragraph Wiki patterns"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"linesToParagraphs()")," method converts each line in the input Wiki string to\nan HTML ",(0,a.kt)("inlineCode",{parentName:"p"},"<p>")," paragraph tag. These lines in the method strip out empty lines\nfrom the input Wiki string:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var pattern:RegExp = /^$/gm;\nvar result:String = input.replace(pattern, "");\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"^")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$")," symbols the regular expression match the beginning and end of a\nline. The ",(0,a.kt)("inlineCode",{parentName:"p"},"m")," (",(0,a.kt)("inlineCode",{parentName:"p"},"multiline"),") flag in the regular expression causes the regular\nexpression to match the ^ symbol against the start of a line, not simply the\nstart of the string."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method replaces all matching substrings (empty lines) with an\nempty string (",(0,a.kt)("inlineCode",{parentName:"p"},'""'),"). The ",(0,a.kt)("inlineCode",{parentName:"p"},"g")," (",(0,a.kt)("inlineCode",{parentName:"p"},"global"),") flag in the regular expression ensures\nthat the ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method replaces all matches in the string (not simply the\nfirst one)."),(0,a.kt)("h2",{id:"converting-urls-to-html-a-tags"},"Converting URLs to HTML \\<a",">"," tags"),(0,a.kt)("p",null,"When the user clicks the Test button in the sample application, if the user\nselected the ",(0,a.kt)("inlineCode",{parentName:"p"},"urlToATag")," check box, the application calls the\n",(0,a.kt)("inlineCode",{parentName:"p"},"URLParser.urlToATag()")," static method to convert URL strings from the input Wiki\nstring into HTML ",(0,a.kt)("inlineCode",{parentName:"p"},"<a>")," tags."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var protocol:String = "((?:http|ftp)://)";\nvar urlPart:String = "([a-z0-9_-]+\\.[a-z0-9_-]+)";\nvar optionalUrlPart:String = "(\\.[a-z0-9_-]*)";\nvar urlPattern:RegExp = new RegExp(protocol + urlPart + optionalUrlPart, "ig");\nvar result:String = input.replace(urlPattern, "<a href=\'$1$2$3\'><u>$1$2$3</u></a>");\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"RegExp()")," constructor function is used to assemble a regular expression\n(",(0,a.kt)("inlineCode",{parentName:"p"},"urlPattern"),") from a number of constituent parts. These constituent parts are\neach strings that define part of the regular expression pattern."),(0,a.kt)("p",null,"The first part of the regular expression pattern, defined by the ",(0,a.kt)("inlineCode",{parentName:"p"},"protocol"),"\nstring, defines an URL protocol: either ",(0,a.kt)("inlineCode",{parentName:"p"},"http://")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"ftp://"),". The parentheses\ndefine a noncapturing group, indicated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," symbol. This means that the\nparentheses are simply used to define a group for the ",(0,a.kt)("inlineCode",{parentName:"p"},"|")," alternation pattern;\nthe group will not match backreference codes (",(0,a.kt)("inlineCode",{parentName:"p"},"$1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"$2"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"$3"),") in the\nreplacement string of the ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method."),(0,a.kt)("p",null,"The other constituent parts of the regular expression each use capturing groups\n(indicated by parentheses in the pattern), which are then used in the\nbackreference codes (",(0,a.kt)("inlineCode",{parentName:"p"},"$1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"$2"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"$3"),") in the replacement string of the\n",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method."),(0,a.kt)("p",null,"The part of the pattern defined by the ",(0,a.kt)("inlineCode",{parentName:"p"},"urlPart")," string matches ",(0,a.kt)("em",{parentName:"p"},"at least")," one\nof the following characters: ",(0,a.kt)("inlineCode",{parentName:"p"},"a-z"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0-9"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"_"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"-"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," quantifier\nindicates that at least one character is matched. The ",(0,a.kt)("inlineCode",{parentName:"p"},"\\.")," indicates a required\ndot (",(0,a.kt)("inlineCode",{parentName:"p"},"."),") character. And the remainder matches another string of at least one of\nthese characters: ",(0,a.kt)("inlineCode",{parentName:"p"},"a-z"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0-9"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"_"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"-"),"."),(0,a.kt)("p",null,"The part of the pattern defined by the ",(0,a.kt)("inlineCode",{parentName:"p"},"optionalUrlPart")," string matches ",(0,a.kt)("em",{parentName:"p"},"zero or\nmore")," of the following: a dot (",(0,a.kt)("inlineCode",{parentName:"p"},"."),") character followed by any number of\nalphanumeric characters (including ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"-"),"). The ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," quantifier indicates\nthat zero or more characters are matched."),(0,a.kt)("p",null,"The call to the ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method employs the regular expression and assembles\nthe replacement HTML string, using backreferences."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"urlToATag()")," method then calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"emailToATag()")," method, which uses\nsimilar techniques to replace e-mail patterns with HTML ",(0,a.kt)("inlineCode",{parentName:"p"},"<a>")," hyperlink strings.\nThe regular expressions used to match HTTP, FTP, and e-mail URLs in this sample\nfile are fairly simple, for the purposes of exemplification; there are much more\ncomplicated regular expressions for matching such URLs more correctly."),(0,a.kt)("h2",{id:"converting-us-dollar-strings-to-euro-strings"},"Converting U.S. dollar strings to euro strings"),(0,a.kt)("p",null,"When the user clicks the Test button in the sample application, if the user\nselected the ",(0,a.kt)("inlineCode",{parentName:"p"},"dollarToEuro")," check box, the application calls the\n",(0,a.kt)("inlineCode",{parentName:"p"},"CurrencyConverter.usdToEuro()")," static method to convert U.S. dollar strings\n(such as ",(0,a.kt)("inlineCode",{parentName:"p"},'"$9.95"'),") to euro strings (such as ",(0,a.kt)("inlineCode",{parentName:"p"},'"8.24 \u20ac"'),"), as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"var usdPrice:RegExp = /\\$([\\d,]+.\\d+)+/g;\nreturn input.replace(usdPrice, usdStrToEuroStr);\n")),(0,a.kt)("p",null,"The first line defines a simple pattern for matching U.S. dollar strings. Notice\nthat the ",(0,a.kt)("inlineCode",{parentName:"p"},"$")," character is preceded with the backslash (",(0,a.kt)("inlineCode",{parentName:"p"},"\\"),") escape character."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method uses the regular expression as the pattern matcher, and\nit calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"usdStrToEuroStr()")," function to determine the replacement string (a\nvalue in euros)."),(0,a.kt)("p",null,"When a function name is used as the second parameter of the ",(0,a.kt)("inlineCode",{parentName:"p"},"replace()")," method,\nthe following are passed as parameters to the called function:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The matching portion of the string.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Any captured parenthetical group matches. The number of arguments passed this\nway varies depending on the number of captured parenthetical group matches.\nYou can determine the number of captured parenthetical group matches by\nchecking ",(0,a.kt)("inlineCode",{parentName:"p"},"arguments.length - 3")," within the function code.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The index position in the string where the match begins.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The complete string."))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"usdStrToEuroStr()")," method converts U.S. dollar string patterns to euro\nstrings, as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'private function usdToEuro(...args):String\n{\n    var usd:String = args[1];\n    usd = usd.replace(",", "");\n    var exchangeRate:Number = 0.828017;\n    var euro:Number = Number(usd) * exchangeRate;\n    trace(usd, Number(usd), euro);\n    const euroSymbol:String = String.fromCharCode(8364); // \u20ac\n    return euro.toFixed(2) + " " + euroSymbol;\n}\n')),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"args[1]")," represents the captured parenthetical group matched by the\n",(0,a.kt)("inlineCode",{parentName:"p"},"usdPrice")," regular expression. This is the numerical portion of the U.S. dollar\nstring: that is, the dollar amount without the ",(0,a.kt)("inlineCode",{parentName:"p"},"$")," sign. The method applies an\nexchange rate conversion and returns the resulting string (with a trailing \u20ac\nsymbol instead of a leading $ symbol)."))}c.isMDXComponent=!0}}]);