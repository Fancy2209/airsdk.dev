"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[93548],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=s(a),h=i,d=u["".concat(l,".").concat(h)]||u[h]||c[h]||r;return a?n.createElement(d,o(o({ref:t},m),{},{components:a})):n.createElement(d,o({ref:t},m))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=h;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:i,o[1]=p;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},72925:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=a(87462),i=(a(67294),a(3905));const r={},o="Making textures with noise functions",p={unversionedId:"development/display/working-with-bitmaps/making-textures-with-noise-functions",id:"development/display/working-with-bitmaps/making-textures-with-noise-functions",title:"Making textures with noise functions",description:"To modify the appearance of a bitmap, you can apply a noise effect to it, using",source:"@site/docs/development/display/working-with-bitmaps/making-textures-with-noise-functions.md",sourceDirName:"development/display/working-with-bitmaps",slug:"/development/display/working-with-bitmaps/making-textures-with-noise-functions",permalink:"/docs/development/display/working-with-bitmaps/making-textures-with-noise-functions",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-bitmaps/making-textures-with-noise-functions.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Copying bitmap data",permalink:"/docs/development/display/working-with-bitmaps/copying-bitmap-data"},next:{title:"Manipulating pixels",permalink:"/docs/development/display/working-with-bitmaps/manipulating-pixels"}},l={},s=[],m={toc:s},u="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"making-textures-with-noise-functions"},"Making textures with noise functions"),(0,i.kt)("p",null,"To modify the appearance of a bitmap, you can apply a noise effect to it, using\neither the ",(0,i.kt)("inlineCode",{parentName:"p"},"noise()")," method or the ",(0,i.kt)("inlineCode",{parentName:"p"},"perlinNoise()")," methods. A noise effect can\nbe likened to the static that appears on an untuned television screen."),(0,i.kt)("p",null,"To apply a noise effect to a a bitmap, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"noise()")," method. This method\napplies a random color value to pixels within a specified area of a bitmap\nimage."),(0,i.kt)("p",null,"This method accepts five parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"randomSeed")," (int): The random seed number that determines the pattern.\nDespite its name, this number actually creates the same results if the same\nnumber is passed. To get a true random result, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Math.random()")," method\nto pass a random number for this parameter.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"low")," (uint): This parameter refers to the lowest value to be generated for\neach pixel (0 to 255). The default value is 0. Setting this value lower\nresults in a darker noise pattern, while setting it to a higher value results\nin a brighter pattern.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"high")," (uint): This parameter refers to the highest value to be generated for\neach pixel (0 to 255). The default value is 255. Setting this value lower\nresults in a darker noise pattern, while setting it to a higher value results\nin a brighter pattern.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"channelOptions")," (uint): This parameter specifies to which color channel of\nthe bitmap object the noise pattern will be applied. The number can be a\ncombination of any of the four color channel ARGB values. The default value\nis 7.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"grayScale")," (Boolean): When set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", this parameter applies the\n",(0,i.kt)("inlineCode",{parentName:"p"},"randomSeed")," value to the bitmap pixels, effectively washing all color out of\nthe image. The alpha channel is not affected by this parameter. The default\nvalue is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."))),(0,i.kt)("p",null,"The following example creates a bitmap image and applies a blue noise pattern to\nit:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package\n{\n    import flash.display.Sprite;\n    import flash.display.Bitmap;\n    import flash.display.BitmapData;\n    import flash.display.BitmapDataChannel;\n\n    public class BitmapNoise1 extends Sprite\n    {\n        public function BitmapNoise1()\n        {\n            var myBitmap:BitmapData = new BitmapData(250, 250,false, 0xff000000);\n            myBitmap.noise(500, 0, 255, BitmapDataChannel.BLUE,false);\n            var image:Bitmap = new Bitmap(myBitmap);\n            addChild(image);\n        }\n    }\n}\n")),(0,i.kt)("p",null,"If you want to create a more organic-looking texture, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"perlinNoise()"),"\nmethod. The ",(0,i.kt)("inlineCode",{parentName:"p"},"perlinNoise()")," method produces realistic, organic textures that are\nideal for smoke, clouds, water, fire, or even explosions."),(0,i.kt)("p",null,"Because it is generated by an algorithm, the ",(0,i.kt)("inlineCode",{parentName:"p"},"perlinNoise()")," method uses less\nmemory than bitmap-based textures. However, it can still have an impact on\nprocessor usage, slowing down your content and causing the screen to be redrawn\nmore slowly than the frame rate, especially on older computers. This is mainly\ndue to the floating-point calculations that need to occur to process the perlin\nnoise algorithms."),(0,i.kt)("p",null,"The method accepts nine parameters (the first six are required):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"baseX")," (Number): Determines the x (size) value of patterns created.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"baseY")," (Number): Determines the y (size) value of the patterns created.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"numOctaves")," (uint): Number of octaves or individual noise functions to\ncombine to create this noise. Larger numbers of octaves create images with\ngreater detail but also require more processing time.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"randomSeed")," (int): The random seed number works exactly the same way as it\ndoes in the ",(0,i.kt)("inlineCode",{parentName:"p"},"noise()")," function. To get a true random result, use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Math.random()")," method to pass a random number for this parameter.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"stitch")," (Boolean): If set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", this method attempts to stitch (or\nsmooth) the transition edges of the image to create seamless textures for\ntiling as a bitmap fill.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"fractalNoise")," (Boolean): This parameter relates to the edges of the gradients\nbeing generated by the method. If set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the method generates fractal\nnoise that smooths the edges of the effect. If set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", it generates\nturbulence. An image with turbulence has visible discontinuities in the\ngradient that can make it better approximate sharper visual effects, like\nflames and ocean waves.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"channelOptions")," (uint): The ",(0,i.kt)("inlineCode",{parentName:"p"},"channelOptions")," parameter works exactly the same\nway as it does in the ",(0,i.kt)("inlineCode",{parentName:"p"},"noise()")," method. It specifies to which color channel\n(of the bitmap) the noise pattern is applied. The number can be a combination\nof any of the four color channel ARGB values. The default value is 7.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"grayScale")," (Boolean): The ",(0,i.kt)("inlineCode",{parentName:"p"},"grayScale")," parameter works exactly the same way as\nit does in the ",(0,i.kt)("inlineCode",{parentName:"p"},"noise()")," method. If set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", it applies the ",(0,i.kt)("inlineCode",{parentName:"p"},"randomSeed"),"\nvalue to the bitmap pixels, effectively washing all color out of the image.\nThe default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"offsets")," (Array): An array of points that correspond to x and y offsets for\neach octave. By manipulating the offset values, you can smoothly scroll the\nlayers of the image. Each point in the offset array affects a specific octave\nnoise function. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"null.")))),(0,i.kt)("p",null,"The following example creates a 150 x 150 pixel BitmapData object that calls the\n",(0,i.kt)("inlineCode",{parentName:"p"},"perlinNoise()")," method to generate a green and blue cloud effect:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package\n{\n    import flash.display.Sprite;\n    import flash.display.Bitmap;\n    import flash.display.BitmapData;\n    import flash.display.BitmapDataChannel;\n\n    public class BitmapNoise2 extends Sprite\n    {\n        public function BitmapNoise2()\n        {\n            var myBitmapDataObject:BitmapData =\n                new BitmapData(150, 150, false, 0x00FF0000);\n\n            var seed:Number = Math.floor(Math.random() * 100);\n            var channels:uint = BitmapDataChannel.GREEN | BitmapDataChannel.BLUE\n            myBitmapDataObject.perlinNoise(100, 80, 6, seed, false, true, channels, false, null);\n\n            var myBitmap:Bitmap = new Bitmap(myBitmapDataObject);\n            addChild(myBitmap);\n        }\n    }\n}\n")))}c.isMDXComponent=!0}}]);