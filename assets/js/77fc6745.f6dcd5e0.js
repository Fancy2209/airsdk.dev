"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[74592],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>f});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},l=Object.keys(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),p=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),h=p(a),c=n,f=h["".concat(s,".").concat(c)]||h[c]||d[c]||l;return a?i.createElement(f,r(r({ref:t},m),{},{components:a})):i.createElement(f,r({ref:t},m))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[h]="string"==typeof e?e:n,r[1]=o;for(var p=2;p<l;p++)r[p]=a[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}c.displayName="MDXCreateElement"},19769:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var i=a(87462),n=(a(67294),a(3905));const l={},r="Displacement map filter",o={unversionedId:"development/display/filtering-display-objects/displacement-map-filter",id:"development/display/filtering-display-objects/displacement-map-filter",title:"Displacement map filter",description:"The DisplacementMapFilter class uses pixel values from a BitmapData object",source:"@site/docs/development/display/filtering-display-objects/displacement-map-filter.md",sourceDirName:"development/display/filtering-display-objects",slug:"/development/display/filtering-display-objects/displacement-map-filter",permalink:"/docs/development/display/filtering-display-objects/displacement-map-filter",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/filtering-display-objects/displacement-map-filter.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Creating and applying filters",permalink:"/docs/development/display/filtering-display-objects/creating-and-applying-filters"},next:{title:"Drop shadow filter",permalink:"/docs/development/display/filtering-display-objects/drop-shadow-filter"}},s={},p=[],m={toc:p},h="wrapper";function d(e){let{components:t,...l}=e;return(0,n.kt)(h,(0,i.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"displacement-map-filter"},"Displacement map filter"),(0,n.kt)("p",null,"The DisplacementMapFilter class uses pixel values from a BitmapData object\n(known as the displacement map image) to perform a displacement effect on a new\nobject. The displacement map image is typically different than the actual\ndisplay object or BitmapData instance to which the filter is being applied. A\ndisplacement effect involves displacing pixels in the filtered image\u2014in other\nwords, shifting them away from their original location to some extent. This\nfilter can be used to create a shifted, warped, or mottled effect."),(0,n.kt)("p",null,"The location and amount of displacement applied to a given pixel is determined\nby the color value of the displacement map image. When working with the filter,\nin addition to specifying the map image, you specify the following values to\ncontrol how the displacement is calculated from the map image:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Map point: The location on the filtered image at which the upper-left corner\nof the displacement filter will be applied. You can use this if you only want\nto apply the filter to part of an image.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"X component: Which color channel of the map image affects the x position of\npixels.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Y component: Which color channel of the map image affects the y position of\npixels.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"X scale: A multiplier value that specifies how strong the x axis displacement\nis.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Y scale: A multiplier value that specifies how strong the y axis displacement\nis.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Filter mode: Determines what to do in any empty spaces created by pixels being\nshifted away. The options, defined as constants in the\nDisplacementMapFilterMode class, are to display the original pixels (filter\nmode ",(0,n.kt)("inlineCode",{parentName:"p"},"IGNORE"),"), to wrap the pixels around from the other side of the image\n(filter mode ",(0,n.kt)("inlineCode",{parentName:"p"},"WRAP"),", which is the default), to use the nearest shifted pixel\n(filter mode ",(0,n.kt)("inlineCode",{parentName:"p"},"CLAMP"),"), or to fill in the spaces with a color (filter mode\n",(0,n.kt)("inlineCode",{parentName:"p"},"COLOR"),")."))),(0,n.kt)("p",null,"To understand how the displacement map filter works, consider a basic example.\nIn the following code, an image is loaded, and when it finishes loading it is\ncentered on the Stage and a displacement map filter is applied to it, causing\nthe pixels in the entire image to shift horizontally to the left."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'import flash.display.BitmapData;\nimport flash.display.Loader;\nimport flash.events.MouseEvent;\nimport flash.filters.DisplacementMapFilter;\nimport flash.geom.Point;\nimport flash.net.URLRequest;\n\n// Load an image onto the Stage.\nvar loader:Loader = new Loader();\nvar url:URLRequest = new URLRequest("http://www.helpexamples.com/flash/images/image3.jpg");\nloader.load(url);\nthis.addChild(loader);\n\nvar mapImage:BitmapData;\nvar displacementMap:DisplacementMapFilter;\n\n// This function is called when the image finishes loading.\nfunction setupStage(event:Event):void\n{\n    // Center the loaded image on the Stage.\n    loader.x = (stage.stageWidth - loader.width) / 2;\n    loader.y = (stage.stageHeight - loader.height) / 2;\n\n    // Create the displacement map image.\n    mapImage = new BitmapData(loader.width, loader.height, false, 0xFF0000);\n\n    // Create the displacement filter.\n    displacementMap = new DisplacementMapFilter();\n    displacementMap.mapBitmap = mapImage;\n    displacementMap.mapPoint = new Point(0, 0);\n    displacementMap.componentX = BitmapDataChannel.RED;\n    displacementMap.scaleX = 250;\n    loader.filters = [displacementMap];\n}\n\nloader.contentLoaderInfo.addEventListener(Event.COMPLETE, setupStage);\n')),(0,n.kt)("p",null,"The properties used to define the displacement are as follows:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Map bitmap: The displacement bitmap is a new BitmapData instance created by\nthe code. Its dimensions match the dimensions of the loaded image (so the\ndisplacement is applied to the entire image). It is filled with solid red\npixels.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Map point: This value is set to the point 0, 0\u2014again, causing the displacement\nto be applied to the entire image.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"X component: This value is set to the constant ",(0,n.kt)("inlineCode",{parentName:"p"},"BitmapDataChannel.RED"),",\nmeaning the red value of the map bitmap will determine how much the pixels are\ndisplaced (how much they move) along the x axis.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"X scale: This value is set to 250. The full amount of displacement (from the\nmap image being completely red) only displaces the image by a small amount\n(roughly one-half of a pixel), so if this value was set to 1 the image would\nonly shift .5 pixels horizontally. By setting it to 250, the image shifts by\napproximately 125 pixels."))),(0,n.kt)("p",null,"These settings cause the filtered image's pixels to shift 250 pixels to the\nleft. The direction (left or right) and amount of shift is based on the color\nvalue of the pixels in the map image. Conceptually, the filter goes through the\npixels of the filtered image one by one (at least, the pixels in the region\nwhere the filter is applied, which in this case means all the pixels), and does\nthe following with each pixel:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"It finds the corresponding pixel in the map image. For example, when the\nfilter calculates the displacement amount for the pixel in the upper-left\ncorner of the filtered image, it looks at the pixel in the upper-left corner\nof the map image.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"It determines the value of the specified color channel in the map pixel. In\nthis case, the x component color channel is the red channel, so the filter\nlooks to see what the value of the red channel of the map image is at the\npixel in question. Since the map image is solid red, the pixel's red channel\nis 0xFF, or 255. This is used as the displacement value.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},'It compares the displacement value to the "middle" value (127, which is\nhalfway between 0 and 255). If the displacement value is lower than the\nmiddle value, the pixel shifts in a positive direction (to the right for x\ndisplacement; down for y displacement). On the other hand, if the\ndisplacement value is higher than the middle value (as in this example), the\npixel shifts in a negative direction (to the left for x displacement; up for\ny displacement). To be more precise, the filter subtracts the displacement\nvalue from 127, and the result (positive or negative) is the relative amount\nof displacement that is applied.')),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Finally, it determines the actual amount of displacement by determining what\npercentage of full displacement the relative displacement value represents.\nIn this case, full red means 100% displacement. That percentage is then\nmultiplied by the x scale or y scale value to determine the number of pixels\nof displacement that will be applied. In this example, 100% times a\nmultiplier of 250 determines the amount of displacement\u2014roughly 125 pixels\nto the left."))),(0,n.kt)("p",null,"Because no values are specified for y component and y scale, the defaults (which\ncause no displacement) are used\u2014that's why the image doesn't shift at all in the\nvertical direction."),(0,n.kt)("p",null,"The default filter mode setting, ",(0,n.kt)("inlineCode",{parentName:"p"},"WRAP")," is used in the example, so as the pixels\nshift to the left the empty space on the right is filled in by the pixels that\nshifted off the left edge of the image. You can experiment with this value to\nsee the different effects. For example, if you add the following line to the\nportion of code where the displacement properties are being set (before the line\n",(0,n.kt)("inlineCode",{parentName:"p"},"loader.filters = [displacementMap]"),"), it will make the image look as though it\nhas been smeared across the Stage:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"displacementMap.mode = DisplacementMapFilterMode.CLAMP;\n")),(0,n.kt)("p",null,"For a more complex example, the following listing uses a displacement map filter\nto create a magnifying glass effect on an image:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'import flash.display.Bitmap;\nimport flash.display.BitmapData;\nimport flash.display.BitmapDataChannel;\nimport flash.display.GradientType;\nimport flash.display.Loader;\nimport flash.display.Shape;\nimport flash.events.MouseEvent;\nimport flash.filters.DisplacementMapFilter;\nimport flash.filters.DisplacementMapFilterMode;\nimport flash.geom.Matrix;\nimport flash.geom.Point;\nimport flash.net.URLRequest;\n\n// Create the gradient circles that will together form the\n// displacement map image\nvar radius:uint = 50;\n\nvar type:String = GradientType.LINEAR;\nvar redColors:Array = [0xFF0000, 0x000000];\nvar blueColors:Array = [0x0000FF, 0x000000];\nvar alphas:Array = [1, 1];\nvar ratios:Array = [0, 255];\nvar xMatrix:Matrix = new Matrix();\nxMatrix.createGradientBox(radius * 2, radius * 2);\nvar yMatrix:Matrix = new Matrix();\nyMatrix.createGradientBox(radius * 2, radius * 2, Math.PI / 2);\n\nvar xCircle:Shape = new Shape();\nxCircle.graphics.lineStyle(0, 0, 0);\nxCircle.graphics.beginGradientFill(type, redColors, alphas, ratios, xMatrix);\nxCircle.graphics.drawCircle(radius, radius, radius);\n\nvar yCircle:Shape = new Shape();\nyCircle.graphics.lineStyle(0, 0, 0);\nyCircle.graphics.beginGradientFill(type, blueColors, alphas, ratios, yMatrix);\nyCircle.graphics.drawCircle(radius, radius, radius);\n\n// Position the circles at the bottom of the screen, for reference.\nthis.addChild(xCircle);\nxCircle.y = stage.stageHeight - xCircle.height;\nthis.addChild(yCircle);\nyCircle.y = stage.stageHeight - yCircle.height;\nyCircle.x = 200;\n\n// Load an image onto the Stage.\nvar loader:Loader = new Loader();\nvar url:URLRequest = new URLRequest("http://www.helpexamples.com/flash/images/image1.jpg");\nloader.load(url);\nthis.addChild(loader);\n\n// Create the map image by combining the two gradient circles.\nvar map:BitmapData = new BitmapData(xCircle.width, xCircle.height, false, 0x7F7F7F);\nmap.draw(xCircle);\nvar yMap:BitmapData = new BitmapData(yCircle.width, yCircle.height, false, 0x7F7F7F);\nyMap.draw(yCircle);\nmap.copyChannel(yMap, yMap.rect, new Point(0, 0), BitmapDataChannel.BLUE, BitmapDataChannel.BLUE);\nyMap.dispose();\n\n// Display the map image on the Stage, for reference.\nvar mapBitmap:Bitmap = new Bitmap(map);\nthis.addChild(mapBitmap);\nmapBitmap.x = 400;\nmapBitmap.y = stage.stageHeight - mapBitmap.height;\n\n// This function creates the displacement map filter at the mouse location.\nfunction magnify():void\n{\n    // Position the filter.\n    var filterX:Number = (loader.mouseX) - (map.width / 2);\n    var filterY:Number = (loader.mouseY) - (map.height / 2);\n    var pt:Point = new Point(filterX, filterY);\n    var xyFilter:DisplacementMapFilter = new DisplacementMapFilter();\n    xyFilter.mapBitmap = map;\n    xyFilter.mapPoint = pt;\n    // The red in the map image will control x displacement.\n    xyFilter.componentX = BitmapDataChannel.RED;\n    // The blue in the map image will control y displacement.\n    xyFilter.componentY = BitmapDataChannel.BLUE;\n    xyFilter.scaleX = 35;\n    xyFilter.scaleY = 35;\n    xyFilter.mode = DisplacementMapFilterMode.IGNORE;\n    loader.filters = [xyFilter];\n}\n\n// This function is called when the mouse moves. If the mouse is\n// over the loaded image, it applies the filter.\nfunction moveMagnifier(event:MouseEvent):void\n{\n    if (loader.hitTestPoint(loader.mouseX, loader.mouseY))\n    {\n        magnify();\n    }\n}\nloader.addEventListener(MouseEvent.MOUSE_MOVE, moveMagnifier);\n')),(0,n.kt)("p",null,"The code first generates two gradient circles, which are combined together to\nform the displacement map image. The red circle creates the x axis displacement\n(",(0,n.kt)("inlineCode",{parentName:"p"},"xyFilter.componentX = BitmapDataChannel.RED"),"), and the blue circle creates the\ny axis displacement (",(0,n.kt)("inlineCode",{parentName:"p"},"xyFilter.componentY = BitmapDataChannel.BLUE"),"). To help\nyou understand what the displacement map image looks like, the code adds the\noriginal circles as well as the combined circle that serves as the map image to\nthe bottom of the screen."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Image showing a photo of a flower with a circle-shaped portion under the mouse cursor magnified.",src:a(5562).Z,width:"400",height:"400"})),(0,n.kt)("p",null,"The code then loads an image and, as the mouse moves, applies the displacement\nfilter to the portion of the image that's under the mouse. The gradient circles\nused as the displacement map image causes the displaced region to spread out\naway from the pointer. Notice that the gray regions of the displacement map\nimage don't cause any displacement. The gray color is ",(0,n.kt)("inlineCode",{parentName:"p"},"0x7F7F7F"),". The blue and\nred channels of that shade of gray exactly match the middle shade of those color\nchannels, so there is no displacement in a gray area of the map image. Likewise,\nin the center of the circle there is no displacement. Although the color there\nisn't gray, that color's blue channel and red channel are identical to the blue\nchannel and red channel of medium gray, and since blue and red are the colors\nthat cause displacement, no displacement happens there."))}d.isMDXComponent=!0},5562:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/fo_displacement_map_filter_sample-18738e9cebd2e835002df79bd5f6c41e.png"}}]);