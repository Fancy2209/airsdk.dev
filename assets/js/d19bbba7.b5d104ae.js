"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[56821],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),h=i,f=c["".concat(p,".").concat(h)]||c[h]||d[h]||r;return n?a.createElement(f,o(o({ref:t},m),{},{components:n})):a.createElement(f,o({ref:t},m))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={},o="Formatting text",l={unversionedId:"development/text/using-the-flash-text-engine/formatting-text",id:"development/text/using-the-flash-text-engine/formatting-text",title:"Formatting text",description:"A TextBlock object is a factory for creating lines of text. The content of a",source:"@site/docs/development/text/using-the-flash-text-engine/formatting-text.md",sourceDirName:"development/text/using-the-flash-text-engine",slug:"/development/text/using-the-flash-text-engine/formatting-text",permalink:"/docs/development/text/using-the-flash-text-engine/formatting-text",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/text/using-the-flash-text-engine/formatting-text.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Flash Text Engine example: News layout",permalink:"/docs/development/text/using-the-flash-text-engine/flash-text-engine-example-news-layout"},next:{title:"Handling Events in FTE",permalink:"/docs/development/text/using-the-flash-text-engine/handling-events-in-fte"}},p={},s=[{value:"Using the ElementFormat object",id:"using-the-elementformat-object",level:2},{value:"Font color and transparency (alpha)",id:"font-color-and-transparency-alpha",level:2},{value:"Baseline alignment and shift",id:"baseline-alignment-and-shift",level:2},{value:"Typographic Case",id:"typographic-case",level:2},{value:"Rotating text",id:"rotating-text",level:2},{value:"Locking and cloning ElementFormat",id:"locking-and-cloning-elementformat",level:2}],m={toc:s},c="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"formatting-text"},"Formatting text"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"TextBlock")," object is a factory for creating lines of text. The content of a\n",(0,i.kt)("inlineCode",{parentName:"p"},"TextBlock")," is assigned via the ",(0,i.kt)("inlineCode",{parentName:"p"},"TextElement")," object. An ",(0,i.kt)("inlineCode",{parentName:"p"},"ElementFormat")," object\nhandles the formatting for the text. The ElementFormat class defines such\nproperties as baseline alignment, kerning, tracking, text rotation, and font\nsize, color, and case. It also includes a ",(0,i.kt)("inlineCode",{parentName:"p"},"FontDescription"),", which is covered in\ndetail in ",(0,i.kt)("a",{parentName:"p",href:"/docs/development/text/using-the-flash-text-engine/working-with-fonts"},"Working with fonts"),"."),(0,i.kt)("h2",{id:"using-the-elementformat-object"},"Using the ElementFormat object"),(0,i.kt)("p",null,"The constructor for the ",(0,i.kt)("inlineCode",{parentName:"p"},"ElementFormat")," object takes any of a long list of\noptional parameters, including a ",(0,i.kt)("inlineCode",{parentName:"p"},"FontDescription"),". You can also set these\nproperties outside the constructor. The following example shows the relationship\nof the various objects in defining and displaying a simple text line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package\n{\n    import flash.display.Sprite;\n    import flash.text.*;\n\n    public class ElementFormatExample extends Sprite\n    {\n        private var tb:TextBlock = new TextBlock();\n        private var te:TextElement;\n        private var ef:ElementFormat;\n        private var fd:FontDescription = new FontDescription();\n        private var str:String;\n        private var tl:TextLine;\n\n        public function ElementFormatExample()\n        {\n            fd.fontName = "Garamond";\n            ef = new ElementFormat(fd);\n            ef.fontSize = 30;\n            ef.color = 0xFF0000;\n            str = "This is flash text";\n            te = new TextElement(str, ef);\n            tb.content = te;\n            tl = tb.createTextLine(null,600);\n            addChild(tl);\n        }\n    }\n}\n')),(0,i.kt)("h2",{id:"font-color-and-transparency-alpha"},"Font color and transparency (alpha)"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," property of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ElementFormat")," object sets the font color. The\nvalue is an integer representing the RGB components of the color; for example,\n0xFF0000 for red and 0x00FF00 for green. The default is black (0x000000)."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"alpha")," property sets the alpha transparency value for an element (both\n",(0,i.kt)("inlineCode",{parentName:"p"},"TextElement")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphicElement"),"). Values can range from 0 (fully transparent)\nto 1 (fully opaque, which is the default). Elements with an ",(0,i.kt)("inlineCode",{parentName:"p"},"alpha")," of 0 are\ninvisible, but still active. This value is multiplied by any inherited alpha\nvalues, thus making the element more transparent."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"var ef:ElementFormat = new ElementFormat();\nef.alpha = 0.8;\nef.color = 0x999999;\n")),(0,i.kt)("h2",{id:"baseline-alignment-and-shift"},"Baseline alignment and shift"),(0,i.kt)("p",null,"The font and size of the largest text in a line determine its dominant baseline.\nYou can override these values by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"TextBlock.baselineFontDescription")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"TextBlock.baselineFontSize"),". You can align the dominant baseline with one of\nseveral baselines within the text. These baselines include the ascent line and\nthe descent line or the ideographic top, center, or bottom."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Text showing ascent line, baseline, decsent line and x-height",src:n(87716).Z,width:"343",height:"134"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"A.")," Ascent"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"B.")," Baseline"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"C.")," Descent"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"D.")," x-height"),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"ElementFormat")," object, three properties determine baseline and alignment\ncharacteristics. The ",(0,i.kt)("inlineCode",{parentName:"p"},"alignmentBaseline")," property sets the main baseline of a\n",(0,i.kt)("inlineCode",{parentName:"p"},"TextElement")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphicElement"),'. This baseline is the "snap-to" line for the\nelement, and it\'s to this position that the dominant baseline of all text\naligns.'),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"dominantBaseline")," property specifies which of the various baselines of the\nelement to use, which determines the vertical position of the element on the\nline. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"TextBaseline.ROMAN"),", but it can also be set to have\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"IDEOGRAPHIC_TOP")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"IDEOGRAPHIC_BOTTOM")," baselines be dominant."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"baselineShift")," property moves the baseline by a set number of pixels on the\ny-axis. In normal (non-rotated) text, a positive value moves the baseline down\nand a negative value moves it up."),(0,i.kt)("h2",{id:"typographic-case"},"Typographic Case"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypographicCase")," property of ",(0,i.kt)("inlineCode",{parentName:"p"},"ElementFormat")," specifies text case, such as\nuppercase, lowercase, or small caps."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"var ef_Upper:ElementFormat = new ElementFormat();\nef_Upper.typographicCase = TypographicCase.UPPERCASE;\n\nvar ef_SmallCaps:ElementFormat = new ElementFormat();\nef_SmallCaps.typographicCase = TypographicCase.SMALL_CAPS;\n")),(0,i.kt)("h2",{id:"rotating-text"},"Rotating text"),(0,i.kt)("p",null,"You can rotate a block of text or the glyphs within a segment of text in\nincrements of 90\xb0. The TextRotation class defines the following constants for\nsetting both text block and glyph rotation:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Constant"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"AUTO"),(0,i.kt)("td",{parentName:"tr",align:null},'"auto"'),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies 90 degree counter-clockwise rotation. Typically used with vertical Asian text to rotate only glyphs that require rotation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ROTATE_0"),(0,i.kt)("td",{parentName:"tr",align:null},'"rotate_0"'),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies no rotation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ROTATE_180"),(0,i.kt)("td",{parentName:"tr",align:null},'"rotate_180"'),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies 180 degree rotation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ROTATE_270"),(0,i.kt)("td",{parentName:"tr",align:null},'"rotate_270"'),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies 270 degree rotation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ROTATE_90"),(0,i.kt)("td",{parentName:"tr",align:null},'"rotate_90"'),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies 90 degree clockwise rotation.")))),(0,i.kt)("p",null,"To rotate the lines of text in a text block, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"TextBlock.lineRotation"),"\nproperty before calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"TextBlock.createTextLine()")," method to create the\ntext line."),(0,i.kt)("p",null,"To rotate the glyphs within a block of text or a segment, set the\n",(0,i.kt)("inlineCode",{parentName:"p"},"ElementFormat.textRotation"),' property to the number of degrees that you want the\nglyphs to rotate. A glyph is the shape that makes up a character, or a part of a\ncharacter that consists of multiple glyphs. The letter "a" and the dot on an\n"i", for example, are glyphs.'),(0,i.kt)("p",null,"Rotating glyphs is relevant in some Asian languages in which you want to rotate\nthe lines to vertical but not rotate the characters within the lines. For more\ninformation on rotating Asian text, see\n",(0,i.kt)("a",{parentName:"p",href:"/docs/development/text/using-the-flash-text-engine/controlling-text#justifying-east-asian-text"},"Justifying East Asian text"),"."),(0,i.kt)("p",null,"Here is an example of rotating both a block of text and the glyphs within, as\nyou would with Asian text. The example also uses a Japanese font:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package\n{\n    import flash.display.Sprite;\n    import flash.text.*;\n\n    public class RotationExample extends Sprite\n    {\n        private var tb:TextBlock = new TextBlock();\n        private var te:TextElement;\n        private var ef:ElementFormat;\n        private var fd:FontDescription = new FontDescription();\n        private var str:String;\n        private var tl:TextLine;\n\n        public function RotationExample()\n        {\n            fd.fontName = "MS Mincho";\n            ef = new ElementFormat(fd);\n            ef.textRotation = TextRotation.AUTO;\n            str = "This is rotated Japanese text";\n            te = new TextElement(str, ef);\n            tb.lineRotation = TextRotation.ROTATE_90;\n            tb.content = te;\n            tl = tb.createTextLine(null,600);\n            addChild(tl);\n        }\n    }\n}\n')),(0,i.kt)("h2",{id:"locking-and-cloning-elementformat"},"Locking and cloning ElementFormat"),(0,i.kt)("p",null,"When an ",(0,i.kt)("inlineCode",{parentName:"p"},"ElementFormat")," object is assigned to any type of ",(0,i.kt)("inlineCode",{parentName:"p"},"ContentElement"),", its\n",(0,i.kt)("inlineCode",{parentName:"p"},"locked")," property is automatically set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". Attempting to modify a locked\n",(0,i.kt)("inlineCode",{parentName:"p"},"ElementFormat")," object throws an ",(0,i.kt)("inlineCode",{parentName:"p"},"IllegalOperationError"),". The best practice is\nto fully define such an object before assigning it to a ",(0,i.kt)("inlineCode",{parentName:"p"},"TextElement")," instance."),(0,i.kt)("p",null,"If you want to modify an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"ElementFormat")," instance, first check its\n",(0,i.kt)("inlineCode",{parentName:"p"},"locked")," property. If it's ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", use the ",(0,i.kt)("inlineCode",{parentName:"p"},"clone()")," method to create an\nunlocked copy of the object. The properties of this unlocked object can be\nchanged, and it can then be assigned to the ",(0,i.kt)("inlineCode",{parentName:"p"},"TextElement")," instance. Any new\nlines created from it have the new formatting. Previous lines created from this\nsame object and using the old format are unchanged."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package\n{\n    import flash.display.Sprite;\n    import flash.text.*;\n\n    public class ElementFormatCloneExample extends Sprite\n    {\n        private var tb:TextBlock = new TextBlock();\n        private var te:TextElement;\n        private var ef1:ElementFormat;\n        private var ef2:ElementFormat;\n        private var fd:FontDescription = new FontDescription();\n\n        public function ElementFormatCloneExample()\n        {\n            fd.fontName = "Garamond";\n            ef1 = new ElementFormat(fd);\n            ef1.fontSize = 24;\n            var str:String = "This is flash text";\n            te = new TextElement(str, ef);\n            tb.content = te;\n            var tx1:TextLine = tb.createTextLine(null,600);\n            addChild(tx1);\n\n            ef2 = (ef1.locked) ? ef1.clone() : ef1;\n            ef2.fontSize = 32;\n            tb.content.elementFormat = ef2;\n            var tx2:TextLine = tb.createTextLine(null,600);\n            addChild(tx2);\n        }\n    }\n}\n')))}d.isMDXComponent=!0},87716:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/te_baseline_align2-c5917331faa71c2d0c2f84fc4425c461.png"}}]);