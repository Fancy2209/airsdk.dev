"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[11231],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),l=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,v=u["".concat(m,".").concat(d)]||u[d]||p[d]||o;return n?r.createElement(v,s(s({ref:t},c),{},{components:n})):r.createElement(v,s({ref:t},c))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},34489:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:2},s="XML-RPC web service requests",i={unversionedId:"development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests",id:"development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests",title:"XML-RPC web service requests",description:"An XML-RPC web service takes its call parameters as an XML document rather than",source:"@site/docs/development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests.md",sourceDirName:"development/networking-and-communication/http-communications/web-service-requests",slug:"/development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests",permalink:"/docs/development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"REST-style web service requests",permalink:"/docs/development/networking-and-communication/http-communications/web-service-requests/rest-style-web-service-requests"},next:{title:"SOAP web service requests",permalink:"/docs/development/networking-and-communication/http-communications/web-service-requests/soap-web-service-requests"}},m={},l=[],c={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"xml-rpc-web-service-requests"},"XML-RPC web service requests"),(0,a.kt)("p",null,"An XML-RPC web service takes its call parameters as an XML document rather than\nas a set of URL variables. To conduct a transaction with an XML-RPC web service,\ncreate a properly formatted XML message and send it to the web service using the\nHTTP ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," method. In addition, you should set the ",(0,a.kt)("inlineCode",{parentName:"p"},"Content-Type")," header for\nthe request so that the server treats the request data as XML."),(0,a.kt)("p",null,"The following example illustrates how to use the same web service call shown in\nthe REST example, but this time as an XML-RPC service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import flash.events.Event;\nimport flash.events.ErrorEvent;\nimport flash.events.IOErrorEvent;\nimport flash.events.SecurityErrorEvent;\nimport flash.net.URLLoader;\nimport flash.net.URLRequest;\nimport flash.net.URLRequestMethod;\nimport flash.net.URLVariables;\npublic function xmlRPCRequest():void\n{\n    //Create the XML-RPC document\n    var xmlRPC:XML = <methodCall>\n                                    <methodName></methodName>\n                                    <params>\n                                        <param>\n                                            <value>\n                                                <struct/>\n                                            </value>\n                                        </param>\n                                    </params>\n                                </methodCall>;\n\n    xmlRPC.methodName = "test.echo";\n\n    //Add the method parameters\n    var parameters:Object = new Object();\n    parameters.api_key = "123456ABC";\n    parameters.message = "Able was I, ere I saw Elba.";\n\n    for( var propertyName:String in parameters )\n    {\n        xmlRPC..struct.member[xmlRPC..struct.member.length + 1] =\n            <member>\n                <name>{propertyName}</name>\n                <value>\n                    <string>{parameters[propertyName]}</string>\n                </value>\n            </member>;\n    }\n\n    //Create the HTTP request object\n    var request:URLRequest = new URLRequest( "http://service.example.com/xml-rpc/" );\n    request.method = URLRequestMethod.POST;\n    request.cacheResponse = false;\n    request.requestHeaders.push(new URLRequestHeader("Content-Type", "application/xml"));\n    request.data = xmlRPC;\n\n    //Initiate the request\n    requestor = new URLLoader();\n    requestor.dataFormat = URLLoaderDataFormat.TEXT;\n    requestor.addEventListener( Event.COMPLETE, xmlRPCRequestComplete );\n    requestor.addEventListener( IOErrorEvent.IO_ERROR, xmlRPCRequestError );\n    requestor.addEventListener( SecurityErrorEvent.SECURITY_ERROR, xmlRPCRequestError );\n    requestor.load( request );\n}\n\nprivate function xmlRPCRequestComplete( event:Event ):void\n{\n    trace( XML(event.target.data).toXMLString() );\n}\n\nprivate function xmlRPCRequestError( error:ErrorEvent ):void\n{\n    trace( "An error occurred: " + error );\n}\n')),(0,a.kt)("p",null,"WebKit in AIR doesn't support E4X syntax, so the method used to create the XML\ndocument in the previous example does not work in JavaScript code. Instead, you\nmust use the DOM methods to create the XML document or create the document as a\nstring and use the JavaScript DOMParser class to convert the string to XML."),(0,a.kt)("p",null,"The following example uses DOM methods to create an XML-RPC message and an\nXMLHttpRequest to conduct the web service transaction:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<html>\n<head>\n    <title>XML-RPC web service request</title>\n    <script type="text/javascript">\n\n        function makeRequest()\n        {\n            var requestDisplay = document.getElementById( "request" );\n            var resultDisplay  = document.getElementById( "result" );\n\n            var request = {};\n            request.URL = "http://services.example.com/xmlrpc/";\n            request.method = "test.echo";\n            request.HTTPmethod = "POST";\n            request.parameters = {};\n            request.parameters.api_key = "123456ABC";\n            request.parameters.message = "Able was I ere I saw Elba.";\n            var requestMessage = formatXMLRPC( request );\n\n            xmlhttp = new XMLHttpRequest();\n            xmlhttp.open( request.HTTPmethod, request.URL, true);\n            xmlhttp.onreadystatechange = function() {\n                if (xmlhttp.readyState == 4) {\n                    resultDisplay.innerText = xmlhttp.responseText;\n                }\n            }\n            xmlhttp.send( requestMessage );\n\n            requestDisplay.innerText = xmlToString( requestMessage.documentElement );\n        }\n\n        //Formats a request as XML-RPC document\n        function formatXMLRPC( request )\n        {\n            var xmldoc = document.implementation.createDocument( "", "", null );\n            var root = xmldoc.createElement( "methodCall" );\n            xmldoc.appendChild( root );\n            var methodName = xmldoc.createElement( "methodName" );\n            var methodString = xmldoc.createTextNode( request.method );\n            methodName.appendChild( methodString );\n\n            root.appendChild( methodName );\n\n            var params = xmldoc.createElement( "params" );\n            root.appendChild( params );\n\n            var param = xmldoc.createElement( "param" );\n            params.appendChild( param );\n            var value = xmldoc.createElement( "value" );\n            param.appendChild( value );\n            var struct = xmldoc.createElement( "struct" );\n            value.appendChild( struct );\n\n            for( var property in request.parameters )\n            {\n                var member = xmldoc.createElement( "member" );\n                struct.appendChild( member );\n\n                var name = xmldoc.createElement( "name" );\n                var paramName = xmldoc.createTextNode( property );\n                name.appendChild( paramName )\n                member.appendChild( name );\n\n                var value = xmldoc.createElement( "value" );\n                var type = xmldoc.createElement( "string" );\n                value.appendChild( type );\n                var paramValue = xmldoc.createTextNode( request.parameters[property] );\n                type.appendChild( paramValue )\n                member.appendChild( value );\n            }\n            return xmldoc;\n        }\n\n        //Returns a string representation of an XML node\n        function xmlToString( rootNode, indent )\n        {\n            if( indent == null ) indent = "";\n            var result = indent + "<" + rootNode.tagName + ">\\n";\n            for( var i = 0; i < rootNode.childNodes.length; i++)\n            {\n                if(rootNode.childNodes.item( i ).nodeType == Node.TEXT_NODE )\n                {\n                    result += indent + "    " + rootNode.childNodes.item( i ).textContent + "\\n";\n                }\n            }\n            if( rootNode.childElementCount > 0 )\n            {\n                result += xmlToString( rootNode.firstElementChild, indent + "    " );\n            }\n            if( rootNode.nextElementSibling )\n            {\n                result += indent + "</" + rootNode.tagName + ">\\n";\n                result += xmlToString( rootNode.nextElementSibling, indent );\n            }\n            else\n            {\n                result += indent +"</" + rootNode.tagName + ">\\n";\n            }\n            return result;\n        }\n\n    <\/script>\n</head>\n<body onload="makeRequest()">\n    <h1>Request:</h1>\n    <pre id="request"></pre>\n    <h1>Result:</h1>\n    <pre id="result"></pre>\n</body>\n</html>\n')))}p.isMDXComponent=!0}}]);