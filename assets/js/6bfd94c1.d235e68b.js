"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[51393],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>u});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),p=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},c=function(t){var e=p(t.components);return r.createElement(s.Provider,{value:e},t.children)},d="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),d=p(n),g=a,u=d["".concat(s,".").concat(g)]||d[g]||m[g]||i;return n?r.createElement(u,l(l({ref:e},c),{},{components:n})):r.createElement(u,l({ref:e},c))}));function u(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[d]="string"==typeof t?t:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},27201:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:2},l="Creating strings",o={unversionedId:"development/core-actionscript-classes/working-with-strings/creating-strings",id:"development/core-actionscript-classes/working-with-strings/creating-strings",title:"Creating strings",description:"The String class is used to represent string (textual) data in ActionScript 3.0.",source:"@site/docs/development/core-actionscript-classes/working-with-strings/creating-strings.md",sourceDirName:"development/core-actionscript-classes/working-with-strings",slug:"/development/core-actionscript-classes/working-with-strings/creating-strings",permalink:"/docs/development/core-actionscript-classes/working-with-strings/creating-strings",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-strings/creating-strings.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Basics of strings",permalink:"/docs/development/core-actionscript-classes/working-with-strings/basics-of-strings"},next:{title:"The length property",permalink:"/docs/development/core-actionscript-classes/working-with-strings/the-length-property"}},s={},p=[],c={toc:p},d="wrapper";function m(t){let{components:e,...n}=t;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"creating-strings"},"Creating strings"),(0,a.kt)("p",null,"The String class is used to represent string (textual) data in ActionScript 3.0.\nActionScript strings support both ASCII and Unicode characters. The simplest way\nto create a string is to use a string literal. To declare a string literal, use\nstraight double quotation mark (",(0,a.kt)("inlineCode",{parentName:"p"},'"'),") or single quotation mark (",(0,a.kt)("inlineCode",{parentName:"p"},"'"),") characters.\nFor example, the following two strings are equivalent:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"var str1:String = \"hello\";\nvar str2:String = 'hello';\n")),(0,a.kt)("p",null,"You can also declare a string by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"new")," operator, as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var str1:String = new String("hello");\u2003\u2003\nvar str2:String = new String(str1);\nvar str3:String = new String();       // str3 == ""\n')),(0,a.kt)("p",null,"The following two strings are equivalent:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var str1:String = "hello";\nvar str2:String = new String("hello");\n')),(0,a.kt)("p",null,"To use single quotation marks (",(0,a.kt)("inlineCode",{parentName:"p"},"'"),") within a string literal defined with single\nquotation mark (",(0,a.kt)("inlineCode",{parentName:"p"},"'"),") delimiters, use the backslash escape character (",(0,a.kt)("inlineCode",{parentName:"p"},"\\"),").\nSimilarly, to use double quotation marks (",(0,a.kt)("inlineCode",{parentName:"p"},'"'),") within a string literal defined\nwith double quotation marks (",(0,a.kt)("inlineCode",{parentName:"p"},'"'),") delimiters, use the backslash escape character\n(",(0,a.kt)("inlineCode",{parentName:"p"},"\\"),"). The following two strings are equivalent:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var str1:String = "That\'s \\"A-OK\\"";\nvar str2:String = \'That\\\'s "A-OK"\';\n')),(0,a.kt)("p",null,"You may choose to use single quotation marks or double quotation marks based on\nany single or double quotation marks that exist in a string literal, as in the\nfollowing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"var str1:String = \"ActionScript <span class='heavy'>3.0</span>\";\nvar str2:String = '<item id=\"155\">banana</item>';\n")),(0,a.kt)("p",null,"Keep in mind that ActionScript distinguishes between a straight single quotation\nmark (",(0,a.kt)("inlineCode",{parentName:"p"},"'"),") and a left or right single quotation mark (",(0,a.kt)("inlineCode",{parentName:"p"},"'")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"'"),"). The same is\ntrue for double quotation marks. Use straight quotation marks to delineate\nstring literals. When pasting text from another source into ActionScript, be\nsure to use the correct characters."),(0,a.kt)("p",null,"As the following table shows, you can use the backslash escape character (",(0,a.kt)("inlineCode",{parentName:"p"},"\\"),")\nto define other characters in string literals:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Escape sequence"),(0,a.kt)("th",{parentName:"tr",align:null},"Character"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"\\b")),(0,a.kt)("td",{parentName:"tr",align:null},"Backspace")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"\\f")),(0,a.kt)("td",{parentName:"tr",align:null},"Form feed")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"\\n")),(0,a.kt)("td",{parentName:"tr",align:null},"Newline")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"\\r")),(0,a.kt)("td",{parentName:"tr",align:null},"Carriage return")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"\\t")),(0,a.kt)("td",{parentName:"tr",align:null},"Tab")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"\\u")," ",(0,a.kt)("inlineCode",{parentName:"td"},"nnnn")),(0,a.kt)("td",{parentName:"tr",align:null},"The Unicode character with the character code specified by the hexadecimal number ",(0,a.kt)("em",{parentName:"td"},"nnnn")," ; for example, ",(0,a.kt)("inlineCode",{parentName:"td"},"\\u263a")," is the smiley character.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"\\\\x")," ",(0,a.kt)("inlineCode",{parentName:"td"},"nn")),(0,a.kt)("td",{parentName:"tr",align:null},"The ASCII character with the character code specified by the hexadecimal number ",(0,a.kt)("em",{parentName:"td"},"nn"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"\\'")),(0,a.kt)("td",{parentName:"tr",align:null},"Single quotation mark")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'\\"')),(0,a.kt)("td",{parentName:"tr",align:null},"Double quotation mark")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"\\\\")),(0,a.kt)("td",{parentName:"tr",align:null},"Single backslash character")))))}m.isMDXComponent=!0}}]);