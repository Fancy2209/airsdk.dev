"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[62971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},88672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:5},i="Controlling video playback",l={unversionedId:"development/rich-media-content/working-with-video/controlling-video-playback",id:"development/rich-media-content/working-with-video/controlling-video-playback",title:"Controlling video playback",description:"The NetStream class offers four main methods for controlling video playback:",source:"@site/docs/development/rich-media-content/working-with-video/controlling-video-playback.md",sourceDirName:"development/rich-media-content/working-with-video",slug:"/development/rich-media-content/working-with-video/controlling-video-playback",permalink:"/docs/development/rich-media-content/working-with-video/controlling-video-playback",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-video/controlling-video-playback.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"mainSidebar",previous:{title:"Loading video files",permalink:"/docs/development/rich-media-content/working-with-video/loading-video-files"},next:{title:"Playing video in full-screen mode",permalink:"/docs/development/rich-media-content/working-with-video/playing-video-in-full-screen-mode"}},s={},d=[{value:"Detecting the end of a video stream",id:"detecting-the-end-of-a-video-stream",level:2}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controlling-video-playback"},"Controlling video playback"),(0,o.kt)("p",null,"The NetStream class offers four main methods for controlling video playback:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetStream.html#pause()"},(0,o.kt)("inlineCode",{parentName:"a"},"pause()")),":\nPauses playback of a video stream. If the video is already paused, calling this\nmethod does nothing."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetStream.html#resume()"},(0,o.kt)("inlineCode",{parentName:"a"},"resume()")),":\nResumes playback of a video stream that is paused. If the video is already\nplaying, calling this method does nothing."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetStream.html#seek()"},(0,o.kt)("inlineCode",{parentName:"a"},"seek()")),":\nSeeks the keyframe closest to the specified location (an offset, in seconds,\nfrom the beginning of the stream)."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetStream.html#togglePause()"},(0,o.kt)("inlineCode",{parentName:"a"},"togglePause()")),":\nPauses or resumes playback of a stream."),(0,o.kt)("p",null,"Note: There is no ",(0,o.kt)("inlineCode",{parentName:"p"},"stop()")," method. In order to stop a stream you must pause\nplayback and seek to the beginning of the video stream."),(0,o.kt)("p",null,"Note: The ",(0,o.kt)("inlineCode",{parentName:"p"},"play()")," method does not resume playback, it is used for loading video\nfiles."),(0,o.kt)("p",null,"The following example demonstrates how to control a video using several\ndifferent buttons. To run the following example, create a new document and add\nfour button instances to your workspace ( ",(0,o.kt)("inlineCode",{parentName:"p"},"pauseBtn"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"playBtn"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"stopBtn"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"togglePauseBtn"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'var nc:NetConnection = new NetConnection();\nnc.connect(null);\n\nvar ns:NetStream = new NetStream(nc);\nns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);\nns.play("video.flv");\nfunction asyncErrorHandler(event:AsyncErrorEvent):void\n{\n    // ignore error\n}\n\nvar vid:Video = new Video();\nvid.attachNetStream(ns);\naddChild(vid);\n\npauseBtn.addEventListener(MouseEvent.CLICK, pauseHandler);\nplayBtn.addEventListener(MouseEvent.CLICK, playHandler);\nstopBtn.addEventListener(MouseEvent.CLICK, stopHandler);\ntogglePauseBtn.addEventListener(MouseEvent.CLICK, togglePauseHandler);\n\nfunction pauseHandler(event:MouseEvent):void\n{\n    ns.pause();\n}\nfunction playHandler(event:MouseEvent):void\n{\n    ns.resume();\n}\nfunction stopHandler(event:MouseEvent):void\n{\n    // Pause the stream and move the playhead back to\n    // the beginning of the stream.\n    ns.pause();\n    ns.seek(0);\n}\nfunction togglePauseHandler(event:MouseEvent):void\n{\n    ns.togglePause();\n}\n')),(0,o.kt)("p",null,"Clicking on the ",(0,o.kt)("inlineCode",{parentName:"p"},"pauseBtn")," button instance while the video is playing causes the\nvideo file to pause. If the video is already paused, clicking this button has no\neffect. Clicking on the ",(0,o.kt)("inlineCode",{parentName:"p"},"playBtn")," button instance resumes video playback if\nplayback was previously paused, otherwise the button has no effect if the video\nwas already playing."),(0,o.kt)("h2",{id:"detecting-the-end-of-a-video-stream"},"Detecting the end of a video stream"),(0,o.kt)("p",null,"In order to listen for the beginning and end of a video stream, you need to add\nan event listener to the NetStream instance to listen for the ",(0,o.kt)("inlineCode",{parentName:"p"},"netStatus")," event.\nThe following code demonstrates how to listen for the various codes throughout\nthe video's playback:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ns.addEventListener(NetStatusEvent.NET_STATUS, statusHandler);\nfunction statusHandler(event:NetStatusEvent):void\n{\n    trace(event.info.code)\n}\n")),(0,o.kt)("p",null,"The previous code generates the following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"NetStream.Play.Start\nNetStream.Buffer.Empty\nNetStream.Buffer.Full\nNetStream.Buffer.Empty\nNetStream.Buffer.Full\nNetStream.Buffer.Empty\nNetStream.Buffer.Full\nNetStream.Buffer.Flush\nNetStream.Play.Stop\nNetStream.Buffer.Empty\nNetStream.Buffer.Flush\n")),(0,o.kt)("p",null,'The two codes that you want to specifically listen for are\n"NetStream.Play.Start" and "NetStream.Play.Stop" which signal the beginning and\nend of the video\'s playback. The following snippet uses a switch statement to\nfilter these two codes and trace a message:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'function statusHandler(event:NetStatusEvent):void\n{\n    switch (event.info.code)\n    {\n        case "NetStream.Play.Start":\n            trace("Start [" + ns.time.toFixed(3) + " seconds]");\n            break;\n        case "NetStream.Play.Stop":\n            trace("Stop [" + ns.time.toFixed(3) + " seconds]");\n            break;\n    }\n}\n')),(0,o.kt)("p",null,"By listening for the ",(0,o.kt)("inlineCode",{parentName:"p"},"netStatus")," event ( ",(0,o.kt)("inlineCode",{parentName:"p"},"NetStatusEvent.NET_STATUS"),"), you can\nbuild a video player which loads the next video in a playlist once the current\nvideo has finished playing."))}u.isMDXComponent=!0}}]);