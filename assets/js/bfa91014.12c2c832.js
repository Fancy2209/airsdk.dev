"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[81317],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,m=d["".concat(p,".").concat(h)]||d[h]||g[h]||a;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},36520:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=n(87462),r=(n(67294),n(3905));const a={sidebar_position:4},o="Setting size, scale, and orientation",s={unversionedId:"development/client-system-interaction/printing/setting-size-scale-and-orientation",id:"development/client-system-interaction/printing/setting-size-scale-and-orientation",title:"Setting size, scale, and orientation",description:"The section Printing a page details the steps for a",source:"@site/docs/development/client-system-interaction/printing/setting-size-scale-and-orientation.md",sourceDirName:"development/client-system-interaction/printing",slug:"/development/client-system-interaction/printing/setting-size-scale-and-orientation",permalink:"/docs/development/client-system-interaction/printing/setting-size-scale-and-orientation",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/client-system-interaction/printing/setting-size-scale-and-orientation.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mainSidebar",previous:{title:"Flash runtime tasks and system printing",permalink:"/docs/development/client-system-interaction/printing/flash-runtime-tasks-and-system-printing"},next:{title:"Advanced printing techniques",permalink:"/docs/development/client-system-interaction/printing/advanced-printing-techniques"}},p={},l=[{value:"Using rectangles for the print area",id:"using-rectangles-for-the-print-area",level:2},{value:"Comparing points and pixels",id:"comparing-points-and-pixels",level:2},{value:"Scaling",id:"scaling",level:2},{value:"Printing for landscape or portrait orientation",id:"printing-for-landscape-or-portrait-orientation",level:2},{value:"Responding to page height and width",id:"responding-to-page-height-and-width",level:2}],c={toc:l},d="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-size-scale-and-orientation"},"Setting size, scale, and orientation"),(0,r.kt)("p",null,"The section ",(0,r.kt)("a",{parentName:"p",href:"/docs/development/client-system-interaction/printing/printing-a-page"},"Printing a page")," details the steps for a\nbasic print job, where the output directly reflects the printed equivalent of\nthe screen size and position of the specified sprite. However, printers use\ndifferent resolutions for printing, and can have settings that adversely affect\nthe appearance of the printed sprite."),(0,r.kt)("p",null,"Flash runtimes can read an operating system's printing settings, but note that\nthese properties are read-only: although you can respond to their values, you\ncan't set them. So, for example, you can find out the printer's page size\nsetting and adjust your content to fit the size. You can also determine a\nprinter's margin settings and page orientation. To respond to the printer\nsettings, specify a print area, adjust for the difference between a screen's\nresolution and a printer's point measurements, or transform your content to meet\nthe size or orientation settings of the user's printer."),(0,r.kt)("h2",{id:"using-rectangles-for-the-print-area"},"Using rectangles for the print area"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PrintJob.addPage()")," method allows you to specify the region of a sprite\nthat you want printed. The second parameter, ",(0,r.kt)("inlineCode",{parentName:"p"},"printArea,")," is in the form of a\nRectangle object. You have three options for providing a value for this\nparameter:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a Rectangle object with specific properties and then use that rectangle\nin the ",(0,r.kt)("inlineCode",{parentName:"p"},"addPage()")," call, as in the following example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"private var rect1:Rectangle = new Rectangle(0, 0, 400, 200);\nmyPrintJob.addPage(sheet, rect1);\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you haven't already specified a Rectangle object, you can do it within the\ncall itself, as in the following example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"myPrintJob.addPage(sheet, new Rectangle(0, 0, 100, 100));\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you plan to provide values for the third parameter in the ",(0,r.kt)("inlineCode",{parentName:"p"},"addPage()")," call,\nbut don't want to specify a rectangle, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," for the second\nparameter, as in the following;"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"myPrintJob.addPage(sheet, null, options);\n")))),(0,r.kt)("h2",{id:"comparing-points-and-pixels"},"Comparing points and pixels"),(0,r.kt)("p",null,"A rectangle's width and height are pixel values. A printer uses points as print\nunits of measurement. Points are a fixed physical size (1/72 inch), but the size\nof a pixel on the screen depends on the resolution of the particular screen. The\nconversion rate between pixels and points depends on the printer settings and\nwhether the sprite is scaled. An unscaled sprite that is 72 pixels wide prints\nout one inch wide, with one point equal to one pixel, independent of screen\nresolution."),(0,r.kt)("p",null,"You can use the following equivalencies to convert inches or centimeters to\ntwips or points (a twip is 1/20 of a point):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"1 point = 1/72 inch = 20 twips")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"1 inch = 72 points = 1440 twips")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"1 centimeter = 567 twips"))),(0,r.kt)("p",null,"If you omit the ",(0,r.kt)("inlineCode",{parentName:"p"},"printArea")," parameter, or if it is passed incorrectly, the full\narea of the sprite is printed."),(0,r.kt)("h2",{id:"scaling"},"Scaling"),(0,r.kt)("p",null,"If you want to scale a Sprite object before you print it, set the scale\nproperties (see\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/display/display-programming/manipulating-display-objects/manipulating-size-and-scaling-objects"},"Manipulating size and scaling objects"),")\nbefore calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"PrintJob.addPage()")," method, and set them back to their\noriginal values after printing. The scale of a Sprite object has no relation to\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"printArea")," property. In other words, if you specify a print area that is 50\npixels by 50 pixels, 2500 pixels are printed. If you scale the Sprite object,\nthe same 2500 pixels are printed, but the Sprite object is printed at the scaled\nsize."),(0,r.kt)("p",null,"For an example, see\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/client-system-interaction/printing/printing-example-scaling-cropping-and-responding"},"Printing example: Scaling, cropping, and responding"),"."),(0,r.kt)("h2",{id:"printing-for-landscape-or-portrait-orientation"},"Printing for landscape or portrait orientation"),(0,r.kt)("p",null,"Because Flash Player and AIR can detect the settings for orientation, you can\nbuild logic into your ActionScript to adjust the content size or rotation in\nresponse to the printer settings, as the following example illustrates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"if (myPrintJob.orientation == PrintJobOrientation.LANDSCAPE)\n{\n    mySprite.rotation = 90;\n}\n")),(0,r.kt)("p",null,"Note: If you plan to read the system setting for content orientation on the\npaper, remember to import the\n",(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/printing/PrintJobOrientation.html"},"PrintJobOrientation class"),".\nThe PrintJobOrientation class provides constant values that define the content\norientation on the page. You import the class using the following statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import flash.printing.PrintJobOrientation;\n")),(0,r.kt)("h2",{id:"responding-to-page-height-and-width"},"Responding to page height and width"),(0,r.kt)("p",null,"Using a strategy that is similar to handling printer orientation settings, you\ncan read the page height and width settings and respond to them by embedding\nsome logic into an ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," statement. The following code shows an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"if (mySprite.height > myPrintJob.pageHeight)\n{\n    mySprite.scaleY = .75;\n}\n")),(0,r.kt)("p",null,"In addition, a page's margin settings can be determined by comparing the page\nand paper dimensions, as the following example illustrates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"margin_height = (myPrintJob.paperHeight - myPrintJob.pageHeight) / 2;\nmargin_width = (myPrintJob.paperWidth - myPrintJob.pageWidth) / 2;\n")))}g.isMDXComponent=!0}}]);