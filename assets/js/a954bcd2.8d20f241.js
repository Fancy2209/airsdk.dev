"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[10885],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(n),f=a,h=c["".concat(s,".").concat(f)]||c[f]||m[f]||r;return n?i.createElement(h,l(l({ref:t},p),{},{components:n})):i.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},43146:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=n(87462),a=(n(67294),n(3905));const r={sidebar_position:5},l="Example: Reading and writing data with random access",o={unversionedId:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-and-writing-data-with-random-access",id:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-and-writing-data-with-random-access",title:"Example: Reading and writing data with random access",description:"MP3 files can include ID3 tags, which are sections at the beginning or end of",source:"@site/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-and-writing-data-with-random-access.md",sourceDirName:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files",slug:"/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-and-writing-data-with-random-access",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-and-writing-data-with-random-access",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-and-writing-data-with-random-access.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"mainSidebar",previous:{title:"Example: Reading an XML file into an XML object",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-an-xml-file-into-an-xml-object"},next:{title:"Using the FileReference class",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-filereference-class"}},s={},d=[],p={toc:d},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-reading-and-writing-data-with-random-access"},"Example: Reading and writing data with random access"),(0,a.kt)("p",null,'MP3 files can include ID3 tags, which are sections at the beginning or end of\nthe file that contain meta data identifying the recording. The ID3 tag format\nitself has different revisions. This example describes how to read and write\nfrom an MP3 file that contains the simplest ID3 format (ID3 version 1.0) using\n"random access to file data", which means that it reads from and writes to\narbitrary locations in the file.'),(0,a.kt)("p",null,"An MP3 file that contains an ID3 version 1 tag includes the ID3 data at the end\nof the file, in the final 128 bytes."),(0,a.kt)("p",null,"When accessing a file for random read/write access, it is important to specify\n",(0,a.kt)("inlineCode",{parentName:"p"},"FileMode.UPDATE")," as the ",(0,a.kt)("inlineCode",{parentName:"p"},"fileMode")," parameter for the ",(0,a.kt)("inlineCode",{parentName:"p"},"open()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"openAsync()"),"\nmethod:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var file:File = File.documentsDirectory.resolvePath("My Music/Sample ID3 v1.mp3");\nvar fileStr:FileStream = new FileStream();\nfileStr.open(file, FileMode.UPDATE);\n')),(0,a.kt)("p",null,"This lets you both read and write to the file."),(0,a.kt)("p",null,"Upon opening the file, you can set the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," pointer to the position 128\nbytes before the end of the file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fileStr.position = file.size - 128;\n")),(0,a.kt)("p",null,"This code sets the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," property to this location in the file because the\nID3 v1.0 format specifies that the ID3 tag data is stored in the last 128 bytes\nof the file. The specification also says the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The first 3 bytes of the tag contain the string ",(0,a.kt)("inlineCode",{parentName:"p"},'"TAG"'),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The next 30 characters contain the title for the MP3 track, as a string.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The next 30 characters contain the name of the artist, as a string.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The next 30 characters contain the name of the album, as a string.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The next 4 characters contain the year, as a string.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The next 30 characters contain the comment, as a string.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The next byte contains a code indicating the track's genre.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"All text data is in ISO 8859-1 format."))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"id3TagRead()")," method checks the data after it is read in (upon the\n",(0,a.kt)("inlineCode",{parentName:"p"},"complete")," event):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'function id3TagRead():void\n{\n    if (fileStr.readMultiByte(3, "iso-8859-1").match(/tag/i))\n    {\n        var id3Title:String = fileStr.readMultiByte(30, "iso-8859-1");\n        var id3Artist:String = fileStr.readMultiByte(30, "iso-8859-1");\n        var id3Album:String = fileStr.readMultiByte(30, "iso-8859-1");\n        var id3Year:String = fileStr.readMultiByte(4, "iso-8859-1");\n        var id3Comment:String = fileStr.readMultiByte(30, "iso-8859-1");\n        var id3GenreCode:String =  fileStr.readByte().toString(10);\n    }\n}\n')),(0,a.kt)("p",null,"You can also perform a random-access write to the file. For example, you could\nparse the ",(0,a.kt)("inlineCode",{parentName:"p"},"id3Title")," variable to ensure that it is correctly capitalized (using\nmethods of the String class), and then write a modified string, called\n",(0,a.kt)("inlineCode",{parentName:"p"},"newTitle"),", to the file, as in the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'fileStr.position = file.length - 125;    // 128 - 3\nfileStr.writeMultiByte(newTitle, "iso-8859-1");\n')),(0,a.kt)("p",null,"To conform with the ID3 version 1 standard, the length of the ",(0,a.kt)("inlineCode",{parentName:"p"},"newTitle")," string\nshould be 30 characters, padded at the end with the character code 0 (\n",(0,a.kt)("inlineCode",{parentName:"p"},"String.fromCharCode(0)"),")."))}m.isMDXComponent=!0}}]);