"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[70404],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,h=p["".concat(s,".").concat(f)]||p[f]||m[f]||i;return n?o.createElement(h,r(r({ref:t},d),{},{components:n})):o.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},40554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const i={sidebar_position:10},r="Loading data",l={unversionedId:"development/security/loading-data",id:"development/security/loading-data",title:"Loading data",description:"Flash Player and AIR content can exchange data with servers. Loading data is a",source:"@site/docs/development/security/loading-data.md",sourceDirName:"development/security",slug:"/development/security/loading-data",permalink:"/docs/development/security/loading-data",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/security/loading-data.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"mainSidebar",previous:{title:"Accessing loaded media as data",permalink:"/docs/development/security/accessing-loaded-media-as-data"},next:{title:"Loading embedded content from SWF files imported into a security domain",permalink:"/docs/development/security/loading-embedded-content-from-swf-files-loaded-into-a-security-domain"}},s={},c=[{value:"Using URLLoader and URLStream",id:"using-urlloader-and-urlstream",level:2},{value:"Connecting to sockets",id:"connecting-to-sockets",level:2},{value:"Protecting data",id:"protecting-data",level:2},{value:"Sending data",id:"sending-data",level:2},{value:"Uploading and downloading files",id:"uploading-and-downloading-files",level:2}],d={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"loading-data"},"Loading data"),(0,a.kt)("p",null,"Flash Player and AIR content can exchange data with servers. Loading data is a\ndifferent kind of operation from loading media, because the loaded information\nappears as program objects, rather than being displayed as media. Generally,\ncontent may load data from the same domain that the content originated from.\nHowever, content usually requires policy files in order to load data from other\ndomains (see\n",(0,a.kt)("a",{parentName:"p",href:"/docs/development/security/permission-controls#website-controls-policy-files"},"Website controls (policy files)"),")."),(0,a.kt)("p",null,"Note: Content running in the AIR application sandbox is never served from a\nremote domain (unless the developer intentionally imports remote content into\nthe application sandbox), so it cannot participate in the types of attacks that\npolicy files protect against. AIR content in the application sandbox is not\nrestricted from loading data by policy files. However, AIR content in other\nsandboxes is subject to the restrictions described here."),(0,a.kt)("h2",{id:"using-urlloader-and-urlstream"},"Using URLLoader and URLStream"),(0,a.kt)("p",null,"You can load data, such as an XML file or a text file. The ",(0,a.kt)("inlineCode",{parentName:"p"},"load()")," methods of\nthe URLLoader and URLStream classes are governed by URL policy file permissions."),(0,a.kt)("p",null,"If you use the ",(0,a.kt)("inlineCode",{parentName:"p"},"load()")," method to load content from a domain other than that of\nthe code that is calling the method, the runtime checks for a URL policy file on\nthe server of the loaded assets. If there is a policy file, and it grants access\nto the domain of the loading content, you can load the data."),(0,a.kt)("h2",{id:"connecting-to-sockets"},"Connecting to sockets"),(0,a.kt)("p",null,"By default, the runtime looks for a socket policy file served from port 843. As\nwith URL policy files, this file is called the ",(0,a.kt)("em",{parentName:"p"},"master policy file"),"."),(0,a.kt)("p",null,"When policy files were first introduced in Flash Player 6, there was no support\nfor socket policy files. Connections to socket servers were authorized by a\npolicy file in the default location on an HTTP server on port 80 of the same\nhost as the socket server. Flash Player 9 still supports this capability, but\nFlash Player 10 does not. In Flash Player 10, only socket policy files can\nauthorize socket connections."),(0,a.kt)("p",null,'Like URL policy files, socket policy files support a meta-policy statement that\nspecifies which ports can serve policy files. However, instead of "master-only,"\nthe default meta-policy for socket policy files is "all." That is, unless the\nmaster policy file specifies a more restrictive setting, Flash Player assumes\nthat any socket on the host can serve a socket policy file.'),(0,a.kt)("p",null,"Access to socket and XML socket connections is disabled by default, even if the\nsocket you are connecting to is in the same domain as the SWF file. You can\npermit socket-level access by serving a socket policy file from any of the\nfollowing locations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Port 843 (the location of the master policy file)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The same port as the main socket connection")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A different port than the main socket connection"))),(0,a.kt)("p",null,"By default, Flash Player looks for a socket policy file on port 843 and on the\nsame port as the main socket connection. If you want to serve a socket policy\nfile from a different port, the SWF file must call ",(0,a.kt)("inlineCode",{parentName:"p"},"Security.loadPolicyFile()"),"."),(0,a.kt)("p",null,"A socket policy file has the same syntax as a URL policy file, except that it\nmust also specify the ports to which it grants access. When a socket policy file\nis served from a port number below 1024, it may grant access to any ports; when\na policy file comes from port 1024 or higher, it may grant access only to ports\n1024 and higher. The allowed ports are specified in a ",(0,a.kt)("inlineCode",{parentName:"p"},"to-ports")," attribute in\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"<allow-access-from>")," tag. Single port numbers, port ranges, and wildcards\nare accepted values."),(0,a.kt)("p",null,"Here is an example socket policy file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<?xml version="1.0"?>\n<!DOCTYPE cross-domain-policy SYSTEM "https://www.adobe.com/xml/dtds/cross-domain-policy.dtd">\n\x3c!-- Policy file for xmlsocket://socks.mysite.com --\x3e\n<cross-domain-policy>\n    <allow-access-from domain="*" to-ports="507" />\n    <allow-access-from domain="*.example.com" to-ports="507,516" />\n    <allow-access-from domain="*.example.org" to-ports="516-523" />\n    <allow-access-from domain="adobe.com" to-ports="507,516-523" />\n    <allow-access-from domain="192.0.34.166" to-ports="*" />\n</cross-domain-policy>\n')),(0,a.kt)("p",null,"To retrieve a socket policy file from port 843 or from the same port as a main\nsocket connection, call the ",(0,a.kt)("inlineCode",{parentName:"p"},"Socket.connect()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"XMLSocket.connect()")," method.\nFlash Player first checks for a master policy file on port 843. If it finds one,\nit checks to see if the file contains a meta-policy statement that prohibits\nsocket policy files on the target port. If access isn't prohibited, Flash Player\nfirst looks for the appropriate ",(0,a.kt)("inlineCode",{parentName:"p"},"allow-access-from")," statement in the master\npolicy file. If it doesn't find one, it then looks for a socket policy file on\nthe same port as the main socket connection."),(0,a.kt)("p",null,"To retrieve a socket policy file a different location, first call the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Security.loadPolicyFile()")," method with the special ",(0,a.kt)("inlineCode",{parentName:"p"},'"xmlsocket"')," syntax, as in\nthe following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Security.loadPolicyFile("xmlsocket://server.com:2525");\n')),(0,a.kt)("p",null,"Call the ",(0,a.kt)("inlineCode",{parentName:"p"},"Security.loadPolicyFile()")," method before calling the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Socket.connect()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"XMLSocket.connect()")," method. Flash Player then waits\nuntil it has fulfilled your policy file request before deciding whether to allow\nyour main connection. However, if the master policy file specifies that the\ntarget location can't serve policy files, the call to ",(0,a.kt)("inlineCode",{parentName:"p"},"loadPolicyFile()")," has no\neffect, even if there is a policy file at that location."),(0,a.kt)("p",null,"If you are implementing a socket server and you need to provide a socket policy\nfile, decide whether to provide the policy file using the same port that accepts\nmain connections, or using a different port. In either case, your server must\nwait for the first transmission from your client before sending a response."),(0,a.kt)("p",null,"When Flash Player requests a policy file, it always transmits the following\nstring as soon as a connection is established:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<policy-file-request/>\n")),(0,a.kt)("p",null,"Once the server receives this string, it can transmit the policy file. The\nrequest from Flash Player is always terminated by a null byte, and the response\nfrom the server must also be terminated by a null byte."),(0,a.kt)("p",null,"Do not expect to reuse the same connection for both a policy file request and a\nmain connection; close the connection after transmitting the policy file. If you\ndo not, Flash Player closes the policy file connection before reconnecting to\nset up the main connection."),(0,a.kt)("h2",{id:"protecting-data"},"Protecting data"),(0,a.kt)("p",null,"To protect data from eavesdropping and alteration as it travels over the\nInternet, you can use the Transport Layer Security (TLS) or Socket Layer\nSecurity (SSL) on the server where the data originates. You can then connect to\nthe server using the HTTPS protocol."),(0,a.kt)("p",null,"In applications created for AIR 2 or above, you can also protect TCP socket\ncommunications. The SecureSocket class allows you to initiate a socket\nconnection to a socket server that uses TLS version 1or SSL version 4."),(0,a.kt)("h2",{id:"sending-data"},"Sending data"),(0,a.kt)("p",null,"Data sending occurs when code sends data to a server or resource. Sending data\nis always permitted for content from a network domain. A local SWF file can send\ndata to network addresses only if it is in the local-trusted,\nlocal-with-networking, or AIR application sandbox. For more information, see\n",(0,a.kt)("a",{parentName:"p",href:"/docs/development/security/security-sandboxes#local-sandboxes"},"Local sandboxes"),"."),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"flash.net.sendToURL()")," function to send data to a URL. Other\nmethods also send requests to URLs. These include loading methods, such as\n",(0,a.kt)("inlineCode",{parentName:"p"},"Loader.load()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Sound.load()"),", and data-loading methods, such as\n",(0,a.kt)("inlineCode",{parentName:"p"},"URLLoader.load()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"URLStream.load()"),"."),(0,a.kt)("h2",{id:"uploading-and-downloading-files"},"Uploading and downloading files"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"FileReference.upload()")," method starts the upload of a file selected by a\nuser to a remote server. You must call the ",(0,a.kt)("inlineCode",{parentName:"p"},"FileReference.browse()")," or\n",(0,a.kt)("inlineCode",{parentName:"p"},"FileReferenceList.browse()")," method before calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"FileReference.upload()"),"\nmethod."),(0,a.kt)("p",null,"The code that initiates the ",(0,a.kt)("inlineCode",{parentName:"p"},"FileReference.browse()")," or\n",(0,a.kt)("inlineCode",{parentName:"p"},"FileReferenceList.browse()")," method can be called only in response to a mouse\nevent or keyboard event. If it is called in other situations, Flash Player 10\nand later throws an exception. However, a user-initiated event is not required\nto call these methods from the AIR application sandbox."),(0,a.kt)("p",null,"Calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"FileReference.download()")," method opens a dialog box in which the\nuser can download a file from a remote server."),(0,a.kt)("p",null,"Note: If your server requires user authentication, only SWF files running in a\nbrowser\u2014that is, using the browser plug-in or ActiveX control\u2014can provide a\ndialog box to prompt the user for a user name and password for authentication,\nand only for downloads. Flash Player does not allow uploads to a server that\nrequires user authentication."),(0,a.kt)("p",null,"Uploads and downloads are not allowed if the calling SWF file is in the\nlocal-with-filesystem sandbox."),(0,a.kt)("p",null,"By default, a SWF file may not initiate an upload to, or a download from, a\nserver other than its own. A SWF file may upload to, or download from, a\ndifferent server if that server provides a policy file that grants permission to\nthe domain of the invoking SWF file."))}m.isMDXComponent=!0}}]);