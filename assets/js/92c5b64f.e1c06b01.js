"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[43267],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(a),d=i,u=c["".concat(l,".").concat(d)]||c[d]||h[d]||o;return a?n.createElement(u,r(r({ref:t},m),{},{components:a})):n.createElement(u,r({ref:t},m))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},92475:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const o={},r="Basics of working with bitmaps",s={unversionedId:"development/display/working-with-bitmaps/basics-of-working-with-bitmaps",id:"development/display/working-with-bitmaps/basics-of-working-with-bitmaps",title:"Basics of working with bitmaps",description:"When you work with digital images, you're likely to encounter two main types of",source:"@site/docs/development/display/working-with-bitmaps/basics-of-working-with-bitmaps.md",sourceDirName:"development/display/working-with-bitmaps",slug:"/development/display/working-with-bitmaps/basics-of-working-with-bitmaps",permalink:"/docs/development/display/working-with-bitmaps/basics-of-working-with-bitmaps",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-bitmaps/basics-of-working-with-bitmaps.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Asynchronous decoding of bitmap images",permalink:"/docs/development/display/working-with-bitmaps/asynchronous-decoding-of-bitmap-images"},next:{title:"Bitmap example: Animated spinning moon",permalink:"/docs/development/display/working-with-bitmaps/bitmap-example-animated-spinning-moon"}},l={},p=[{value:"Bitmap file formats",id:"bitmap-file-formats",level:4},{value:"BMP",id:"bmp",level:4},{value:"GIF",id:"gif",level:4},{value:"JPEG",id:"jpeg",level:4},{value:"PNG",id:"png",level:4},{value:"TIFF",id:"tiff",level:4},{value:"Transparent bitmaps and opaque bitmaps",id:"transparent-bitmaps-and-opaque-bitmaps",level:4},{value:"Important concepts and terms",id:"important-concepts-and-terms",level:4}],m={toc:p},c="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basics-of-working-with-bitmaps"},"Basics of working with bitmaps"),(0,i.kt)("p",null,"When you work with digital images, you're likely to encounter two main types of\ngraphics: bitmap and vector. Bitmap graphics, also known as raster graphics, are\ncomposed of tiny squares (pixels) that are arranged in a rectangular grid\nformation. Vector graphics are composed of mathematically generated geometric\nshapes such as lines, curves, and polygons."),(0,i.kt)("p",null,"Bitmap images are defined by the width and height of the image, measured in\npixels, and the number of bits contained in each pixel, which represents the\nnumber of colors a pixel can contain. In the case of a bitmap image that\nutilizes the RGB color model, the pixels are made up of three bytes: red, green,\nand blue. Each of these bytes contains a value ranging from 0 to 255. When the\nbytes are combined within the pixel, they produce a color similar to an artist\nmixing paint colors. For example, a pixel containing byte values of red-255,\ngreen-102 and blue-0 would produce a vibrant orange color."),(0,i.kt)("p",null,"The quality of a bitmap image is determined by combining the resolution of the\nimage with its color depth bit value. ",(0,i.kt)("em",{parentName:"p"},"Resolution")," relates to the number of\npixels contained within an image. The greater the number of pixels, the higher\nthe resolution and the finer the image appears. ",(0,i.kt)("em",{parentName:"p"},"Color depth")," relates to the\namount of information a pixel can contain. For example, an image that has a\ncolor depth value of 16 bits per pixel cannot represent the same number of\ncolors as an image that has a color depth of 48 bits. As a result, the 48-bit\nimage will have smoother degrees of shading than its 16-bit counterpart."),(0,i.kt)("p",null,"Because bitmap graphics are resolution-dependent, they don't scale very well.\nThis is most noticeable when bitmap images are scaled up in size. Scaling up a\nbitmap usually results in a loss of detail and quality."),(0,i.kt)("h4",{id:"bitmap-file-formats"},"Bitmap file formats"),(0,i.kt)("p",null,"Bitmap images are grouped into a number of common file formats. These formats\nuse different types of compression algorithms to reduce file size, as well as\noptimize image quality based on the end purpose of the image. The bitmap image\nformats supported by Adobe runtimes are BMP, GIF, JPG, PNG, and TIFF."),(0,i.kt)("h4",{id:"bmp"},"BMP"),(0,i.kt)("p",null,"The BMP (bit mapped) format is a default image format used by the Microsoft\nWindows operating system. It does not use any form of compression algorithm and\nas such usually results in large file sizes."),(0,i.kt)("h4",{id:"gif"},"GIF"),(0,i.kt)("p",null,"The Graphics Interchange Format (GIF) was originally developed by CompuServe in\n1987 as a means to transmit images with 256 colors (8-bit color). The format\nprovides small file sizes and is ideal for web-based images. Because of this\nformat's limited color palette, GIF images are generally not suitable for\nphotographs, which typically require high degrees of shading and color\ngradients. GIF images permit single-bit transparency, which allows colors to be\nmapped as clear (or transparent). This results in the background color of a web\npage showing through the image where the transparency has been mapped."),(0,i.kt)("h4",{id:"jpeg"},"JPEG"),(0,i.kt)("p",null,"Developed by the Joint Photographic Experts Group (JPEG), the JPEG (often\nwritten JPG) image format uses a lossy compression algorithm to allow 24-bit\ncolor depth with a small file size. Lossy compression means that each time the\nimage is saved, the image loses quality and data but results in a smaller file\nsize. The JPEG format is ideal for photographs because it is capable of\ndisplaying millions of colors. The ability to control the degree of compression\napplied to an image allows you to manipulate image quality and file size."),(0,i.kt)("h4",{id:"png"},"PNG"),(0,i.kt)("p",null,"The Portable Network Graphics (PNG) format was produced as an open-source\nalternative to the patented GIF file format. PNGs support up to 64-bit color\ndepth, allowing for up to 16 million colors. Because PNG is a relatively new\nformat, some older browsers don't support PNG files. Unlike JPGs, PNGs use\nlossless compression, which means that none of the image data is lost when the\nimage is saved. PNG files also support alpha transparency, which allows for up\nto 256 levels of transparency."),(0,i.kt)("h4",{id:"tiff"},"TIFF"),(0,i.kt)("p",null,"The Tagged Image File Format (TIFF) was the cross-platform format of choice\nbefore the PNG was introduced. The drawback with the TIFF format is that because\nof the many different varieties of TIFF, there is no single reader that can\nhandle every version. In addition, no web browsers currently support the format.\nTIFF can use either lossy or lossless compression, and is able to handle\ndevice-specific color spaces (such as CMYK)."),(0,i.kt)("h4",{id:"transparent-bitmaps-and-opaque-bitmaps"},"Transparent bitmaps and opaque bitmaps"),(0,i.kt)("p",null,"Bitmap images that use either the GIF or PNG formats can have an extra byte\n(alpha channel) added to each pixel. This extra pixel byte represents the\ntransparency value of the pixel."),(0,i.kt)("p",null,"GIF images allow single-bit transparency, which means that you can specify a\nsingle color, from a 256-color palette, to be transparent. PNG images, on the\nother hand, can have up to 256 levels of transparency. This function is\nespecially beneficial when images or text are required to blend into\nbackgrounds."),(0,i.kt)("p",null,"ActionScript 3.0 replicates this extra transparency pixel byte within the\nBitmapData class. Similar to the PNG transparency model, ActionScript offers up\nto 256 levels of transparency."),(0,i.kt)("h4",{id:"important-concepts-and-terms"},"Important concepts and terms"),(0,i.kt)("p",null,"The following list contains important terms that you will encounter when\nlearning about bitmap graphics:"),(0,i.kt)("p",null,"Alpha",(0,i.kt)("br",{parentName:"p"}),"\n","The level of transparency (or more accurately, opacity) in a color or an image.\nThe amount of alpha is often described as the ",(0,i.kt)("em",{parentName:"p"},"alpha channel")," value."),(0,i.kt)("p",null,"ARGB color",(0,i.kt)("br",{parentName:"p"}),"\n","A color scheme where each pixel's color is a mixture of red, green, and blue\ncolor values, and its transparency is specified as an alpha value."),(0,i.kt)("p",null,"Color channel",(0,i.kt)("br",{parentName:"p"}),"\n","Commonly, colors are represented as a mixture of a few basic colors\u2014usually (for\ncomputer graphics) red, green, and blue. Each basic color is considered a color\nchannel; the amount of color in each color channel, mixed together, determines\nthe final color."),(0,i.kt)("p",null,"Color depth",(0,i.kt)("br",{parentName:"p"}),"\n","Also known as ",(0,i.kt)("em",{parentName:"p"},"bit depth"),", this refers to the amount of computer memory that is\ndevoted to each pixel, which in turn determines the number of possible colors\nthat can be represented in the image."),(0,i.kt)("p",null,"Pixel",(0,i.kt)("br",{parentName:"p"}),"\n","The smallest unit of information in a bitmap image\u2014essentially a dot of color."),(0,i.kt)("p",null,"Resolution",(0,i.kt)("br",{parentName:"p"}),"\n","The pixel dimensions of an image, which determines the level of fine-grained\ndetail contained in the image. Resolution is often expressed in terms of width\nand height in number of pixels."),(0,i.kt)("p",null,"RGB color",(0,i.kt)("br",{parentName:"p"}),"\n","A color scheme where each pixel's color is represented as a mixture of red,\ngreen, and blue color values."))}h.isMDXComponent=!0}}]);