"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[6766],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>u});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=r.createContext({}),o=function(e){var a=r.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):c(c({},a),e)),t},p=function(e){var a=o(e.components);return r.createElement(l.Provider,{value:a},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=o(t),m=n,u=h["".concat(l,".").concat(m)]||h[m]||d[m]||s;return t?r.createElement(u,c(c({ref:a},p),{},{components:t})):r.createElement(u,c({ref:a},p))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,c=new Array(s);c[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[h]="string"==typeof e?e:n,c[1]=i;for(var o=2;o<s;o++)c[o]=t[o];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81517:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>o});var r=t(87462),n=(t(67294),t(3905));const s={sidebar_position:3},c="Character classes",i={unversionedId:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes",id:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes",title:"Character classes",description:"You use character classes to specify a list of characters to match one position",source:"@site/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes.md",sourceDirName:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax",slug:"/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Characters, metacharacters, and metasequences",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/characters-metacharacters-and-metasequences"},next:{title:"Quantifiers",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers"}},l={},o=[{value:"Escape sequences in character classes",id:"escape-sequences-in-character-classes",level:4},{value:"Ranges of characters in character classes",id:"ranges-of-characters-in-character-classes",level:4},{value:"Negated character classes",id:"negated-character-classes",level:4}],p={toc:o},h="wrapper";function d(e){let{components:a,...t}=e;return(0,n.kt)(h,(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"character-classes"},"Character classes"),(0,n.kt)("p",null,"You use character classes to specify a list of characters to match one position\nin the regular expression. You define character classes with square brackets (\n",(0,n.kt)("inlineCode",{parentName:"p"},"[")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"]"),"). For example, the following regular expression defines a character\nclass that matches ",(0,n.kt)("inlineCode",{parentName:"p"},"bag"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"beg"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"big"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"bog"),", or ",(0,n.kt)("inlineCode",{parentName:"p"},"bug"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"/b[aeiou]g/\n")),(0,n.kt)("h4",{id:"escape-sequences-in-character-classes"},"Escape sequences in character classes"),(0,n.kt)("p",null,"Most metacharacters and metasequences that normally have special meanings in a\nregular expression ",(0,n.kt)("em",{parentName:"p"},"do not")," have those same meanings inside a character class.\nFor example, in a regular expression, the asterisk is used for repetition, but\nthis is not the case when the asterisk appears in a character class. The\nfollowing character class matches the asterisk literally, along with any of the\nother characters listed:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"/[abc*123]/\n")),(0,n.kt)("p",null,"However, the three characters listed in the following table do function as\nmetacharacters, with special meaning, in character classes:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Metacharacter"),(0,n.kt)("th",{parentName:"tr",align:null},"Meaning in character classes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"]")),(0,n.kt)("td",{parentName:"tr",align:null},"Defines the end of the character class.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"-")),(0,n.kt)("td",{parentName:"tr",align:null},'Defines a range of characters (see the following section "Ranges of characters in character classes").')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"\\")),(0,n.kt)("td",{parentName:"tr",align:null},"Defines metasequences and undoes the special meaning of metacharacters.")))),(0,n.kt)("p",null,"For any of these characters to be recognized as literal characters (without the\nspecial metacharacter meaning), you must precede the character with the\nbackslash escape character. For example, the following regular expression\nincludes a character class that matches any one of four symbols (",(0,n.kt)("inlineCode",{parentName:"p"},"$"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"\\"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"]"),",\nor ",(0,n.kt)("inlineCode",{parentName:"p"},"-"),"):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"/[$\\\\\\]\\-]/\n")),(0,n.kt)("p",null,"In addition to the metacharacters that retain their special meanings, the\nfollowing metasequences function as metasequences within character classes:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Metasequence"),(0,n.kt)("th",{parentName:"tr",align:null},"Meaning in character classes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"\\n")),(0,n.kt)("td",{parentName:"tr",align:null},"Matches a newline character.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"\\r")),(0,n.kt)("td",{parentName:"tr",align:null},"Matches a return character.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"\\t")),(0,n.kt)("td",{parentName:"tr",align:null},"Matches a tab character.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"\\u")," ",(0,n.kt)("inlineCode",{parentName:"td"},"nnnn")),(0,n.kt)("td",{parentName:"tr",align:null},"Matches the character with the specified Unicode code point value (as defined by the hexadecimal number ",(0,n.kt)("em",{parentName:"td"},"nnnn"),").")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"\\\\x")," ",(0,n.kt)("inlineCode",{parentName:"td"},"nn")),(0,n.kt)("td",{parentName:"tr",align:null},"Matches the character with the specified ASCII value (as defined by the hexadecimal number ",(0,n.kt)("em",{parentName:"td"},"nn"),").")))),(0,n.kt)("p",null,"Other regular expression metasequences and metacharacters are treated as normal\ncharacters within a character class."),(0,n.kt)("h4",{id:"ranges-of-characters-in-character-classes"},"Ranges of characters in character classes"),(0,n.kt)("p",null,"Use the hyphen to specify a range of characters, such as ",(0,n.kt)("inlineCode",{parentName:"p"},"A-Z"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"a-z"),", or ",(0,n.kt)("inlineCode",{parentName:"p"},"0-9"),".\nThese characters must constitute a valid range in the character set. For\nexample, the following character class matches any one of the characters in the\nrange ",(0,n.kt)("inlineCode",{parentName:"p"},"a-z")," or any digit:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"/[a-z0-9]/\n")),(0,n.kt)("p",null,"You can also use the ",(0,n.kt)("inlineCode",{parentName:"p"},"\\\\x")," ",(0,n.kt)("em",{parentName:"p"},"nn")," ASCII character code to specify a range by ASCII\nvalue. For example, the following character class matches any character from a\nset of extended ASCII characters (such as ",(0,n.kt)("inlineCode",{parentName:"p"},"\xe9")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"\xea"),"):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\\\\x\n")),(0,n.kt)("h4",{id:"negated-character-classes"},"Negated character classes"),(0,n.kt)("p",null,"When you use a caret (",(0,n.kt)("inlineCode",{parentName:"p"},"^"),") character at the beginning of a character class, it\nnegates that class\u2014any character not listed is considered a match. The following\ncharacter class matches any character ",(0,n.kt)("em",{parentName:"p"},"except")," for a lowercase letter ( ",(0,n.kt)("inlineCode",{parentName:"p"},"az")," \u2013)\nor a digit:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"/[^a-z0-9]/\n")),(0,n.kt)("p",null,"You must type the caret (",(0,n.kt)("inlineCode",{parentName:"p"},"^"),") character at the ",(0,n.kt)("em",{parentName:"p"},"beginning")," of a character class\nto indicate negation. Otherwise, you are simply adding the caret character to\nthe characters in the character class. For example, the following character\nclass matches any one of a number of symbol characters, including the caret:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"/[!.,#+*%$&^]/\n")))}d.isMDXComponent=!0}}]);