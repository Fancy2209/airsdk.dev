"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[23039],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),y=a,d=p["".concat(s,".").concat(y)]||p[y]||m[y]||o;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},21599:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:5},i="Formatting currency values",c={unversionedId:"development/internationalizing-applications/internationalizing-applications/formatting-currency-values",id:"development/internationalizing-applications/internationalizing-applications/formatting-currency-values",title:"Formatting currency values",description:"The display formats of currency values vary as much as number formats do. For",source:"@site/docs/development/internationalizing-applications/internationalizing-applications/formatting-currency-values.md",sourceDirName:"development/internationalizing-applications/internationalizing-applications",slug:"/development/internationalizing-applications/internationalizing-applications/formatting-currency-values",permalink:"/docs/development/internationalizing-applications/internationalizing-applications/formatting-currency-values",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/internationalizing-applications/internationalizing-applications/formatting-currency-values.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"mainSidebar",previous:{title:"Formatting numbers",permalink:"/docs/development/internationalizing-applications/internationalizing-applications/formatting-numbers"},next:{title:"Formatting dates and times",permalink:"/docs/development/internationalizing-applications/internationalizing-applications/formatting-dates-and-times"}},s={},l=[{value:"Using the CurrencyFormatter class",id:"using-the-currencyformatter-class",level:2},{value:"Parsing strings that contain currency values",id:"parsing-strings-that-contain-currency-values",level:2}],u={toc:l},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"formatting-currency-values"},"Formatting currency values"),(0,a.kt)("p",null,"The display formats of currency values vary as much as number formats do. For\nexample, here is how the US dollar value \\$123456.78 is formatted for certain\nlocales:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Locale"),(0,a.kt)("th",{parentName:"tr",align:null},"Number Format"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"en-US (English, USA)"),(0,a.kt)("td",{parentName:"tr",align:null},"\\$123,456.78")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"de-DE (German, Germany)"),(0,a.kt)("td",{parentName:"tr",align:null},"123.456,78 \\$")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"en-IN (English, India)"),(0,a.kt)("td",{parentName:"tr",align:null},"\\$ 1,23,456.78")))),(0,a.kt)("p",null,"Currency formatting involves all the same factors as number formatting, plus\nthese additional factors:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Currency ISO code. The three letter ISO 4217 currency code for the actual\nlocale being used, such as USD or EUR.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Currency symbol. The currency symbol or string for the actual locale being\nused, such as \\$ or \u20ac.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Negative currency format. Defines the location of the currency symbol and the\nnegative symbol or parentheses in relation to the numeric portion of the\ncurrency amount.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Positive currency format. Defines the location of currency symbol relative to\nthe numeric portion of the currency amount."))),(0,a.kt)("h2",{id:"using-the-currencyformatter-class"},"Using the CurrencyFormatter class"),(0,a.kt)("p",null,"The CurrencyFormatter class formats numeric values into strings that contain\ncurrency strings and formatted numbers, according to the conventions of a\nspecific locale."),(0,a.kt)("p",null,"When you instantiate a new CurrencyFormatter object, it sets its currency to the\ndefault currency for the given locale."),(0,a.kt)("p",null,"The following example shows that a CurrencyFormatter object created using a\nGerman locale assumes that currency amounts are in Euros:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var cf:CurrencyFormatter = new CurrencyFormatter( "de-DE" );\ntrace(cf.format(1234567.89)); // 1.234.567,89 EUR\n')),(0,a.kt)("p",null,"In most cases, do not rely on the default currency for a locale. If the user's\ndefault locale is not supported, then the CurrencyFormatter class assigns a\nfallback locale. The fallback locale can have a different default currency. In\naddition, you normally want the currency formats to look correct to your user,\neven if the amounts are not in the user's local currency. For example, a\nCanadian user can want to see a German company's prices in Euros, but formatted\nin the Canadian style."),(0,a.kt)("p",null,"The CurrencyFormatter.setCurrency() method specifies the exact currency string\nand currency symbol to use."),(0,a.kt)("p",null,"The following example shows currency amounts in Euros to users in the French\npart of Canada:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var cf:CurrencyFormatter = new CurrencyFormatter( "fr-CA" );\ncf.setCurrency("EUR", "\u20ac");\ntrace(cf.format(1234567.89)); // 1.234.567,89 EUR\n')),(0,a.kt)("p",null,"The setCurrency() method can also be used to reduce confusion by setting\nunambiguous currency symbols. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'cf.setCurrency("USD","US$");\n')),(0,a.kt)("p",null,"By default the format() method displays a three character ISO 4217 currency code\ninstead of the currency symbol. ISO 4217 codes are unambiguous and do not\nrequire localization. However many users prefer to see currency symbols rather\nthan ISO codes."),(0,a.kt)("p",null,"The CurrencyFormatter class can help you decide which symbol a formatted\ncurrency string uses: a currency symbol, like a dollar sign or Euro sign, or a\nthree character ISO currency string, such as USD or EUR. For example, an amount\nin Canadian dollars could be displayed as \\$200 for a user in Canada. For a user\nin the United States, however, it could be displayed as CAD 200. Use the method\nformattingWithCurrencySymbolIsSafe() to determine whether the amount's currency\nsymbol would be ambiguous or incorrect given the user's locale settings."),(0,a.kt)("p",null,"The following example formats a value in Euros into a format for the en-US\nlocale. Depending on the user's locale, the output string uses either the ISO\ncurrency code or the currency symbol."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var cf:CurrencyFormatter = new CurrencyFormatter( "en-CA");\n\nif (cf.formattingWithCurrencySymbolIsSafe("USD"))\n{\n    trace(cf.format(1234567.89, true)); // $1,234,567.89\n}\nelse\n{\n    cf.setCurrency("USD", "$");\n    trace(cf.format(1234567.89)); // USD1,234,567.89\n}\n')),(0,a.kt)("h2",{id:"parsing-strings-that-contain-currency-values"},"Parsing strings that contain currency values"),(0,a.kt)("p",null,"The CurrencyFormatter class can also extract a currency amount and a currency\nstring from an input string that conforms to locale-specific formatting\nrequirements. The CurrencyFormatter.parse() method stores the parsed amount and\ncurrency string in a CurrencyParseResult object, as shown here:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var cf:CurrencyFormatter = new CurrencyFormatter( "en-US" );\nvar inputCurrencyString:String = "(GBP 123,56,7.890)";\nvar parseResult:CurrencyParseResult = cf.parse(inputCurrencyString);\ntrace("parsed amount: " + parseResult.value); // -1234567.89\ntrace("currencyString: " + parseResult.currencyString ); // GBP\n')),(0,a.kt)("p",null,"The currency string portion of the input string can contain a currency symbol, a\ncurrency ISO code, and additional text characters. The positions of the currency\nstring, the negative number indicator, and the numeric value, match the formats\nspecified by the negativeCurrencyFormat and positiveCurrencyFormat properties.\nFor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var cf:CurrencyFormatter = new CurrencyFormatter( "en-US" );\nvar inputCurrencyString:String = "Total $-123,56,7.890";\nvar parseResult:CurrencyParseResult = cf.parse(inputCurrencyString);\ntrace("status: " + cf.lastOperationStatus ); // parseError\ntrace("parsed amount: " + parseResult.value); // NaN\ntrace("currencyString: " + parseResult.currencyString ); //\ncf.negativeCurrencyFormat = 2;\nparseResult = cf.parse(inputCurrencyString);\ntrace("status: " + cf.lastOperationStatus ); // noError\ntrace("parsed amount: " + parseResult.value); // -123567.89\ntrace("currencyString: " + parseResult.currencyString ); // Total $\n')),(0,a.kt)("p",null,"In this example, the input string has a currency string followed by a minus sign\nand a number. However the default negativeCurrencyFormat value for the en-US\nlocale specifies that the negative indicator comes first. As a result, the\nparse() method generates an error and the parsed value is NaN."),(0,a.kt)("p",null,"After it sets the negativeCurrencyFormat to 2, which specifies that the currency\nstring comes first, the parse() method succeeds."))}m.isMDXComponent=!0}}]);