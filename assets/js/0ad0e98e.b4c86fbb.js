"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[45757],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,h=p["".concat(l,".").concat(u)]||p[u]||d[u]||r;return n?i.createElement(h,o(o({ref:t},m),{},{components:n})):i.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},59353:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(87462),a=(n(67294),n(3905));const r={sidebar_position:2},o="Controlling time intervals",s={unversionedId:"development/core-actionscript-classes/working-with-dates-and-times/controlling-time-intervals",id:"development/core-actionscript-classes/working-with-dates-and-times/controlling-time-intervals",title:"Controlling time intervals",description:"When you develop applications using Adobe Flash CS4 Professional, you have",source:"@site/docs/development/core-actionscript-classes/working-with-dates-and-times/controlling-time-intervals.md",sourceDirName:"development/core-actionscript-classes/working-with-dates-and-times",slug:"/development/core-actionscript-classes/working-with-dates-and-times/controlling-time-intervals",permalink:"/docs/development/core-actionscript-classes/working-with-dates-and-times/controlling-time-intervals",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-dates-and-times/controlling-time-intervals.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Managing calendar dates and times",permalink:"/docs/development/core-actionscript-classes/working-with-dates-and-times/managing-calendar-dates-and-times"},next:{title:"Date and time example: Simple analog clock",permalink:"/docs/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock"}},l={},c=[{value:"Loops versus timers",id:"loops-versus-timers",level:2},{value:"The Timer class",id:"the-timer-class",level:2},{value:"Timing functions in the flash.utils package",id:"timing-functions-in-the-flashutils-package",level:2}],m={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"controlling-time-intervals"},"Controlling time intervals"),(0,a.kt)("p",null,"When you develop applications using Adobe Flash CS4 Professional, you have\naccess to the timeline, which provides a steady, frame-by-frame progression\nthrough your application. In pure ActionScript projects, however, you must rely\non other timing mechanisms."),(0,a.kt)("h2",{id:"loops-versus-timers"},"Loops versus timers"),(0,a.kt)("p",null,"In some programming languages, you must devise your own timing schemes using\nloop statements like ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"do..while.")),(0,a.kt)("p",null,"Loop statements generally execute as fast as the local machine allows, which\nmeans that the application runs faster on some machines and slower on others. If\nyour application needs a consistent timing interval, you need to tie it to an\nactual calendar or clock time. Many applications, such as games, animations, and\nreal-time controllers, need regular, time-driven ticking mechanisms that are\nconsistent from machine to machine."),(0,a.kt)("p",null,"The ActionScript 3.0 Timer class provides a powerful solution. Using the\nActionScript 3.0 event model, the Timer class dispatches timer events whenever a\nspecified time interval is reached."),(0,a.kt)("h2",{id:"the-timer-class"},"The Timer class"),(0,a.kt)("p",null,"The preferred way to handle timing functions in ActionScript 3.0 is to use the\nTimer class (flash.utils.Timer), which can be used to dispatch events whenever\nan interval is reached."),(0,a.kt)("p",null,"To start a timer, you first create an instance of the Timer class, telling it\nhow often to generate a timer event and how many times to do so before stopping."),(0,a.kt)("p",null,"For example, the following code creates a Timer instance that dispatches an\nevent every second and continues for 60 seconds:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"var oneMinuteTimer:Timer = new Timer(1000, 60);\n")),(0,a.kt)("p",null,"The Timer object dispatches a TimerEvent object each time the given interval is\nreached. A TimerEvent object's event type is ",(0,a.kt)("inlineCode",{parentName:"p"},"timer")," (defined by the constant\n",(0,a.kt)("inlineCode",{parentName:"p"},"TimerEvent.TIMER"),"). A TimerEvent object contains the same properties as a\nstandard Event object."),(0,a.kt)("p",null,"If the Timer instance is set to a fixed number of intervals, it will also\ndispatch a ",(0,a.kt)("inlineCode",{parentName:"p"},"timerComplete")," event (defined by the constant\n",(0,a.kt)("inlineCode",{parentName:"p"},"TimerEvent.TIMER_COMPLETE"),") when it reaches the final interval."),(0,a.kt)("p",null,"Here is a small sample application showing the Timer class in action:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'package  \n{ \n    import flash.display.Sprite; \n    import flash.events.TimerEvent; \n    import flash.utils.Timer; \n \n    public class ShortTimer extends Sprite \n    { \n        public function ShortTimer()  \n        { \n            // creates a new five-second Timer \n            var minuteTimer:Timer = new Timer(1000, 5); \n             \n            // designates listeners for the interval and completion events \n            minuteTimer.addEventListener(TimerEvent.TIMER, onTick); \n            minuteTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete); \n             \n            // starts the timer ticking \n            minuteTimer.start(); \n        } \n \n        public function onTick(event:TimerEvent):void  \n        { \n            // displays the tick count so far \n            // The target of this event is the Timer instance itself. \n            trace("tick " + event.target.currentCount); \n        } \n \n        public function onTimerComplete(event:TimerEvent):void \n        { \n            trace("Time\'s Up!"); \n        } \n    } \n}\n')),(0,a.kt)("p",null,"When the ShortTimer class is created, it creates a Timer instance that will tick\nonce per second for five seconds. Then it adds two listeners to the timer: one\nthat listens to each tick, and one that listens for the ",(0,a.kt)("inlineCode",{parentName:"p"},"timerComplete")," event."),(0,a.kt)("p",null,"Next, it starts the timer ticking, and from that point forward, the ",(0,a.kt)("inlineCode",{parentName:"p"},"onTick()"),"\nmethod executes at one-second intervals."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onTick()")," method simply displays the current tick count. After five seconds\nhave passed, the ",(0,a.kt)("inlineCode",{parentName:"p"},"onTimerComplete()")," method executes, telling you that the time\nis up."),(0,a.kt)("p",null,"When you run this sample, you should see the following lines appear in your\nconsole or trace window at the rate of one line per second:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"tick 1 \ntick 2 \ntick 3 \ntick 4 \ntick 5 \nTime's Up!\n")),(0,a.kt)("h2",{id:"timing-functions-in-the-flashutils-package"},"Timing functions in the flash.utils package"),(0,a.kt)("p",null,"ActionScript 3.0 contains a number of timing functions similar to those that\nwere available in ActionScript 2.0. These functions are provided as\npackage-level functions in the flash.utils package, and they operate just as\nthey did in ActionScript 2.0."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Function"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"clearInterval(id:uint):void")),(0,a.kt)("td",{parentName:"tr",align:null},"Cancels a specified ",(0,a.kt)("inlineCode",{parentName:"td"},"setInterval()")," call.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"clearTimeout(id:uint):void")),(0,a.kt)("td",{parentName:"tr",align:null},"Cancels a specified ",(0,a.kt)("inlineCode",{parentName:"td"},"setTimeout()")," call.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"getTimer():int")),(0,a.kt)("td",{parentName:"tr",align:null},"Returns the number of milliseconds that have elapsed since Adobe\xae Flash\xae Player or Adobe\xae AIR\u2122 was initialized.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"setInterval(closure:Function, delay:Number, ... arguments):uint")),(0,a.kt)("td",{parentName:"tr",align:null},"Runs a function at a specified interval (in milliseconds).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"setTimeout(closure:Function, delay:Number, ... arguments):uint")),(0,a.kt)("td",{parentName:"tr",align:null},"Runs a specified function after a specified delay (in milliseconds).")))),(0,a.kt)("p",null,"These functions remain in ActionScript 3.0 for backward compatibility. Adobe\ndoes not recommend that you use them in new ActionScript 3.0 applications. In\ngeneral, it is easier and more efficient to use the Timer class in your\napplications."))}d.isMDXComponent=!0}}]);