"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[39002],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=s(n),v=o,b=c["".concat(l,".").concat(v)]||c[v]||u[v]||a;return n?r.createElement(b,i(i({ref:t},p),{},{components:n})):r.createElement(b,i({ref:t},p))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=v;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d[c]="string"==typeof e?e:o,i[1]=d;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},61682:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:1},i="Controlling virtual keyboard behavior",d={unversionedId:"development/user-interaction/keyboard-input/virtual-keyboards/controlling-virtual-keyboard-behavior",id:"development/user-interaction/keyboard-input/virtual-keyboards/controlling-virtual-keyboard-behavior",title:"Controlling virtual keyboard behavior",description:"The runtime automatically opens the virtual keyboard when the user taps inside a",source:"@site/docs/development/user-interaction/keyboard-input/virtual-keyboards/controlling-virtual-keyboard-behavior.md",sourceDirName:"development/user-interaction/keyboard-input/virtual-keyboards",slug:"/development/user-interaction/keyboard-input/virtual-keyboards/controlling-virtual-keyboard-behavior",permalink:"/docs/development/user-interaction/keyboard-input/virtual-keyboards/controlling-virtual-keyboard-behavior",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/keyboard-input/virtual-keyboards/controlling-virtual-keyboard-behavior.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mainSidebar",previous:{title:"Virtual keyboards",permalink:"/docs/development/user-interaction/keyboard-input/virtual-keyboards/"},next:{title:"Adding virtual keyboard support for interactive objects",permalink:"/docs/development/user-interaction/keyboard-input/virtual-keyboards/adding-virtual-keyboard-support-for-interactive-objects"}},l={},s=[],p={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controlling-virtual-keyboard-behavior"},"Controlling virtual keyboard behavior"),(0,o.kt)("p",null,"The runtime automatically opens the virtual keyboard when the user taps inside a\ntext field or a specially configured interactive object. When the keyboard\nopens, the runtime follows the native platform conventions in panning and\nresizing the application content so that the user can see the text as they type."),(0,o.kt)("p",null,"When the keyboard opens, the focused object dispatches the following events in\nsequence:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"softKeyboardActivating")," event \u2014 dispatched immediately before the keyboard\nbegins to rise over the stage. If you call the ",(0,o.kt)("inlineCode",{parentName:"p"},"preventDefault()")," method of the\ndispatched event object, the virtual keyboard does not open."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"softKeyboardActivate")," event \u2014 dispatched after ",(0,o.kt)("inlineCode",{parentName:"p"},"softKeyboardActivating")," event\nhandling has completed. When the focused object dispatches this event, the\n",(0,o.kt)("inlineCode",{parentName:"p"},"softKeyboardRect")," property of the Stage object has been updated to reflect the\narea of the stage obscured by the virtual keyboard. This event cannot be\ncanceled."),(0,o.kt)("p",null,"Note: If the keyboard changes size, for example, when the user changes the\nkeyboard type, the focused object dispatches a second softKeyboardActivate\nevent."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"softKeyboardDeactivate")," event \u2014 dispatched when the virtual keyboard closes for\nany reason. This event cannot be canceled."),(0,o.kt)("p",null,"The following example adds two TextField objects on the stage. The upper\nTextField prevents the keyboard from raising when you tap the field and closes\nit if it is already raised. The lower TextField demonstrates the default\nbehavior. The example reports the soft keyboard events dispatched by both text\nfields."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'package\n{\n    import flash.display.Sprite;\n    import flash.text.TextField;\n    import flash.text.TextFieldType;\n    import flash.events.SoftKeyboardEvent;\n    public class SoftKeyboardEventExample extends Sprite\n    {\n        private var tf1:TextField = new TextField();\n        private var tf2:TextField = new TextField();\n\n        public function SoftKeyboardEventExample()\n        {\n            tf1.width = this.stage.stageWidth;\n            tf1.type = TextFieldType.INPUT;\n            tf1.border = true;\n            this.addChild( tf1 );\n\n            tf1.addEventListener( SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING, preventSoftKe    yboard );\n            tf1.addEventListener( SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATE, preventSoftKe    yboard );\n            tf1.addEventListener( SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE, preventSoftKeyboard );\n\n            tf2.border = true;\n            tf2.type = TextFieldType.INPUT;\n            tf2.width = this.stage.stageWidth;\n            tf2.y = tf1.y + tf1.height + 30;\n            this.addChild( tf2 );\n\n            tf2.addEventListener( SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING, allowSoftKeyboard );\n            tf2.addEventListener( SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATE, allowSoftKeyboard );\n            tf2.addEventListener( SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE, allowSoftKeyboard);\n        }\n\n        private function preventSoftKeyboard( event:SoftKeyboardEvent ):void\n        {\n                event.preventDefault();\n                this.stage.focus = null; //close the keyboard, if raised\n                trace( "tf1 dispatched: " + event.type + " -- " + event.triggerType );\n        }\n        private function allowSoftKeyboard( event:SoftKeyboardEvent )    :void\n        {\n                trace( "tf2 dispatched: " + event.type + " -- " + event.triggerType );\n        }\n    }\n}\n')))}u.isMDXComponent=!0}}]);