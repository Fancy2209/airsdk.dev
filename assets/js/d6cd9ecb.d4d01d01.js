"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[6890],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(n),u=i,h=c["".concat(l,".").concat(u)]||c[u]||d[u]||r;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:i,o[1]=p;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},83567:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={},o="Scrolling bitmaps",p={unversionedId:"development/display/working-with-bitmaps/scrolling-bitmaps",id:"development/display/working-with-bitmaps/scrolling-bitmaps",title:"Scrolling bitmaps",description:"Imagine you have created a street mapping application where each time the user",source:"@site/docs/development/display/working-with-bitmaps/scrolling-bitmaps.md",sourceDirName:"development/display/working-with-bitmaps",slug:"/development/display/working-with-bitmaps/scrolling-bitmaps",permalink:"/docs/development/display/working-with-bitmaps/scrolling-bitmaps",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-bitmaps/scrolling-bitmaps.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Manipulating pixels",permalink:"/docs/development/display/working-with-bitmaps/manipulating-pixels"},next:{title:"Taking advantage of mipmapping",permalink:"/docs/development/display/working-with-bitmaps/taking-advantage-of-mipmapping"}},l={},s=[],m={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"scrolling-bitmaps"},"Scrolling bitmaps"),(0,i.kt)("p",null,"Imagine you have created a street mapping application where each time the user\nmoves the map you are required to update the view (even if the map has been\nmoved by just a few pixels)."),(0,i.kt)("p",null,"One way to create this functionality would be to re-render a new image\ncontaining the updated map view each time the user moves the map. Alternatively,\nyou could create a large single image and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"scroll()")," method."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"scroll()")," method copies an on-screen bitmap and then pastes it to a new\noffset location\u2014specified by (",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),") parameters. If a portion of the bitmap\nhappens to reside off-stage, this gives the effect that the image has shifted.\nWhen combined with a timer function (or an ",(0,i.kt)("inlineCode",{parentName:"p"},"enterFrame")," event), you can make the\nimage appear to be animating or scrolling."),(0,i.kt)("p",null,"The following example takes the previous perlin noise example and generates a\nlarger bitmap image (three-fourths of which is rendered off-stage). The\n",(0,i.kt)("inlineCode",{parentName:"p"},"scroll()")," method is then applied, along with an ",(0,i.kt)("inlineCode",{parentName:"p"},"enterFrame")," event listener\nthat offsets the image by one pixel in a diagonally downward direction. This\nmethod is called each time the frame is entered and as a result, the off screen\nportions of the image are rendered to the Stage as the image scrolls down."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"import flash.display.Bitmap;\nimport flash.display.BitmapData;\n\nvar myBitmapDataObject:BitmapData = new BitmapData(1000, 1000, false, 0x00FF0000);\nvar seed:Number = Math.floor(Math.random() * 100);\nvar channels:uint = BitmapDataChannel.GREEN | BitmapDataChannel.BLUE;\nmyBitmapDataObject.perlinNoise(100, 80, 6, seed, false, true, channels, false, null);\n\nvar myBitmap:Bitmap = new Bitmap(myBitmapDataObject);\nmyBitmap.x = -750;\nmyBitmap.y = -750;\naddChild(myBitmap);\n\naddEventListener(Event.ENTER_FRAME, scrollBitmap);\n\nfunction scrollBitmap(event:Event):void\n{\n    myBitmapDataObject.scroll(1, 1);\n}\n")))}d.isMDXComponent=!0}}]);