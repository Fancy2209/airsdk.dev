"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[20637],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),l=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(m.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(a),c=r,h=d["".concat(m,".").concat(c)]||d[c]||u[c]||s;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=c;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},76212:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const s={sidebar_position:7.3},i="Using parameters in statements",o={unversionedId:"development/files-and-data/working-with-local-sql-databases-in-air/using-parameters-in-statements",id:"development/files-and-data/working-with-local-sql-databases-in-air/using-parameters-in-statements",title:"Using parameters in statements",description:"Using SQL statement parameters allows you to create a reusable SQL statement.",source:"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-parameters-in-statements.md",sourceDirName:"development/files-and-data/working-with-local-sql-databases-in-air",slug:"/development/files-and-data/working-with-local-sql-databases-in-air/using-parameters-in-statements",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-parameters-in-statements",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-parameters-in-statements.md",tags:[],version:"current",sidebarPosition:7.3,frontMatter:{sidebar_position:7.3},sidebar:"mainSidebar",previous:{title:"Working with SQL statements",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-sql-statements"},next:{title:"Retrieving data from a database",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/retrieving-data-from-a-database"}},m={},l=[{value:"Understanding statement parameters",id:"understanding-statement-parameters",level:2},{value:"Using named parameters",id:"using-named-parameters",level:2},{value:"Using unnamed parameters",id:"using-unnamed-parameters",level:2},{value:"Benefits of using parameters",id:"benefits-of-using-parameters",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-parameters-in-statements"},"Using parameters in statements"),(0,r.kt)("p",null,"Using SQL statement parameters allows you to create a reusable SQL statement.\nWhen you use statement parameters, values within the statement can change (such\nas values being added in an ",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT")," statement) but the basic statement text\nremains unchanged. Consequently, using parameters provides performance benefits\nand makes it easier to code an application."),(0,r.kt)("h2",{id:"understanding-statement-parameters"},"Understanding statement parameters"),(0,r.kt)("p",null,"Frequently an application uses a single SQL statement multiple times in an\napplication, with slight variation. For example, consider an inventory-tracking\napplication where a user can add new inventory items to the database. The\napplication code that adds an inventory item to the database executes a SQL\n",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT")," statement that actually adds the data to the database. However, each\ntime the statement is executed there is a slight variation. Specifically, the\nactual values that are inserted in the table are different because they are\nspecific to the inventory item being added."),(0,r.kt)("p",null,"In cases where you have a SQL statement that's used multiple times with\ndifferent values in the statement, the best approach is to use a SQL statement\nthat includes parameters rather than literal values in the SQL text. A parameter\nis a placeholder in the statement text that is replaced with an actual value\neach time the statement is executed. To use parameters in a SQL statement, you\ncreate the\n",(0,r.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html"},"SQLStatement"),"\ninstance as usual. For the actual SQL statement assigned to the ",(0,r.kt)("inlineCode",{parentName:"p"},"text")," property,\nuse parameter placeholders rather than literal values. You then define the value\nfor each parameter by setting the value of an element in the SQLStatement\ninstance's ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," property. The ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," property is an associative\narray, so you set a particular value using the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"statement.parameters[parameter_identifier] = value;\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"parameter_identifier")," is a string if you're using a named parameter, or an\ninteger index if you're using an unnamed parameter."),(0,r.kt)("h2",{id:"using-named-parameters"},"Using named parameters"),(0,r.kt)("p",null,'A parameter can be a named parameter. A named parameter has a specific name that\nthe database uses to match the parameter value to its placeholder location in\nthe statement text. A parameter name consists of the ":" or "@" character\nfollowed by a name, as in the following examples:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},":itemName\n@firstName\n")),(0,r.kt)("p",null,"The following code listing demonstrates the use of named parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var sql:String =\n    "INSERT INTO inventoryItems (name, productCode)" +\n    "VALUES (:name, :productCode)";\n\nvar addItemStmt:SQLStatement = new SQLStatement();\naddItemStmt.sqlConnection = conn;\naddItemStmt.text = sql;\n\n// set parameter values\naddItemStmt.parameters[":name"] = "Item name";\naddItemStmt.parameters[":productCode"] = "12345";\n\naddItemStmt.execute();\n')),(0,r.kt)("h2",{id:"using-unnamed-parameters"},"Using unnamed parameters"),(0,r.kt)("p",null,'As an alternative to using named parameters, you can also use unnamed\nparameters. To use an unnamed parameter you denote a parameter in a SQL\nstatement using a "?" character. Each parameter is assigned a numeric index,\naccording to the order of the parameters in the statement, starting with index 0\nfor the first parameter. The following example demonstrates a version of the\nprevious example, using unnamed parameters:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var sql:String =\n    "INSERT INTO inventoryItems (name, productCode)" +\n    "VALUES (?, ?)";\n\nvar addItemStmt:SQLStatement = new SQLStatement();\naddItemStmt.sqlConnection = conn;\naddItemStmt.text = sql;\n\n// set parameter values\naddItemStmt.parameters[0] = "Item name";\naddItemStmt.parameters[1] = "12345";\n\naddItemStmt.execute();\n')),(0,r.kt)("h2",{id:"benefits-of-using-parameters"},"Benefits of using parameters"),(0,r.kt)("p",null,"Using parameters in a SQL statement provides several benefits:"),(0,r.kt)("p",null,"Better performance",(0,r.kt)("br",{parentName:"p"}),"\n","A SQLStatement instance that uses parameters can execute more efficiently\ncompared to one that dynamically creates the SQL text each time it executes. The\nperformance improvement is because the statement is prepared a single time and\ncan then be executed multiple times using different parameter values, without\nneeding to recompile the SQL statement."),(0,r.kt)("p",null,"Explicit data typing",(0,r.kt)("br",{parentName:"p"}),"\n","Parameters are used to allow for typed substitution of values that are unknown\nat the time the SQL statement is constructed. The use of parameters is the only\nway to guarantee the storage class for a value passed in to the database. When\nparameters are not used, the runtime attempts to convert all values from their\ntext representation to a storage class based on the associated column's type\naffinity."),(0,r.kt)("p",null,"For more information on storage classes and column affinity, see\n",(0,r.kt)("a",{parentName:"p",href:"/docs/development/appendixes/sql-support-in-local-databases/data-type-support"},"Data type support"),"."),(0,r.kt)("p",null,"Greater security",(0,r.kt)("br",{parentName:"p"}),"\n","The use of parameters helps prevent a malicious technique known as a SQL\ninjection attack. In a SQL injection attack, a user enters SQL code in a\nuser-accessible location (for example, a data entry field). If application code\nconstructs a SQL statement by directly concatenating user input into the SQL\ntext, the user-entered SQL code is executed against the database. The following\nlisting shows an example of concatenating user input into SQL text. ",(0,r.kt)("strong",{parentName:"p"},"Do not use\nthis technique")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// assume the variables "username" and "password"\n// contain user-entered data\n\nvar sql:String =\n    "SELECT userId " +\n    "FROM users " +\n    "WHERE username = \'" + username + "\' " +\n    "    AND password = \'" + password + "\'";\n\nvar statement:SQLStatement = new SQLStatement();\nstatement.text = sql;\n')),(0,r.kt)("p",null,"Using statement parameters instead of concatenating user-entered values into a\nstatement's text prevents a SQL injection attack. SQL injection can't happen\nbecause the parameter values are treated explicitly as substituted values,\nrather than becoming part of the literal statement text. The following is the\nrecommended alternative to the previous listing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// assume the variables "username" and "password"\n// contain user-entered data\n\nvar sql:String =\n    "SELECT userId " +\n    "FROM users " +\n    "WHERE username = :username " +\n    "    AND password = :password";\n\nvar statement:SQLStatement = new SQLStatement();\nstatement.text = sql;\n\n// set parameter values\nstatement.parameters[":username"] = username;\nstatement.parameters[":password"] = password;\n')))}u.isMDXComponent=!0}}]);