"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[89165],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(g,s(s({ref:n},d),{},{components:t})):r.createElement(g,s({ref:n},d))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},96523:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const i={sidebar_position:3},s="Implementing the IURIDereferencer interface",o={unversionedId:"development/networking-and-communication/xml-signature-validation-in-air/implementing-the-iuridereferencer-interface",id:"development/networking-and-communication/xml-signature-validation-in-air/implementing-the-iuridereferencer-interface",title:"Implementing the IURIDereferencer interface",description:"To validate an XML signature, you must provide an implementation of the",source:"@site/docs/development/networking-and-communication/xml-signature-validation-in-air/implementing-the-iuridereferencer-interface.md",sourceDirName:"development/networking-and-communication/xml-signature-validation-in-air",slug:"/development/networking-and-communication/xml-signature-validation-in-air/implementing-the-iuridereferencer-interface",permalink:"/docs/development/networking-and-communication/xml-signature-validation-in-air/implementing-the-iuridereferencer-interface",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/networking-and-communication/xml-signature-validation-in-air/implementing-the-iuridereferencer-interface.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"About XML signatures",permalink:"/docs/development/networking-and-communication/xml-signature-validation-in-air/about-xml-signatures"},next:{title:"Client system interaction",permalink:"/docs/development/client-system-interaction/"}},l={},c=[{value:"Dereferencing URIs in enveloped signatures",id:"dereferencing-uris-in-enveloped-signatures",level:2},{value:"Dereferencing URIs in enveloping and detached signatures",id:"dereferencing-uris-in-enveloping-and-detached-signatures",level:2},{value:"Computing digest values for external resources",id:"computing-digest-values-for-external-resources",level:3},{value:"Dereferencing URIs in detached signatures referencing external data",id:"dereferencing-uris-in-detached-signatures-referencing-external-data",level:2}],d={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"implementing-the-iuridereferencer-interface"},"Implementing the IURIDereferencer interface"),(0,a.kt)("p",null,"To validate an XML signature, you must provide an implementation of the\nIURIDereferencer interface. The implementation is responsible for resolving the\nURIs within the Reference elements of an XML signature document and returning\nthe data so that the digest can be computed. The computed digest is compared\nwith the digest in the signature to determine if the referenced data has been\naltered since the signature was created."),(0,a.kt)("p",null,"Note: HTML-based AIR applications must import a SWF library containing an\nActionScript implementation in order to validate XML signatures. The\nIURIDereferencer interface cannot be implemented in JavaScript."),(0,a.kt)("p",null,"The IURIDerefencer interface has a single method, ",(0,a.kt)("inlineCode",{parentName:"p"},"dereference(uri:String)"),",\nthat must be implemented. The XMLSignatureValidator object calls this method for\neach reference in the signature. The method must return the data in a ByteArray\nobject."),(0,a.kt)("p",null,"In most cases, you will also need to add properties or methods that allow your\ndereferencer object to locate the referenced data. For example, if the signed\ndata is located in the same document as the signature, you could add a member\nvariable that provides a reference to the XML document. The ",(0,a.kt)("inlineCode",{parentName:"p"},"dereference()"),"\nmethod can then use this variable, along with the URI, to locate the referenced\ndata. Likewise, if the signed data is located in a directory of the local file\nsystem, the ",(0,a.kt)("inlineCode",{parentName:"p"},"dereference()")," method might need a property providing the path to\nthat directory in order to resolve the referenced files."),(0,a.kt)("p",null,"The XMLSignatureValidator relies entirely on the dereferencer for interpreting\nURI strings. The standard rules for dereferencing URIs are given in the section\n4.3.3 of the W3C Recommendation for XML Signature Syntax and Processing."),(0,a.kt)("h2",{id:"dereferencing-uris-in-enveloped-signatures"},"Dereferencing URIs in enveloped signatures"),(0,a.kt)("p",null,"When an enveloped XML signature is generated, the signature elements are\ninserted into the signed data. For example, if you signed the following message\nusing an enveloped signature structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<message>\n    <data>...</data>\n</message>\n")),(0,a.kt)("p",null,"The resulting signed document will look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<message>\n    <data>...</data>\n    <Signature xmlns="http://www.w3.org/2000/09/xmldsig#">\n        <SignedInfo>\n            <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>\n            <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>\n            <Reference URI="">\n                <Transforms>\n                    <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>\n                </Transforms>\n                <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>\n                <DigestValue>yv6...Z0Y=</DigestValue>\n            </Reference>\n        </SignedInfo>\n        <SignatureValue>cCY...LQ==</SignatureValue>\n        <KeyInfo>\n            <X509Data>\n                <X509Certificate>MII...4e</X509Certificate>\n            </X509Data>\n        </KeyInfo>\n    </Signature>\n</message>\n')),(0,a.kt)("p",null,"Notice that the signature contains a single Reference element with an empty\nstring as its URI. An empty string in this context refers to the root of the\ndocument."),(0,a.kt)("p",null,"Also notice that the transform algorithm specifies that an enveloped signature\ntransform has been applied. When an enveloped signature transform has been\napplied, the XMLSignatureValidator automatically removes the signature from the\ndocument before computing the digest. This means that the dereferencer does not\nneed to remove the Signature element when returning the data."),(0,a.kt)("p",null,"The following example illustrates a dereferencer for enveloped signatures:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package\n{\n    import flash.events.ErrorEvent;\n    import flash.events.EventDispatcher;\n    import flash.security.IURIDereferencer;\n    import flash.utils.ByteArray;\n    import flash.utils.IDataInput;\n\n    public class EnvelopedDereferencer\n        extends EventDispatcher implements IURIDereferencer\n    {\n        private var signedMessage:XML;\n\n        public function EnvelopedDereferencer( signedMessage:XML )\n        {\n            this.signedMessage = signedMessage;\n        }\n\n        public function dereference( uri:String ):IDataInput\n        {\n            try\n            {\n                if( uri.length != 0 )\n                {\n                    throw( new Error("Unsupported signature type.") );\n                }\n                var data:ByteArray = new ByteArray();\n                data.writeUTFBytes( signedMessage.toXMLString() );\n                data.position = 0;\n            }\n            catch (e:Error)\n                {\n                var error:ErrorEvent =\n                    new ErrorEvent("Ref error " + uri + " ", false, false, e.message);\n                this.dispatchEvent(error);\n                data = null;\n                throw new Error("Reference not resolvable: " + uri + ", " + e.message);\n            }\n            finally\n            {\n                return data;\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"This dereferencer class uses a constructor function with a parameter,\n",(0,a.kt)("inlineCode",{parentName:"p"},"signedMessage"),", to make the enveloped signature document available to the\n",(0,a.kt)("inlineCode",{parentName:"p"},"dereference()")," method. Since the reference in an enveloped signature always\nrefers to the root of the signed data, the ",(0,a.kt)("inlineCode",{parentName:"p"},"dereferencer()")," method writes the\ndocument into a byte array and returns it."),(0,a.kt)("h2",{id:"dereferencing-uris-in-enveloping-and-detached-signatures"},"Dereferencing URIs in enveloping and detached signatures"),(0,a.kt)("p",null,"When the signed data is located in the same document as the signature itself,\nthe URIs in the references typically use XPath or XPointer syntax to address the\nelements that are signed. The W3C Recommendation for XML Signature Syntax and\nProcessing only recommends this syntax, so you should base your implementation\non the signatures you expect to encounter (and add sufficient error checking to\ngracefully handle unsupported syntax)."),(0,a.kt)("p",null,'The signature of an AIR application is an example of an enveloping signature.\nThe files in the application are listed in a Manifest element. The Manifest\nelement is addressed in the Reference URI attribute using the string,\n"#PackageContents", which refers to the Id of the Manifest element:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<Signature xmlns="http://www.w3.org/2000/09/xmldsig#" Id="PackageSignature">\n    <SignedInfo>\n        <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>\n        <SignatureMethod Algorithm="http://www.w3.org/TR/xmldsig-core#rsa-sha1"/>\n        <Reference URI="#PackageContents">\n            <Transforms>\n                <Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>\n            </Transforms>\n            <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>\n            <DigestValue>ZMGqQdaRKQc1HirIRsDpeBDlaElS+pPotdziIAyAYDk=</DigestValue>\n        </Reference>\n    </SignedInfo>\n    <SignatureValue Id="PackageSignatureValue">cQK...7Zg==</SignatureValue>\n    <KeyInfo>\n        <X509Data>\n            <X509Certificate>MII...T4e</X509Certificate>\n        </X509Data>\n    </KeyInfo>\n    <Object>\n    <Manifest Id="PackageContents">\n        <Reference URI="mimetype">\n            <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256">\n            </DigestMethod>\n            <DigestValue>0/oCb84THKMagtI0Dy0KogEu92TegdesqRr/clXct1c=</DigestValue>\n        </Reference>\n        <Reference URI="META-INF/AIR/application.xml">\n            <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256">\n            </DigestMethod>\n            <DigestValue>P9MqtqSdqcqnFgeoHCJysLQu4PmbUW2JdAnc1WLq8h4=</DigestValue>\n        </Reference>\n        <Reference URI="XMLSignatureValidation.swf">\n            <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256">\n            </DigestMethod>\n            <DigestValue>OliRHRAgc9qt3Dk0m0Bi53Ur5ur3fAweIFwju74rFgE=</DigestValue>\n        </Reference>\n    </Manifest>\n    </Object>\n</Signature>\n')),(0,a.kt)("p",null,"A dereferencer for validating this signature must take the URI string\ncontaining, ",(0,a.kt)("inlineCode",{parentName:"p"},'"#PackageContents"'),' from the Reference element, and return the\nManifest element in a ByteArray object. The "#" symbol refers to the value of an\nelement Id attribute.'),(0,a.kt)("p",null,"The following example implements a dereferencer for validating AIR application\nsignatures. The implementation is kept simple by relying on the known structure\nof an AIR signature. A general-purpose dereferencer could be significantly more\ncomplex."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package\n{\n    import flash.events.ErrorEvent;\n    import flash.security.IURIDereferencer;\n    import flash.utils.ByteArray;\n    import flash.utils.IDataInput;\n\n    public class AIRSignatureDereferencer implements IURIDereferencer {\n        private const XML_SIG_NS:Namespace =\n            new Namespace( "http://www.w3.org/2000/09/xmldsig#" );\n        private var airSignature:XML;\n\n        public function AIRSignatureDereferencer( airSignature:XML ) {\n            this.airSignature = airSignature;\n        }\n\n        public function dereference( uri:String ):IDataInput {\n            var data:ByteArray = null;\n            try\n            {\n                if( uri != "#PackageContents" )\n                {\n                    throw( new Error("Unsupported signature type.") );\n                }\n                var manifest:XMLList =\n                    airSignature.XML_SIG_NS::Object.XML_SIG_NS::Manifest;\n                data = new ByteArray();\n                data.writeUTFBytes( manifest.toXMLString());\n                data.position = 0;\n            }\n            catch (e:Error)\n            {\n                data = null;\n                throw new Error("Reference not resolvable: " + uri + ", " + e.message);\n            }\n            finally\n            {\n                return data;\n            }\n\n        }\n    }\n}\n')),(0,a.kt)("p",null,"When you verify this type of signature, only the data in the Manifest element is\nvalidated. The actual files in the package are not checked at all. To check the\npackage files for tampering, you must read the files, compute the SHA256 digest\nand compare the result to digest recorded in the manifest. The\nXMLSignatureValidator does not automatically check such secondary references."),(0,a.kt)("p",null,"Note: This example is provided only to illustrate the signature validation\nprocess. There is little use in an AIR application validating its own signature.\nIf the application has already been tampered with, the tampering agent could\nsimply remove the validation check."),(0,a.kt)("h3",{id:"computing-digest-values-for-external-resources"},"Computing digest values for external resources"),(0,a.kt)("p",null,"AIR does not include built-in functions for computing SHA256 digests, but the\nFlex SDK does include a SHA256 utility class. The SDK also includes the Base64\nencoder utility class that is helpful for comparing the computed digest to the\ndigest stored in a signature."),(0,a.kt)("p",null,"The following example function reads and validates the files in an AIR package\nmanifest:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import mx.utils.Base64Encoder;\nimport mx.utils.SHA256;\n\nprivate function verifyManifest( sigFile:File, manifest:XML ):Boolean\n{\n    var result:Boolean = true;\n    var message:String = \'\';\n    var nameSpace:Namespace = manifest.namespace();\n\n    if( manifest.nameSpace::Reference.length() <= 0 )\n    {\n        result = false;\n        message = "Nothing to validate.";\n    }\n    for each (var reference:XML in manifest.nameSpace::Reference)\n    {\n        var file:File = sigFile.parent.parent.resolvePath( reference.@URI );\n        var stream:FileStream = new FileStream();\n        stream.open(file, FileMode.READ);\n        var fileData:ByteArray = new ByteArray();\n        stream.readBytes( fileData, 0, stream.bytesAvailable );\n\n        var digestHex:String = SHA256.computeDigest( fileData );\n        //Convert hexidecimal string to byte array\n        var digest:ByteArray = new ByteArray();\n        for( var c:int = 0; c < digestHex.length; c += 2 ){\n            var byteChar:String = digestHex.charAt(c) + digestHex.charAt(c+1);\n            digest.writeByte( parseInt( byteChar, 16 ));\n        }\n        digest.position = 0;\n\n        var base64Encoder:Base64Encoder = new Base64Encoder();\n        base64Encoder.insertNewLines = false;\n        base64Encoder.encodeBytes( digest, 0, digest.bytesAvailable );\n        var digestBase64:String = base64Encoder.toString();\n        if( digestBase64 == reference.nameSpace::DigestValue )\n        {\n            result = result && true;\n            message += "   " + reference.@URI + " verified.\\n";\n        }\n        else\n        {\n            result = false;\n            message += " ---- " + reference.@URI + " has been modified!\\n";\n        }\n        base64Encoder.reset();\n    }\n    trace( message );\n    return result;\n}\n')),(0,a.kt)("p",null,"The function loops through all the references in the Manifest element. For each\nreference, the SHA256 digest is computed, encoded in base64 format, and compared\nto the digest in the manifest. The URIs in an AIR package refer to paths\nrelative to the application directory. The paths are resolved based on the\nlocation of the signature file, which is always in the META-INF subdirectory\nwithin the application directory. Note that the Flex SHA256 class returns the\ndigest as a string of hexadecimal characters. This string must be converted into\na ByteArray containing the bytes represented by the hexadecimal string."),(0,a.kt)("p",null,"To use the mx.utils.SHA256 and Base64Encoder classes in Flash CS4, you can\neither locate and copy these classes into your application development directory\nor compile a library SWF containing the classes using the Flex SDK."),(0,a.kt)("h2",{id:"dereferencing-uris-in-detached-signatures-referencing-external-data"},"Dereferencing URIs in detached signatures referencing external data"),(0,a.kt)("p",null,"When a URI refers to an external resource, the data must be accessed and loaded\ninto a ByteArray object. If the URI contains an absolute URL, then it is simply\na matter of reading a file or requesting a URL. If, as is probably the more\ncommon case, the URI contains to a relative path, then your IURIDereferencer\nimplementation must include a way to resolve the paths to the signed files."),(0,a.kt)("p",null,"The following example uses a File object initialized when the dereferencer\ninstance is constructed as the base for resolving signed files."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package\n{\n    import flash.events.ErrorEvent;\n    import flash.events.EventDispatcher;\n    import flash.filesystem.File;\n    import flash.filesystem.FileMode;\n    import flash.filesystem.FileStream;\n    import flash.security.IURIDereferencer;\n    import flash.utils.ByteArray;\n    import flash.utils.IDataInput;\n    public class RelativeFileDereferencer\n        extends EventDispatcher implements IURIDereferencer\n    {\n        private var base:File;\n\n        public function RelativeFileDereferencer( base:File )\n        {\n            this.base = base;\n        }\n\n        public function dereference( uri:String ):IDataInput\n        {\n            var data:ByteArray = null;\n            try{\n                var referent:File = this.base.resolvePath( uri );\n                var refStream:FileStream = new FileStream();\n                data = new ByteArray();\n                refStream.open( referent, FileMode.READ );\n\n                refStream.readBytes( data, 0, data.bytesAvailable );\n\n            } catch ( e:Error ) {\n                data = null;\n                throw new Error("Reference not resolvable: " + referent.nativePath + ", " + e.message );\n            } finally {\n                return data;\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"dereference()")," function simply locates the file addressed by the reference\nURI, loads the file contents into a byte array, and returns the ByteArray\nobject."),(0,a.kt)("p",null,'Note: Before validating remote external references, consider whether your\napplication could be vulnerable to a "phone home" or similar type of attack by a\nmaliciously constructed signature document.'))}p.isMDXComponent=!0}}]);