"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[87055],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=c(n),v=a,u=h["".concat(l,".").concat(v)]||h[v]||p[v]||o;return n?i.createElement(u,r(r({ref:t},d),{},{components:n})):i.createElement(u,r({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=v;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}v.displayName="MDXCreateElement"},75168:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(87462),a=(n(67294),n(3905));const o={sidebar_position:2},r="How ActionScript 3.0 event handling differs from earlier versions",s={unversionedId:"development/core-actionscript-classes/handling-events/how-actionscript-3.0-event-handling-differs-from-earlier-versions",id:"development/core-actionscript-classes/handling-events/how-actionscript-3.0-event-handling-differs-from-earlier-versions",title:"How ActionScript 3.0 event handling differs from earlier versions",description:"The most noticeable difference between event handling in ActionScript 3.0 and",source:"@site/docs/development/core-actionscript-classes/handling-events/how-actionscript-3.0-event-handling-differs-from-earlier-versions.md",sourceDirName:"development/core-actionscript-classes/handling-events",slug:"/development/core-actionscript-classes/handling-events/how-actionscript-3.0-event-handling-differs-from-earlier-versions",permalink:"/docs/development/core-actionscript-classes/handling-events/how-actionscript-3.0-event-handling-differs-from-earlier-versions",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/handling-events/how-actionscript-3.0-event-handling-differs-from-earlier-versions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Basics of handling events",permalink:"/docs/development/core-actionscript-classes/handling-events/basics-of-handling-events"},next:{title:"The event flow",permalink:"/docs/development/core-actionscript-classes/handling-events/the-event-flow"}},l={},c=[{value:"Event handling in previous versions of ActionScript",id:"event-handling-in-previous-versions-of-actionscript",level:2},{value:"Event handling in ActionScript 3.0",id:"event-handling-in-actionscript-30",level:2},{value:"Default behaviors",id:"default-behaviors",level:4},{value:"What&#39;s new for event listeners in ActionScript 3.0",id:"whats-new-for-event-listeners-in-actionscript-30",level:4}],d={toc:c},h="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-actionscript-30-event-handling-differs-from-earlier-versions"},"How ActionScript 3.0 event handling differs from earlier versions"),(0,a.kt)("p",null,"The most noticeable difference between event handling in ActionScript 3.0 and\nevent handling in previous versions of ActionScript is that in ActionScript 3.0\nthere is only one system for event handling, whereas in previous versions of\nActionScript there are several different event-handling systems. This section\nbegins with an overview of how event handling worked in previous versions of\nActionScript, and then discusses how event handling has changed for ActionScript\n3.0."),(0,a.kt)("h2",{id:"event-handling-in-previous-versions-of-actionscript"},"Event handling in previous versions of ActionScript"),(0,a.kt)("p",null,"Versions of ActionScript before ActionScript 3.0 provided a number of different\nways to handle events:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"on()")," event handlers that can be placed directly on Button and MovieClip\ninstances")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"onClipEvent()")," handlers that can be placed directly on MovieClip instances")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Callback function properties, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"XML.onload")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Camera.onActivity"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Event listeners that you register using the ",(0,a.kt)("inlineCode",{parentName:"p"},"addListener()")," method")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The UIEventDispatcher class that partially implemented the DOM event model."))),(0,a.kt)("p",null,"Each of these mechanisms presents its own set of advantages and limitations. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"on()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onClipEvent()")," handlers are easy to use, but make subsequent\nmaintenance of projects more difficult because code placed directly on buttons\nand movie clips can be difficult to find. Callback functions are also simple to\nimplement, but limit you to only one callback function for any given event.\nEvent listeners are more difficult to implement\u2014they require not only the\ncreation of a listener object and function, but also the registration of the\nlistener with the object that generates the event. This increased overhead,\nhowever, enables you to create several listener objects and register them all\nfor the same event."),(0,a.kt)("p",null,"The development of components for ActionScript 2.0 engendered yet another event\nmodel. This new model, embodied in the UIEventDispatcher class, was based on a\nsubset of the DOM Events Specification. Developers who are familiar with\ncomponent event handling will find the transition to the new ActionScript 3.0\nevent model relatively painless."),(0,a.kt)("p",null,"Unfortunately, the syntax used by the various event models overlap in various\nways, and differ in others. For example, in ActionScript 2.0, some properties,\nsuch as ",(0,a.kt)("inlineCode",{parentName:"p"},"TextField.onChanged"),", can be used as either a callback function or an\nevent listener. However, the syntax for registering listener objects differs\ndepending on whether you are using one of the six classes that support listeners\nor the UIEventDispatcher class. For the Key, Mouse, MovieClipLoader, Selection,\nStage, and TextField classes, you use the ",(0,a.kt)("inlineCode",{parentName:"p"},"addListener()")," method, but for\ncomponents event handling, you use a method called ",(0,a.kt)("inlineCode",{parentName:"p"},"addEventListener()"),"."),(0,a.kt)("p",null,"Another complexity introduced by the different event-handling models was that\nthe scope of the event handler function varied widely depending on the mechanism\nused. In other words, the meaning of the ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," keyword was not consistent among\nthe event-handling systems."),(0,a.kt)("h2",{id:"event-handling-in-actionscript-30"},"Event handling in ActionScript 3.0"),(0,a.kt)("p",null,"ActionScript 3.0 introduces a single event-handling model that replaces the many\ndifferent event-handling mechanisms that existed in previous versions of the\nlanguage. The new event model is based on the Document Object Model (DOM) Level\n3 Events Specification. Although the SWF file format does not adhere\nspecifically to the Document Object Model standard, there are sufficient\nsimilarities between the display list and the structure of the DOM to make\nimplementation of the DOM event model possible. An object on the display list is\nanalogous to a node in the DOM hierarchical structure, and the terms ",(0,a.kt)("em",{parentName:"p"},"display\nlist object")," and ",(0,a.kt)("em",{parentName:"p"},"node")," are used interchangeably throughout this discussion."),(0,a.kt)("p",null,"The Flash Player and AIR implementation of the DOM event model includes a\nconcept named default behaviors. A ",(0,a.kt)("em",{parentName:"p"},"default behavior")," is an action that Flash\nPlayer or AIR executes as the normal consequence of certain events."),(0,a.kt)("h4",{id:"default-behaviors"},"Default behaviors"),(0,a.kt)("p",null,"Developers are usually responsible for writing code that responds to events. In\nsome cases, however, a behavior is so commonly associated with an event that\nFlash Player or AIR automatically executes the behavior unless the developer\nadds code to cancel it. Because Flash Player or AIR automatically exhibits the\nbehavior, such behaviors are called default behaviors."),(0,a.kt)("p",null,"For example, when a user enters text into a TextField object, the expectation\nthat the text will be displayed in that TextField object is so common that the\nbehavior is built into Flash Player and AIR. If you do not want this default\nbehavior to occur, you can cancel it using the new event-handling system. When a\nuser inputs text into a TextField object, Flash Player or AIR creates an\ninstance of the TextEvent class to represent that user input. To prevent Flash\nPlayer or AIR from displaying the text in the TextField object, you must access\nthat specific TextEvent instance and call that instance's ",(0,a.kt)("inlineCode",{parentName:"p"},"preventDefault()"),"\nmethod."),(0,a.kt)("p",null,"Not all default behaviors can be prevented. For example, Flash Player and AIR\ngenerate a MouseEvent object when a user double-clicks a word in a TextField\nobject. The default behavior, which cannot be prevented, is that the word under\nthe cursor is highlighted."),(0,a.kt)("p",null,"Many types of event objects do not have associated default behaviors. For\nexample, Flash Player dispatches a connect event object when a network\nconnection is established, but there is no default behavior associated with it.\nThe API documentation for the Event class and its subclasses lists each type of\nevent and describes any associated default behavior, and whether that behavior\ncan be prevented."),(0,a.kt)("p",null,"It is important to understand that default behaviors are associated only with\nevent objects dispatched by Flash Player or AIR, and do not exist for event\nobjects dispatched programmatically through ActionScript. For example, you can\nuse the methods of the EventDispatcher class to dispatch an event object of type\n",(0,a.kt)("inlineCode",{parentName:"p"},"textInput"),", but that event object will not have a default behavior associated\nwith it. In other words, Flash Player and AIR will not display a character in a\nTextField object as a result of a ",(0,a.kt)("inlineCode",{parentName:"p"},"textInput")," event that you dispatched\nprogrammatically."),(0,a.kt)("h4",{id:"whats-new-for-event-listeners-in-actionscript-30"},"What's new for event listeners in ActionScript 3.0"),(0,a.kt)("p",null,"For developers with experience using the ActionScript 2.0 ",(0,a.kt)("inlineCode",{parentName:"p"},"addListener()"),"\nmethod, it may be helpful to point out the differences between the ActionScript\n2.0 event listener model and the ActionScript 3.0 event model. The following\nlist describes a few major differences between the two event models:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"To add event listeners in ActionScript 2.0, you use ",(0,a.kt)("inlineCode",{parentName:"p"},"addListener()")," in some\ncases and ",(0,a.kt)("inlineCode",{parentName:"p"},"addEventListener()")," in others, whereas in ActionScript 3.0, you use\n",(0,a.kt)("inlineCode",{parentName:"p"},"addEventListener()")," in all situations.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"There is no event flow in ActionScript 2.0, which means that the\n",(0,a.kt)("inlineCode",{parentName:"p"},"addListener()")," method can be called only on the object that broadcasts the\nevent, whereas in ActionScript 3.0, the ",(0,a.kt)("inlineCode",{parentName:"p"},"addEventListener()")," method can be\ncalled on any object that is part of the event flow.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In ActionScript 2.0, event listeners can be either functions, methods, or\nobjects, whereas in ActionScript 3.0, only functions or methods can be event\nlisteners."))))}p.isMDXComponent=!0}}]);