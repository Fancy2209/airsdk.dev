"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[42070],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,m=d["".concat(c,".").concat(u)]||d[u]||h[u]||i;return n?a.createElement(m,r(r({ref:t},l),{},{components:n})):a.createElement(m,r({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},19939:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const i={sidebar_position:12},r="Capturing sound input",s={unversionedId:"development/rich-media-content/working-with-sound/capturing-sound-input",id:"development/rich-media-content/working-with-sound/capturing-sound-input",title:"Capturing sound input",description:"The Microphone class lets your application connect to a microphone or other",source:"@site/docs/development/rich-media-content/working-with-sound/capturing-sound-input.md",sourceDirName:"development/rich-media-content/working-with-sound",slug:"/development/rich-media-content/working-with-sound/capturing-sound-input",permalink:"/docs/development/rich-media-content/working-with-sound/capturing-sound-input",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-sound/capturing-sound-input.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"mainSidebar",previous:{title:"Accessing raw sound data",permalink:"/docs/development/rich-media-content/working-with-sound/accessing-raw-sound-data"},next:{title:"Sound example: Podcast Player",permalink:"/docs/development/rich-media-content/working-with-sound/sound-example-podcast-player"}},c={},p=[{value:"Accessing a microphone",id:"accessing-a-microphone",level:2},{value:"Routing microphone audio to local speakers",id:"routing-microphone-audio-to-local-speakers",level:2},{value:"Altering microphone audio",id:"altering-microphone-audio",level:2},{value:"Detecting microphone activity",id:"detecting-microphone-activity",level:2},{value:"Sending audio to and from a media server",id:"sending-audio-to-and-from-a-media-server",level:2},{value:"Capturing microphone sound data",id:"capturing-microphone-sound-data",level:2}],l={toc:p},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"capturing-sound-input"},"Capturing sound input"),(0,o.kt)("p",null,"The Microphone class lets your application connect to a microphone or other\nsound input device on the user's system and broadcast the input audio to that\nsystem's speakers or send the audio data to a remote server, such as Flash Media\nServer. You can access the raw audio data from the microphone and record or\nprocess it; you can also send the audio directly to the system's speakers or\nsend compressed audio data to a remote server. You can use either Speex or\nNellymoser codec for data sent to a remote server. (The Speex codec is supported\nstarting with Flash Player 10 and Adobe AIR 1.5.)"),(0,o.kt)("h2",{id:"accessing-a-microphone"},"Accessing a microphone"),(0,o.kt)("p",null,"The Microphone class does not have a constructor method. Instead, you use the\nstatic ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.getMicrophone()")," method to obtain a new Microphone instance,\nas shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"var mic:Microphone = Microphone.getMicrophone();\n")),(0,o.kt)("p",null,"Calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.getMicrophone()")," method without a parameter returns the\nfirst sound input device discovered on the user's system."),(0,o.kt)("p",null,"A system can have more than one sound input device attached to it. Your\napplication can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.names")," property to get an array of the names\nof all available sound input devices. Then it can call the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.getMicrophone()")," method with an ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," parameter that matches the\nindex value of a device's name in the array."),(0,o.kt)("p",null,"A system might not have a microphone or other sound input device attached to it.\nYou can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.names")," property or the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.getMicrophone()"),"\nmethod to check whether the user has a sound input device installed. If the user\ndoesn't have a sound input device installed, the ",(0,o.kt)("inlineCode",{parentName:"p"},"names")," array has a length of\nzero, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"getMicrophone()")," method returns a value of ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,o.kt)("p",null,"When your application calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.getMicrophone()")," method, Flash\nPlayer displays the Flash Player Settings dialog box, which prompts the user to\neither allow or deny Flash Player access to the camera and microphone on the\nsystem. After the user clicks on either the Allow button or the Deny button in\nthis dialog, a StatusEvent is dispatched. The ",(0,o.kt)("inlineCode",{parentName:"p"},"code")," property of that\nStatusEvent instance indicates whether microphone access was allowed or denied,\nas shown in this example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import flash.media.Microphone;\n\nvar mic:Microphone = Microphone.getMicrophone();\nmic.addEventListener(StatusEvent.STATUS, this.onMicStatus);\n\nfunction onMicStatus(event:StatusEvent):void\n{\n    if (event.code == "Microphone.Unmuted")\n    {\n        trace("Microphone access was allowed.");\n    }\n    else if (event.code == "Microphone.Muted")\n    {\n        trace("Microphone access was denied.");\n    }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"StatusEvent.code"),' property will contain "Microphone.Unmuted" if access was\nallowed, or "Microphone.Muted" if access was denied.'),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.muted")," property is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," when the user allows\nor denies microphone access, respectively. However, the ",(0,o.kt)("inlineCode",{parentName:"p"},"muted")," property is not\nset on the Microphone instance until the StatusEvent has been dispatched, so\nyour application should also wait for the ",(0,o.kt)("inlineCode",{parentName:"p"},"StatusEvent.STATUS")," event to be\ndispatched before checking the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.muted")," property."),(0,o.kt)("p",null,"In order for Flash Player to display the settings dialog, the application window\nmust be large enough to display it (at least 215 by 138 pixels). Otherwise,\naccess is denied automatically."),(0,o.kt)("p",null,"Content running in the AIR application sandbox does not need the permission of\nthe user to access the microphone. Thus, status events for muting and unmuting\nthe microphone are never dispatched. Content running in AIR outside the\napplication sandbox does require permission from the user, so these status\nevents can be dispatched."),(0,o.kt)("h2",{id:"routing-microphone-audio-to-local-speakers"},"Routing microphone audio to local speakers"),(0,o.kt)("p",null,"Audio input from a microphone can be routed to the local system speakers by\ncalling the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.setLoopback()")," method with a parameter value of ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("p",null,"When sound from a local microphone is routed to local speakers, there is a risk\nof creating an audio feedback loop, which can cause loud squealing sounds and\ncan potentially damage sound hardware. Calling the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.setUseEchoSuppression()")," method with a parameter value of ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"\nreduces, but does not completely eliminate, the risk that audio feedback will\noccur. Adobe recommends you always call ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.setUseEchoSuppression(true)"),"\nbefore calling ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.setLoopback(true)"),", unless you are certain that the\nuser is playing back the sound using headphones or something other than\nspeakers."),(0,o.kt)("p",null,"The following code shows how to route the audio from a local microphone to the\nlocal system speakers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"var mic:Microphone = Microphone.getMicrophone();\nmic.setUseEchoSuppression(true);\nmic.setLoopBack(true);\n")),(0,o.kt)("h2",{id:"altering-microphone-audio"},"Altering microphone audio"),(0,o.kt)("p",null,"Your application can alter the audio data that comes from a microphone in two\nways. First, it can change the gain of the input sound, which effectively\nmultiplies the input values by a specified amount to create a louder or quieter\nsound. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.gain")," property accepts numeric values between 0 and 100\ninclusive. A value of 50 acts like a multiplier of one and specifies normal\nvolume. A value of zero acts like a multiplier of zero and effectively silences\nthe input audio. Values above 50 specify higher than normal volume."),(0,o.kt)("p",null,"Your application can also change the sample rate of the input audio. Higher\nsample rates increase sound quality, but they also create denser data streams\nthat use more resources for transmission and storage. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.rate"),"\nproperty represents the audio sample rate measured in kilohertz (kHz). The\ndefault sample rate is 8 kHz. You can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.rate")," property to a\nvalue higher than 8 kHz if your microphone supports the higher rate. For\nexample, setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.rate")," property to a value of 11 sets the sample\nrate to 11 kHz; setting it to 22 sets the sample rate to 22 kHz, and so on. The\nsample rates available depend on the selected codec. When you use the Nellymoser\ncodec, you can specify 5, 8, 11, 16, 22 and 44 kHz as the sample rate. When you\nuse Speex codec (available starting in Flash Player 10 and Adobe AIR 1.5), you\ncan only use 16 kHz."),(0,o.kt)("h2",{id:"detecting-microphone-activity"},"Detecting microphone activity"),(0,o.kt)("p",null,"To conserve bandwidth and processing resources, Flash Player tries to detect\nwhen no sound is being transmitted by a microphone. When the microphone's\nactivity level stays below the silence level threshold for a period of time,\nFlash Player stops transmitting the audio input and dispatches a simple\nActivityEvent instead. If you use the Speex codec (available in Flash Player 10\nor later and Adobe AIR 1.5 or later), set the silence level to 0, to ensure that\nthe application continuously transmits audio data. Speex voice activity\ndetection automatically reduces bandwidth."),(0,o.kt)("p",null,"Note: A Microphone object only dispatches Activity events when your application\nis monitoring the microphone. Thus, if you do not call ",(0,o.kt)("inlineCode",{parentName:"p"},"setLoopBack( true )"),",\nadd a listener for sample data events, or attach the microphone to a NetStream\nobject, then no activity events are dispatched."),(0,o.kt)("p",null,"Three properties of the Microphone class monitor and control the detection of\nactivity:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The read-only ",(0,o.kt)("inlineCode",{parentName:"p"},"activityLevel")," property indicates the amount of sound the\nmicrophone is detecting, on a scale from 0 to 100.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"silenceLevel")," property specifies the amount of sound needed to activate\nthe microphone and dispatch an ",(0,o.kt)("inlineCode",{parentName:"p"},"ActivityEvent.ACTIVITY")," event. The\n",(0,o.kt)("inlineCode",{parentName:"p"},"silenceLevel")," property also uses a scale from 0 to 100, and the default value\nis 10.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"silenceTimeout")," property describes the number of milliseconds that the\nactivity level must stay below the silence level, until an\n",(0,o.kt)("inlineCode",{parentName:"p"},"ActivityEvent.ACTIVITY")," event is dispatched to indicate that the microphone\nis now silent. The default ",(0,o.kt)("inlineCode",{parentName:"p"},"silenceTimeout")," value is 2000."))),(0,o.kt)("p",null,"Both the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.silenceLevel")," property and the ",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.silenceTimeout"),"\nproperty are read only, but their values can be changed by using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.setSilenceLevel()")," method."),(0,o.kt)("p",null,"In some cases, the process of activating the microphone when new activity is\ndetected can cause a short delay. Keeping the microphone active at all times can\nremove such activation delays. Your application can call the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Microphone.setSilenceLevel()")," method with the ",(0,o.kt)("inlineCode",{parentName:"p"},"silenceLevel")," parameter set to\nzero to tell Flash Player to keep the microphone active and keep gathering audio\ndata, even when no sound is being detected. Conversely, setting the\n",(0,o.kt)("inlineCode",{parentName:"p"},"silenceLevel")," parameter to 100 prevents the microphone from being activated at\nall."),(0,o.kt)("p",null,"The following example displays information about the microphone and reports on\nactivity events and status events dispatched by a Microphone object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import flash.events.ActivityEvent;\nimport flash.events.StatusEvent;\nimport flash.media.Microphone;\n\nvar deviceArray:Array = Microphone.names;\ntrace("Available sound input devices:");\nfor (var i:int = 0; i < deviceArray.length; i++)\n{\n    trace(" " + deviceArray[i]);\n}\n\nvar mic:Microphone = Microphone.getMicrophone();\nmic.gain = 60;\nmic.rate = 11;\nmic.setUseEchoSuppression(true);\nmic.setLoopBack(true);\nmic.setSilenceLevel(5, 1000);\n\nmic.addEventListener(ActivityEvent.ACTIVITY, this.onMicActivity);\nmic.addEventListener(StatusEvent.STATUS, this.onMicStatus);\n\nvar micDetails:String = "Sound input device name: " + mic.name + \'\\n\';\nmicDetails += "Gain: " + mic.gain + \'\\n\';\nmicDetails += "Rate: " + mic.rate + " kHz" + \'\\n\';\nmicDetails += "Muted: " + mic.muted + \'\\n\';\nmicDetails += "Silence level: " + mic.silenceLevel + \'\\n\';\nmicDetails += "Silence timeout: " + mic.silenceTimeout + \'\\n\';\nmicDetails += "Echo suppression: " + mic.useEchoSuppression + \'\\n\';\ntrace(micDetails);\n\nfunction onMicActivity(event:ActivityEvent):void\n{\n    trace("activating=" + event.activating + ", activityLevel=" +\n        mic.activityLevel);\n}\n\nfunction onMicStatus(event:StatusEvent):void\n{\n    trace("status: level=" + event.level + ", code=" + event.code);\n}\n')),(0,o.kt)("p",null,"When you run the above example, speak or makes noises into your system\nmicrophone and watch the resulting trace statements appear in a console or debug\nwindow."),(0,o.kt)("h2",{id:"sending-audio-to-and-from-a-media-server"},"Sending audio to and from a media server"),(0,o.kt)("p",null,"Additional audio capabilities are available when using ActionScript with a\nstreaming media server such as Flash Media Server."),(0,o.kt)("p",null,"In particular, your application can attach a Microphone object to a NetStream\nobject and transmit data directly from the user's microphone to the server.\nAudio data can also be streamed from the server to an application and played\nback as part of a MovieClip or by using a Video object."),(0,o.kt)("p",null,"The Speex codec is available starting with Flash Player 10 and Adobe AIR 1.5. To\nset the codec used for compressed audio sent to the media server, set the\n",(0,o.kt)("inlineCode",{parentName:"p"},"codec")," property of the Microphone object. This property can have two values,\nwhich are enumerated in the SoundCodec class. Setting the codec property to\n",(0,o.kt)("inlineCode",{parentName:"p"},"SoundCodec.SPEEX")," selects the Speex codec for compressing audio. Setting the\nproperty to ",(0,o.kt)("inlineCode",{parentName:"p"},"SoundCodec.NELLYMOSER")," (the default) selects the Nellymoser codec\nfor compressing audio."),(0,o.kt)("p",null,"For more information, see the Flash Media Server documentation online at\n",(0,o.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20150702070954/http://www.adobe.com/support/documentation/en/flashmediaserver/"},"www.adobe.com/go/learn_fms_docs_en"),"."),(0,o.kt)("h2",{id:"capturing-microphone-sound-data"},"Capturing microphone sound data"),(0,o.kt)("p",null,"In Flash Player 10.1 and AIR 2, or later, you can capture data from a microphone\ndata as a byte array of floating point values. Each value represents a sample of\nmonophonic audio data."),(0,o.kt)("p",null,"To get microphone data, set an event listener for the ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleData")," event of the\nMicrophone object. The Microphone object dispatches ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleData")," events\nperiodically as the microphone buffer is filled with sound samples. The\nSampleDataEvent object has a ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," property that is a byte array of sound\nsamples. The samples are each represented as floating point values, each\nrepresenting a monophonic sound sample."),(0,o.kt)("p",null,"The following code captures microphone sound data into a ByteArray object named\n",(0,o.kt)("inlineCode",{parentName:"p"},"soundBytes"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"var mic:Microphone = Microphone.getMicrophone();\nmic.setSilenceLevel(0, DELAY_LENGTH);\nmic.addEventListener(SampleDataEvent.SAMPLE_DATA, micSampleDataHandler);\nfunction micSampleDataHandler(event:SampleDataEvent):void {\n    while(event.data.bytesAvailable) {\n        var sample:Number = event.data.readFloat();\n        soundBytes.writeFloat(sample);\n    }\n}\n")),(0,o.kt)("p",null,"You can reuse the sample bytes as playback audio for a Sound object. If you do,\nyou should set the ",(0,o.kt)("inlineCode",{parentName:"p"},"rate")," property of the Microphone object to 44, which is the\nsample rate used by Sound objects. (You can also convert microphone samples\ncaptured at a lower rate to 44 kHz rate required by the Sound object.) Also,\nkeep in mind that the Microphone object captures monophonic samples, whereas the\nSound object uses stereo sound; so you should write each of the bytes captured\nby the Microphone object to the Sound object twice. The following example\ncaptures 4 seconds of microphone data and plays it back using a Sound object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'const DELAY_LENGTH:int = 4000;\nvar mic:Microphone = Microphone.getMicrophone();\nmic.setSilenceLevel(0, DELAY_LENGTH);\nmic.gain = 100;\nmic.rate = 44;\nmic.addEventListener(SampleDataEvent.SAMPLE_DATA, micSampleDataHandler);\n\nvar timer:Timer = new Timer(DELAY_LENGTH);\ntimer.addEventListener(TimerEvent.TIMER, timerHandler);\ntimer.start();\n\nfunction micSampleDataHandler(event:SampleDataEvent):void\n{\n    while(event.data.bytesAvailable)\n    {\n        var sample:Number = event.data.readFloat();\n        soundBytes.writeFloat(sample);\n    }\n}\nvar sound:Sound = new Sound();\nvar channel:SoundChannel;\nfunction timerHandler(event:TimerEvent):void\n{\n    mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, micSampleDataHandler);\n    timer.stop();\n    soundBytes.position = 0;\n    sound.addEventListener(SampleDataEvent.SAMPLE_DATA, playbackSampleHandler);\n    channel.addEventListener( Event.SOUND_COMPLETE, playbackComplete );\n    channel = sound.play();\n}\n\nfunction playbackSampleHandler(event:SampleDataEvent):void\n{\n    for (var i:int = 0; i < 8192 && soundBytes.bytesAvailable > 0; i++)\n    {\n        trace(sample);\n        var sample:Number = soundBytes.readFloat();\n        event.data.writeFloat(sample);\n        event.data.writeFloat(sample);\n    }\n}\n\nfunction playbackComplete( event:Event ):void\n{\n    trace( "Playback finished.");\n}\n')),(0,o.kt)("p",null,"For more information on playing back sounds from sound sample data, see\n",(0,o.kt)("a",{parentName:"p",href:"/docs/development/rich-media-content/working-with-sound/working-with-dynamically-generated-audio"},"Working with dynamically generated audio"),"."),(0,o.kt)("p",null,"More Help topics"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20150120163947/http://www.riagora.com/2010/08/air-android-and-the-microphone/"},"Michael Chaize: AIR, Android, and the Microphone")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20120913011517/http://coenraets.org/blog/air-for-android-samples/voice-notes-for-android/"},"Christophe Coenraets: Voice Notes for Android")))}h.isMDXComponent=!0}}]);