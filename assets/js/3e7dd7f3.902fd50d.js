"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[70177],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=p(n),u=r,m=h["".concat(o,".").concat(u)]||h[u]||c[u]||l;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[h]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_position:7},i="Flags and properties",s={unversionedId:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/flags-and-properties",id:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/flags-and-properties",title:"Flags and properties",description:"The following table lists the five flags that you can set for regular",source:"@site/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/flags-and-properties.md",sourceDirName:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax",slug:"/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/flags-and-properties",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/flags-and-properties",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/flags-and-properties.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"mainSidebar",previous:{title:"Groups",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/groups"},next:{title:"Methods for using regular expressions with strings",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/methods-for-using-regular-expressions-with-strings"}},o={},p=[{value:"The g (global) flag",id:"the-g-global-flag",level:4},{value:"The i (ignoreCase) flag",id:"the-i-ignorecase-flag",level:4},{value:"The m (multiline) flag",id:"the-m-multiline-flag",level:4},{value:"The s (dotall) flag",id:"the-s-dotall-flag",level:4},{value:"The x (extended) flag",id:"the-x-extended-flag",level:4},{value:"The lastIndex property",id:"the-lastindex-property",level:4},{value:"The source property",id:"the-source-property",level:4}],d={toc:p},h="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flags-and-properties"},"Flags and properties"),(0,r.kt)("p",null,"The following table lists the five flags that you can set for regular\nexpressions. Each flag can be accessed as a property of the regular expression\nobject."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Flag"),(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"g")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"global")),(0,r.kt)("td",{parentName:"tr",align:null},"Matches more than one match.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"i")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ignoreCase")),(0,r.kt)("td",{parentName:"tr",align:null},"Case-insensitive matching. Applies to the ",(0,r.kt)("inlineCode",{parentName:"td"},"A")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"td"},"Z")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"a")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"td"},"z")," characters, but not to extended characters such as ",(0,r.kt)("inlineCode",{parentName:"td"},"\xc9")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"\xe9"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"m")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"multiline")),(0,r.kt)("td",{parentName:"tr",align:null},"With this flag set, ",(0,r.kt)("inlineCode",{parentName:"td"},"$")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"^")," can match the beginning of a line and end of a line, respectively.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"s")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dotall")),(0,r.kt)("td",{parentName:"tr",align:null},"With this flag set, ",(0,r.kt)("inlineCode",{parentName:"td"},".")," (dot) can match the newline character (",(0,r.kt)("inlineCode",{parentName:"td"},"\\n"),").")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"extended")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows extended regular expressions. You can type spaces in the regular expression, which are ignored as part of the pattern. This lets you type regular expression code more legibly.")))),(0,r.kt)("p",null,"Note that these properties are read-only. You can set the flags (",(0,r.kt)("inlineCode",{parentName:"p"},"g"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"i"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"m"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"s"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),") when you set a regular expression variable, as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"var re:RegExp = /abc/gimsx;\n")),(0,r.kt)("p",null,"However, you cannot directly set the named properties. For instance, the\nfollowing code results in an error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"var re:RegExp = /abc/;\nre.global = true; // This generates an error.\n")),(0,r.kt)("p",null,"By default, unless you specify them in the regular expression declaration, the\nflags are not set, and the corresponding properties are also set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,"Additionally, there are two other properties of a regular expression:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"lastIndex")," property specifies the index position in the string to use for\nthe next call to the ",(0,r.kt)("inlineCode",{parentName:"p"},"exec()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"test()")," method of a regular expression.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," property specifies the string that defines the pattern portion of\nthe regular expression."))),(0,r.kt)("h4",{id:"the-g-global-flag"},"The g (global) flag"),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," (",(0,r.kt)("inlineCode",{parentName:"p"},"global"),") flag is ",(0,r.kt)("em",{parentName:"p"},"not")," included, a regular expression matches no\nmore than one match. For example, with the ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," flag not included in the regular\nexpression, the ",(0,r.kt)("inlineCode",{parentName:"p"},"String.match()")," method returns only one matching substring:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var str:String = "she sells seashells by the seashore.";\nvar pattern:RegExp = /sh\\w*/;\ntrace(str.match(pattern)) // output: she\n')),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," flag is set, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Sting.match()")," method returns multiple matches,\nas follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var str:String = "she sells seashells by the seashore.";\nvar pattern:RegExp = /sh\\w*/g;\n// The same pattern, but this time the g flag IS set.\ntrace(str.match(pattern)); // output: she,shells,shore\n')),(0,r.kt)("h4",{id:"the-i-ignorecase-flag"},"The i (ignoreCase) flag"),(0,r.kt)("p",null,"By default, regular expression matches are case-sensitive. When you set the ",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\n(",(0,r.kt)("inlineCode",{parentName:"p"},"ignoreCase"),") flag, case sensitivity is ignored. For example, the lowercase ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),"\nin the regular expression does not match the uppercase letter ",(0,r.kt)("inlineCode",{parentName:"p"},"S"),", the first\ncharacter of the string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var str:String = "She sells seashells by the seashore.";\ntrace(str.search(/sh/)); // output: 13 -- Not the first character\n')),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," flag set, however, the regular expression does match the capital\nletter ",(0,r.kt)("inlineCode",{parentName:"p"},"S"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var str:String = "She sells seashells by the seashore.";\ntrace(str.search(/sh/i)); // output: 0\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," flag ignores case sensitivity only for the ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," \u2013 ",(0,r.kt)("inlineCode",{parentName:"p"},"Z")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," \u2013 ",(0,r.kt)("inlineCode",{parentName:"p"},"z"),"\ncharacters, but not for extended characters such as ",(0,r.kt)("inlineCode",{parentName:"p"},"\xc9")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"\xe9"),"."),(0,r.kt)("h4",{id:"the-m-multiline-flag"},"The m (multiline) flag"),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," (",(0,r.kt)("inlineCode",{parentName:"p"},"multiline"),") flag is not set, the ",(0,r.kt)("inlineCode",{parentName:"p"},"^")," matches the beginning of the\nstring and the ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," matches the end of the string. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," flag is set, these\ncharacters match the beginning of a line and end of a line, respectively.\nConsider the following string, which includes a newline character:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var str:String = "Test\\n";\nstr += "Multiline";\ntrace(str.match(/^\\w*/g)); // Match a word at the beginning of the string.\n')),(0,r.kt)("p",null,"Even though the ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," (",(0,r.kt)("inlineCode",{parentName:"p"},"global"),") flag is set in the regular expression, the\n",(0,r.kt)("inlineCode",{parentName:"p"},"match()")," method matches only one substring, since there is only one match for\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"^")," \u2014the beginning of the string. The output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Test\n")),(0,r.kt)("p",null,"Here is the same code with the ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," flag set:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var str:String = "Test\\n";\nstr += "Multiline";\ntrace(str.match(/^\\w*/gm)); // Match a word at the beginning of lines.\n')),(0,r.kt)("p",null,"This time, the output includes the words at the beginning of both lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Test,Multiline\n")),(0,r.kt)("p",null,"Note that only the ",(0,r.kt)("inlineCode",{parentName:"p"},"\\n")," character signals the end of a line. The following\ncharacters do not:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Return (",(0,r.kt)("inlineCode",{parentName:"p"},"\\r"),") character")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Unicode line-separator (",(0,r.kt)("inlineCode",{parentName:"p"},"\\u2028"),") character")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Unicode paragraph-separator (",(0,r.kt)("inlineCode",{parentName:"p"},"\\u2029"),") character"))),(0,r.kt)("h4",{id:"the-s-dotall-flag"},"The s (dotall) flag"),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," (",(0,r.kt)("inlineCode",{parentName:"p"},"dotall"),' or "dot all") flag is not set, a dot (',(0,r.kt)("inlineCode",{parentName:"p"},"."),") in a regular\nexpression pattern does not match a newline character (",(0,r.kt)("inlineCode",{parentName:"p"},"\\n"),"). So for the\nfollowing example, there is no match:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var str:String = "<p>Test\\n";\nstr += "Multiline</p>";\nvar re:RegExp = /<p>.*?<\\/p>/;\ntrace(str.match(re));\n')),(0,r.kt)("p",null,"However, if the ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," flag is set, the dot matches the newline character:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var str:String = "<p>Test\\n";\nstr += "Multiline</p>";\nvar re:RegExp = /<p>.*?<\\/p>/s;\ntrace(str.match(re));\n')),(0,r.kt)("p",null,"In this case, the match is the entire substring within the ",(0,r.kt)("inlineCode",{parentName:"p"},"<p>")," tags, including\nthe newline character:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<p>Test\nMultiline</p>\n")),(0,r.kt)("h4",{id:"the-x-extended-flag"},"The x (extended) flag"),(0,r.kt)("p",null,"Regular expressions can be difficult to read, especially when they include a lot\nof metasymbols and metasequences. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/<p(>|(\\s*[^>]*>)).*?<\\/p>/gi\n")),(0,r.kt)("p",null,"When you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," (",(0,r.kt)("inlineCode",{parentName:"p"},"extended"),") flag in a regular expression, any blank spaces\nthat you type in the pattern are ignored. For example, the following regular\nexpression is identical to the previous example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/     <p    (>  |\u2003(\\s*\u2003[^>]*\u2003>))    .*?    <\\/p>  /gix\n")),(0,r.kt)("p",null,"If you have the ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," flag set and do want to match a blank space character,\nprecede the blank space with a backslash. For example, the following two regular\nexpressions are equivalent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/foo bar/\n/foo \\ bar/x\n")),(0,r.kt)("h4",{id:"the-lastindex-property"},"The lastIndex property"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"lastIndex")," property specifies the index position in the string at which to\nstart the next search. This property affects the ",(0,r.kt)("inlineCode",{parentName:"p"},"exec()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"test()")," methods\ncalled on a regular expression that has the ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," flag set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". For example,\nconsider the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var pattern:RegExp = /p\\w*/gi;\nvar str:String = "Pedro Piper picked a peck of pickled peppers.";\ntrace(pattern.lastIndex);\nvar result:Object = pattern.exec(str);\nwhile (result != null)\n{\n    trace(pattern.lastIndex);\n    result = pattern.exec(str);\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"lastIndex")," property is set to 0 by default (to start searches at the\nbeginning of the string). After each match, it is set to the index position\nfollowing the match. Therefore, the output for the preceding code is the\nfollowing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"0\n5\n11\n18\n25\n36\n44\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," flag is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"exec()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"test()")," methods do not\nuse or set the ",(0,r.kt)("inlineCode",{parentName:"p"},"lastIndex")," property."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"match()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"replace()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"search()")," methods of the String class start all\nsearches from the beginning of the string, regardless of the setting of the\n",(0,r.kt)("inlineCode",{parentName:"p"},"lastIndex")," property of the regular expression used in the call to the method.\n(However, the ",(0,r.kt)("inlineCode",{parentName:"p"},"match()")," method does set ",(0,r.kt)("inlineCode",{parentName:"p"},"lastIndex")," to 0.)"),(0,r.kt)("p",null,"You can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"lastIndex")," property to adjust the starting position in the\nstring for regular expression matching."),(0,r.kt)("h4",{id:"the-source-property"},"The source property"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," property specifies the string that defines the pattern portion of a\nregular expression. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"var pattern:RegExp = /foo/gi;\ntrace(pattern.source); // foo\n")))}c.isMDXComponent=!0}}]);