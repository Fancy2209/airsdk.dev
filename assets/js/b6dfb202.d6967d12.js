"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[20650],{3905:(e,r,n)=>{n.d(r,{Zo:()=>k,kt:()=>w});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},k=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,k=s(e,["components","mdxType","originalType","parentName"]),d=l(n),p=o,w=d["".concat(c,".").concat(p)]||d[p]||u[p]||a;return n?t.createElement(w,i(i({ref:r},k),{},{components:n})):t.createElement(w,i({ref:r},k))}));function w(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},21934:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=n(87462),o=(n(67294),n(3905));const a={sidebar_position:2},i="Creating and managing workers",s={unversionedId:"development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers",id:"development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers",title:"Creating and managing workers",description:"The first step in using a worker for concurrency is to create a background",source:"@site/docs/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers.md",sourceDirName:"development/client-system-interaction/using-workers-for-concurrency",slug:"/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers",permalink:"/docs/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Understanding workers and concurrency",permalink:"/docs/development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency"},next:{title:"Communicating between workers",permalink:"/docs/development/client-system-interaction/using-workers-for-concurrency/communicating-between-workers"}},c={},l=[{value:"Creating a Worker object from a swf",id:"creating-a-worker-object-from-a-swf",level:2},{value:"Embedding the worker swf",id:"embedding-the-worker-swf",level:3},{value:"Loading an external worker swf",id:"loading-an-external-worker-swf",level:3},{value:"Using the main swf as the worker swf",id:"using-the-main-swf-as-the-worker-swf",level:3},{value:"Starting a worker&#39;s execution",id:"starting-a-workers-execution",level:2},{value:"Managing worker execution",id:"managing-worker-execution",level:2}],k={toc:l},d="wrapper";function u(e){let{components:r,...n}=e;return(0,o.kt)(d,(0,t.Z)({},k,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-and-managing-workers"},"Creating and managing workers"),(0,o.kt)("p",null,"The first step in using a worker for concurrency is to create a background\nworker. You use two types of objects to create a worker. First is a Worker\ninstance, which is what you create. The other is a WorkerDomain object, which\ncreates the Worker and manages the running Worker objects in an application."),(0,o.kt)("p",null,"When the runtime loads, it automatically creates the WorkerDomain object. The\nruntime also automatically creates a worker for the main swf of the application.\nThis first worker is known as the ",(0,o.kt)("span",{class:"dfn"}," primordial worker "),"."),(0,o.kt)("p",null,"Because there is only one WorkerDomain object for an application, you access the\nWorkerDomain instance using the static ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkerDomain.current")," property."),(0,o.kt)("p",null,"At any time, you can access the current Worker instance (the worker in which the\ncurrent code is running) using the static ",(0,o.kt)("inlineCode",{parentName:"p"},"Worker.current")," property."),(0,o.kt)("h2",{id:"creating-a-worker-object-from-a-swf"},"Creating a Worker object from a swf"),(0,o.kt)("p",null,"Just as the main swf runs within the primordial worker, a background worker\nexecutes the code of a single swf file. To use a background worker, you must\nauthor and compile the worker's code as a swf file. To create the background\nworker, the parent worker needs access to that swf file's bytes as a ByteArray\nobject. You pass that ByteArray to the WorkerDomain object's ",(0,o.kt)("inlineCode",{parentName:"p"},"createWorker()"),"\nmethod to actually create the worker."),(0,o.kt)("p",null,"There are three main ways to get the background worker swf as a ByteArray\nobject:"),(0,o.kt)("h3",{id:"embedding-the-worker-swf"},"Embedding the worker swf"),(0,o.kt)("p",null,"Use the ","[","Embed","]"," metatag to embed the worker swf into the main swf as a\nByteArray:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'[Embed(source="../swfs/BgWorker.swf", mimeType="application/octet-stream")]\nprivate static var BgWorker_ByteClass:Class;\nprivate function createWorker():void\n{\n    var workerBytes:ByteArray = new BgWorker_ByteClass();\n    var bgWorker:Worker = WorkerDomain.current.createWorker(workerBytes);\n\n    // ... set up worker communication and start the worker\n}\n')),(0,o.kt)("p",null,"The worker swf is compiled into the main swf as a ByteArray subclass named\nBgWorker_ByteClass. Creating an instance of that class gives you a ByteArray\npre-populated with the worker swf's bytes."),(0,o.kt)("h3",{id:"loading-an-external-worker-swf"},"Loading an external worker swf"),(0,o.kt)("p",null,"Use a URLLoader object to load an external swf file. The swf file must come from\nthe same security domain, such as a swf file loaded from the same internet\ndomain as the main swf or included in an AIR application package."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'var workerLoader:URLLoader = new URLLoader();\nworkerLoader.dataFormat = URLLoaderDataFormat.BINARY;\nworkerLoader.addEventListener(Event.COMPLETE, loadComplete);\nworkerLoader.load(new URLRequest("BgWorker.swf"));\n\nprivate function loadComplete(event:Event):void\n{\n    // create the background worker\n    var workerBytes:ByteArray = event.target.data as ByteArray;\n    var bgWorker:Worker = WorkerDomain.current.createWorker(workerBytes);\n\n    // ... set up worker communication and start the worker\n}\n')),(0,o.kt)("p",null,"When the URLLoader finishes loading the swf file, the swf's bytes are available\nin the URLLoader object's ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," property ( ",(0,o.kt)("inlineCode",{parentName:"p"},"event.target.data")," in the example)."),(0,o.kt)("h3",{id:"using-the-main-swf-as-the-worker-swf"},"Using the main swf as the worker swf"),(0,o.kt)("p",null,"You can use a single swf as both the main swf and the worker swf. Use the main\ndisplay class's ",(0,o.kt)("inlineCode",{parentName:"p"},"loaderInfo.bytes")," property to access the swf's bytes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// The primordial worker's main class constructor\npublic function PrimordialWorkerClass()\n{\n    init();\n}\n\nprivate function init():void\n{\n    var swfBytes:ByteArray = this.loaderInfo.bytes;\n\n    // Check to see if this is the primordial worker or the background worker\n    if (Worker.current.isPrimordial)\n    {\n        // create a background worker\n        var bgWorker:Worker = WorkerDomain.current.createWorker(swfBytes);\n\n        // ... set up worker communication and start the worker\n    }\n    else // entry point for the background worker\n    {\n        // set up communication between workers using getSharedProperty()\n        // ... (not shown)\n\n        // start the background work\n    }\n}\n")),(0,o.kt)("p",null,"If you use this technique, use an ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," statement to branch the swf file code\nwithin the main class's constructor or a method it calls. To determine whether\nthe code is running in the main worker or the background worker, check the\ncurrent Worker object's ",(0,o.kt)("inlineCode",{parentName:"p"},"isPrimordial")," property, as shown in the example."),(0,o.kt)("h2",{id:"starting-a-workers-execution"},"Starting a worker's execution"),(0,o.kt)("p",null,"Once you have created a worker, you start its code executing by calling the\nWorker object's ",(0,o.kt)("inlineCode",{parentName:"p"},"start()")," method. The ",(0,o.kt)("inlineCode",{parentName:"p"},"start()")," operation doesn't happen\nimmediately. To know when the worker is running, register a listener for the\nWorker object's ",(0,o.kt)("inlineCode",{parentName:"p"},"workerState")," event. That event is dispatched when the Worker\nobject switches states in its lifecycle, such as when it starts executing code.\nIn your ",(0,o.kt)("inlineCode",{parentName:"p"},"workerState")," event handler, check that the Worker object's ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),"\nproperty is ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkerState.RUNNING"),". At that point the worker is running and its\nmain class's constructor has run. The following code listing shows an example of\nregistering for the ",(0,o.kt)("inlineCode",{parentName:"p"},"workerState")," event and calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"start()")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// listen for worker state changes to know when the worker is running\nbgWorker.addEventListener(Event.WORKER_STATE, workerStateHandler);\n// set up communication between workers using\n// setSharedProperty(), createMessageChannel(), etc.\n// ... (not shown)\nbgWorker.start();\nprivate function workerStateHandler(event:Event):void\n{\n    if (bgWorker.state == WorkerState.RUNNING)\n    {\n        // The worker is running.\n        // Send it a message or wait for a response.\n    }\n}\n")),(0,o.kt)("h2",{id:"managing-worker-execution"},"Managing worker execution"),(0,o.kt)("p",null,"At any time you can access the set of running workers in your application using\nthe WorkerDomain class's ",(0,o.kt)("inlineCode",{parentName:"p"},"listWorkers()")," method. This method returns the set of\nworkers whose ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," property is ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkerState.RUNNING"),", including the\nprimordial worker. If a worker hasn't been started or if its execution has\nalready been stopped, it is not included."),(0,o.kt)("p",null,"If you no longer need a worker, you can call the Worker object's ",(0,o.kt)("inlineCode",{parentName:"p"},"terminate()"),"\nmethod to shut down the worker and release its memory and other system\nresources."))}u.isMDXComponent=!0}}]);