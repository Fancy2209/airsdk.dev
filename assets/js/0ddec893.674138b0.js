"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[94031],{3905:(t,e,a)=>{a.d(e,{Zo:()=>i,kt:()=>m});var l=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,l)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function u(t,e){if(null==t)return{};var a,l,n=function(t,e){if(null==t)return{};var a,l,n={},r=Object.keys(t);for(l=0;l<r.length;l++)a=r[l],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(l=0;l<r.length;l++)a=r[l],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var c=l.createContext({}),o=function(t){var e=l.useContext(c),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},i=function(t){var e=o(t.components);return l.createElement(c.Provider,{value:e},t.children)},p="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},h=l.forwardRef((function(t,e){var a=t.components,n=t.mdxType,r=t.originalType,c=t.parentName,i=u(t,["components","mdxType","originalType","parentName"]),p=o(a),h=n,m=p["".concat(c,".").concat(h)]||p[h]||k[h]||r;return a?l.createElement(m,s(s({ref:e},i),{},{components:a})):l.createElement(m,s({ref:e},i))}));function m(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var r=a.length,s=new Array(r);s[0]=h;var u={};for(var c in e)hasOwnProperty.call(e,c)&&(u[c]=e[c]);u.originalType=t,u[p]="string"==typeof t?t:n,s[1]=u;for(var o=2;o<r;o++)s[o]=a[o];return l.createElement.apply(null,s)}return l.createElement.apply(null,a)}h.displayName="MDXCreateElement"},74900:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>k,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var l=a(87462),n=(a(67294),a(3905));const r={sidebar_position:2},s="Characters, metacharacters, and metasequences",u={unversionedId:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/characters-metacharacters-and-metasequences",id:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/characters-metacharacters-and-metasequences",title:"Characters, metacharacters, and metasequences",description:"The simplest regular expression is one that matches a sequence of characters, as",source:"@site/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/characters-metacharacters-and-metasequences.md",sourceDirName:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax",slug:"/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/characters-metacharacters-and-metasequences",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/characters-metacharacters-and-metasequences",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/characters-metacharacters-and-metasequences.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Creating an instance of a regular expression",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/creating-an-instance-of-a-regular-expression"},next:{title:"Character classes",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes"}},c={},o=[{value:"About metacharacters",id:"about-metacharacters",level:4},{value:"About metasequences",id:"about-metasequences",level:4}],i={toc:o},p="wrapper";function k(t){let{components:e,...a}=t;return(0,n.kt)(p,(0,l.Z)({},i,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"characters-metacharacters-and-metasequences"},"Characters, metacharacters, and metasequences"),(0,n.kt)("p",null,"The simplest regular expression is one that matches a sequence of characters, as\nin the following example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"var pattern:RegExp = /hello/;\n")),(0,n.kt)("p",null,"However, the following characters, known as metacharacters ",(0,n.kt)("em",{parentName:"p"},",")," have special\nmeanings in regular expressions:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"^ $ \\ . * + ? ( ) [ ] { } |\n")),(0,n.kt)("p",null,"For example, the following regular expression matches the letter A followed by\nzero or more instances of the letter B (the asterisk metacharacter indicates\nthis repetition), followed by the letter C:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"/AB*C/\n")),(0,n.kt)("p",null,"To include a metacharacter without its special meaning in a regular expression\npattern, you must use the backslash ( ",(0,n.kt)("inlineCode",{parentName:"p"},"\\")," ) escape character. For example, the\nfollowing regular expression matches the letter A followed by the letter B,\nfollowed by an asterisk, followed by the letter C:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"var pattern:RegExp = /AB\\*C/;\n")),(0,n.kt)("p",null,"A ",(0,n.kt)("em",{parentName:"p"},"metasequence,")," like a metacharacter, has special meaning in a regular\nexpression. A metasequence is made up of more than one character. The following\nsections provide details on using metacharacters and metasequences."),(0,n.kt)("h4",{id:"about-metacharacters"},"About metacharacters"),(0,n.kt)("p",null,"The following table summarizes the metacharacters that you can use in regular\nexpressions:"),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,(0,n.kt)("p",null,"Metacharacter")),(0,n.kt)("th",null,(0,n.kt)("p",null,"Description")))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"^"),"(caret)")),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches at the start of the string. With the",(0,n.kt)("samp",null,"m")," (",(0,n.kt)("samp",null,"multiline")," ) flag set, the caret matches the start of a line as well (see ",(0,n.kt)("a",{href:"flags-and-properties"},"Flags and properties")," ). Note that when used at the start of a character class, the caret indicates negation, not the start of a string. For more information, see ",(0,n.kt)("a",{href:"character-classes"},"Character classes"),"."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"$"),"(dollar sign)")),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches at the end of the string. With the",(0,n.kt)("samp",null,"m")," (",(0,n.kt)("samp",null,"multiline")," ) flag set, ",(0,n.kt)("samp",null,"$")," matches the position before a newline (",(0,n.kt)("samp",null,"\\n")," ) character as well. For more information, see ",(0,n.kt)("a",{href:"flags-and-properties"},"Flags and properties"),"."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\"),"(backslash)")),(0,n.kt)("td",null,(0,n.kt)("p",null,"Escapes the special metacharacter meaning of special characters."),(0,n.kt)("p",null,"Also, use the backslash character if you want to use a forward slash character in a regular expression literal, as in",(0,n.kt)("samp",null,"/1\\/2/")," (to match the character 1, followed by the forward slash character, followed by the character 2)."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"."),"(dot)")),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches any single character."),(0,n.kt)("p",null,"A dot matches a newline character (",(0,n.kt)("samp",null,"\\n")," ) only if the",(0,n.kt)("samp",null,"s")," (",(0,n.kt)("samp",null,"dotall")," ) flag is set. For more information, see ",(0,n.kt)("a",{href:"flags-and-properties"},"Flags and properties"),"."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"*"),"(star)")),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches the previous item repeated zero or more times."),(0,n.kt)("p",null,"For more information, see ",(0,n.kt)("a",{href:"quantifiers"},"Quantifiers"),"."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"+"),"(plus)")),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches the previous item repeated one or more times."),(0,n.kt)("p",null,"For more information, see ",(0,n.kt)("a",{href:"quantifiers"},"Quantifiers"),"."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"?"),"(question mark)")),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches the previous item repeated zero times or one time."),(0,n.kt)("p",null,"For more information, see ",(0,n.kt)("a",{href:"quantifiers"},"Quantifiers"),"."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"("),"and ",(0,n.kt)("samp",null,")"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Defines groups within the regular expression. Use groups for the following:"),(0,n.kt)("ul",{class:"incremental"},(0,n.kt)("li",null,(0,n.kt)("p",null,"To confine the scope of the | alternator:",(0,n.kt)("samp",null,"/(a|b|c)d/"))),(0,n.kt)("li",null,(0,n.kt)("p",null,"To define the scope of a quantifier:",(0,n.kt)("samp",null,"/(walla.)",2,"/"))),(0,n.kt)("li",null,(0,n.kt)("p",null,"In backreferences. For example, the",(0,n.kt)("samp",null,"\\1")," in the following regular expression matches whatever matched the first parenthetical group of the pattern:")),(0,n.kt)("li",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"/(\\w*) is repeated: \\1/")))),(0,n.kt)("p",null,"For more information, see ",(0,n.kt)("a",{href:"groups"},"Groups"),"."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"["),"and ",(0,n.kt)("samp",null,"]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Defines a character class, which defines possible matches for a single character:"),(0,n.kt)("p",null,(0,n.kt)("samp",null,"/[aeiou]/")," matches any one of the specified characters."),(0,n.kt)("p",null,"Within character classes, use the hyphen (",(0,n.kt)("samp",null,"-"),") to designate a range of characters:"),(0,n.kt)("p",null,(0,n.kt)("samp",null,"/[A-Z0-9]/"),"matches uppercase A through Z or 0 through 9."),(0,n.kt)("p",null,"Within character classes, insert a backslash to escape the ] and"),(0,n.kt)("p",null,"- characters:"),(0,n.kt)("p",null,(0,n.kt)("samp",null,"/[+\\-]\\d+/"),"matches either ",(0,n.kt)("samp",null,"+")," or",(0,n.kt)("samp",null,"-")," before one or more digits."),(0,n.kt)("p",null,"Within character classes, other characters, which are normally metacharacters, are treated as normal characters (not metacharacters), without the need for a backslash:"),(0,n.kt)("p",null,(0,n.kt)("samp",null,"/[$]/")," \xa3 matches either ",(0,n.kt)("samp",null,"$"),(0,n.kt)("samp",null,"or")," \xa3."),(0,n.kt)("p",null,"For more information, see ",(0,n.kt)("a",{href:"character-classes"},"Character classes"),"."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"|"),(0,n.kt)("em",null,"(pipe)"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Used for alternation, to match either the part on the left side or the part on the right side:"),(0,n.kt)("p",null,(0,n.kt)("samp",null,"/abc|xyz/")," matches either ",(0,n.kt)("samp",null,"abc")," or",(0,n.kt)("samp",null,"xyz")," ."))))),(0,n.kt)("h4",{id:"about-metasequences"},"About metasequences"),(0,n.kt)("p",null,"Metasequences are sequences of characters that have special meaning in a regular\nexpression pattern. The following table describes these metasequences:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"right"},"Metasequence"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"right"},(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("samp",null,"{n}"),(0,n.kt)("br",null),(0,n.kt)("samp",null,"{n,}"),(0,n.kt)("br",null),(0,n.kt)("samp",null,"{n, n}"),(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("br",null)),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies a numeric quantifier or quantifier range for the previous item:",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("inlineCode",{parentName:"td"},"/A{27}/")," matches the character A repeated 27 times.",(0,n.kt)("br",null),(0,n.kt)("inlineCode",{parentName:"td"},"/A{3,}/")," matches the character A repeated 3 or more times.",(0,n.kt)("br",null),(0,n.kt)("inlineCode",{parentName:"td"},"/A{3,5}/")," matches the character A repeated 3 to 5 times.",(0,n.kt)("br",null),(0,n.kt)("br",null),"For more information, see ",(0,n.kt)("a",{parentName:"td",href:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers"},"Quantifiers"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"right"},(0,n.kt)("samp",null,"\\b")),(0,n.kt)("td",{parentName:"tr",align:null},"Matches at the position between a word character and a nonword character. If the first or last character in the string is a word character, also matches the start or end of the string.")))),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,(0,n.kt)("p",null,"Metasequence")),(0,n.kt)("th",null,(0,n.kt)("p",null,"Description")))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"{"),(0,n.kt)("samp",null,"n"),(0,n.kt)("samp",null,"}")),(0,n.kt)("p",null,(0,n.kt)("samp",null,"{"),(0,n.kt)("samp",null,"n"),(0,n.kt)("samp",null,",}")),(0,n.kt)("p",null,"and"),(0,n.kt)("p",null,(0,n.kt)("samp",null,"{"),(0,n.kt)("samp",null,"n"),(0,n.kt)("samp",null,","),(0,n.kt)("samp",null,"n"),(0,n.kt)("samp",null,"}"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Specifies a numeric quantifier or quantifier range for the previous item:"),(0,n.kt)("p",null,(0,n.kt)("samp",null,"/A",27,"/")," matches the character ",(0,n.kt)("samp",null,"A"),"repeated ",(0,n.kt)("samp",null,"27"),"times."),(0,n.kt)("p",null,(0,n.kt)("samp",null,"/A","{3,}","/")," matches the character ",(0,n.kt)("samp",null,"A"),"repeated ",(0,n.kt)("samp",null,"3")," or more times."),(0,n.kt)("p",null,(0,n.kt)("samp",null,"/A","{3,5}","/")," matches the character ",(0,n.kt)("samp",null,"A"),"repeated ",(0,n.kt)("samp",null,"3")," to",(0,n.kt)("samp",null,"5")," times."),(0,n.kt)("p",null,"For more information, see [Quantifiers](/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers) ."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\b"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches at the position between a word character and a nonword character. If the first or last character in the string is a word character, also matches the start or end of the string."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\B"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches at the position between two word characters. Also matches the position between two nonword characters."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\d"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches a decimal digit."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\D"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches any character other than a digit."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\f"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches a form feed character."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\n"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches the newline character."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\r"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches the return character."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\s"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches any white-space character (a space, tab, newline, or return character)."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\S"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches any character other than a white-space character."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\t"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches the tab character."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\u"),(0,n.kt)("samp",null,"nnnn"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches the Unicode character with the character code specified by the hexadecimal number ",(0,n.kt)("em",null,"nnnn"),". For example,",(0,n.kt)("samp",null,"\\u263a")," is the smiley character."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\v"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches a vertical feed character."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\w"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches a word character ( ",(0,n.kt)("samp",null,"AZ")," \u2013,",(0,n.kt)("samp",null,"az")," \u2013,",(0,n.kt)("samp",null,"0-9")," , or",(0,n.kt)("samp",null,"_")," ). Note that",(0,n.kt)("samp",null,"\\w")," does not match non-English characters, such as",(0,n.kt)("samp",null,"\xe9"),",",(0,n.kt)("samp",null,"\xf1"),", or",(0,n.kt)("samp",null,"\xe7"),"."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\W"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches any character other than a word character."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("samp",null,"\\\\x"),(0,n.kt)("samp",null,"nn"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Matches the character with the specified ASCII value, as defined by the hexadecimal number ",(0,n.kt)("em",null,"nn"),"."))))))}k.isMDXComponent=!0}}]);