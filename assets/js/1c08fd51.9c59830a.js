"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[98948],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=d(n),c=i,f=h["".concat(l,".").concat(c)]||h[c]||m[c]||r;return n?a.createElement(f,s(s({ref:t},p),{},{components:n})):a.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[h]="string"==typeof e?e:i,s[1]=o;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},32336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:3},s="Using the load() and save() methods",o={unversionedId:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/using-the-load-and-save-methods",id:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/using-the-load-and-save-methods",title:"Using the load() and save() methods",description:"Flash Player 10 added the load() and save() methods to the FileReference",source:"@site/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/using-the-load-and-save-methods.md",sourceDirName:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files",slug:"/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/using-the-load-and-save-methods",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/using-the-load-and-save-methods",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/using-the-load-and-save-methods.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Data formats, and choosing the read and write methods to use",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/data-formats-and-choosing-the-read-and-write-methods-to-use"},next:{title:"Example: Reading an XML file into an XML object",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-an-xml-file-into-an-xml-object"}},l={},d=[],p={toc:d},h="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-the-load-and-save-methods"},"Using the load() and save() methods"),(0,i.kt)("p",null,"Flash Player 10 added the ",(0,i.kt)("inlineCode",{parentName:"p"},"load()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"save()")," methods to the FileReference\nclass. These methods are also in AIR 1.5, and the File class inherits the\nmethods from the FileReference class. These methods were designed to provide a\nsecure means for users to load and save file data in Flash Player. However, AIR\napplications can also use these methods as an easy way to load and save files\nasynchronously."),(0,i.kt)("p",null,"For example, the following code saves a string to a text file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'var file:File = File.applicationStorageDirectory.resolvePath("test.txt");\nvar str:String = "Hello.";\nfile.addEventListener(Event.COMPLETE, fileSaved);\nfile.save(str);\nfunction fileSaved(event:Event):void\n{\n    trace("Done.");\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," parameter of the ",(0,i.kt)("inlineCode",{parentName:"p"},"save()")," method can take a String, XML, or ByteArray\nvalue. When the argument is a String or XML value, the method saves the file as\na UTF-8\u2013encoded text file."),(0,i.kt)("p",null,"When this code sample executes, the application displays a dialog box in which\nthe user selects the saved file destination."),(0,i.kt)("p",null,"The following code loads a string from a UTF-8\u2013encoded text file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'var file:File = File.applicationStorageDirectory.resolvePath("test.txt");\nfile.addEventListener(Event.COMPLETE, loaded);\nfile.load();\nvar str:String;\nfunction loaded(event:Event):void\n{\n    var bytes:ByteArray = file.data;\n    str = bytes.readUTFBytes(bytes.length);\n    trace(str);\n}\n')),(0,i.kt)("p",null,"The FileStream class provides more functionality than that provided by the\n",(0,i.kt)("inlineCode",{parentName:"p"},"load()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"save()")," methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Using the FileStream class, you can read and write data both synchronously and\nasynchronously.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Using the FileStream class lets you write incrementally to a file.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Using the FileStream class lets you open a file for random access (both\nreading from and writing to any section of the file).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The FileStream class lets you specify the type of file access you have to the\nfile, by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"fileMode")," parameter of the ",(0,i.kt)("inlineCode",{parentName:"p"},"open()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"openAsync()"),"\nmethod.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The FileStream class lets you save data to files without presenting the user\nwith an Open or Save dialog box.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can directly use types other than byte arrays when reading data with the\nFileStream class."))))}m.isMDXComponent=!0}}]);