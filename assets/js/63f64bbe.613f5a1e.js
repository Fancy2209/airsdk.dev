"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[12890],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),h=o,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||a;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=h;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},93176:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const a={sidebar_position:1},s="Understanding workers and concurrency",i={unversionedId:"development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency",id:"development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency",title:"Understanding workers and concurrency",description:"When an application doesn't use workers, the application's code executes in a",source:"@site/docs/development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency.md",sourceDirName:"development/client-system-interaction/using-workers-for-concurrency",slug:"/development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency",permalink:"/docs/development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mainSidebar",previous:{title:"Using workers for concurrency",permalink:"/docs/development/client-system-interaction/using-workers-for-concurrency/"},next:{title:"Creating and managing workers",permalink:"/docs/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers"}},c={},l=[],u={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"understanding-workers-and-concurrency"},"Understanding workers and concurrency"),(0,o.kt)("p",null,"When an application doesn't use workers, the application's code executes in a\nsingle linear block of executing steps known as an execution ",(0,o.kt)("span",{class:"dfn"},"\nthread "),". The thread executes the code that a developer writes. It also\nexecutes much of the code that's part of the runtime, most notably the code that\nupdates the screen when display objects' properties change. Although code is\nwritten in chunks as methods and classes, at run time the code executes one line\nat a time as though it were written in a single long series of steps. Consider\nthis hypothetical example of the steps that an application executes:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Enter frame: The runtime calls any ",(0,o.kt)("inlineCode",{parentName:"p"},"enterFrame")," event handlers and runs\ntheir code one at a time")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Mouse event: The user moves the mouse, and the runtime calls any mouse event\nhandlers as the various rollover and rollout events happen")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Load complete event: A request to load an xml file from a url returns with\nthe loaded file data. The event handler is called and runs its steps,\nreading the xml content and creating a set of objects from the xml data.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Mouse event: The mouse has moved again, so the runtime calls the relevant\nmouse event handlers")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Rendering: No more events are waiting, so the runtime updates the screen\nbased on any changes made to display objects")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Enter frame: The cycle begins again"))),(0,o.kt)("p",null,"As described in the example, the hypothetical steps 1-5 run in sequence within a\nsingle block of time called a frame. Because they run in sequence in a single\nthread, the runtime can't interrupt one step of the process to run another one.\nAt a frame rate of 30 frames-per-second, the runtime has less than one thirtieth\nof a second to execute all those operations. In many cases that is enough time\nfor the code to run, and the runtime simply waits during the remaining time.\nHowever, suppose the xml data that loads in step 3 is a very large, deeply\nnested xml structure. As the code loops over the xml and creates objects, it\nmight conceivably take longer than one thirtieth of a second to do that work. In\nthat case, the later steps (responding to the mouse and redrawing the screen) do\nnot happen as soon as they should. This causes the screen to freeze and stutter\nas the screen isn't redrawn fast enough in response to the user moving the\nmouse."),(0,o.kt)("p",null,"If all the code executes in the same thread, there is only one way to avoid\noccasional stutters and freezes. This is to not do long-running operations such\nas looping over a large set of data. ActionScript workers provide another\nsolution. Using a worker, you can execute long-running code in a separate\nworker. Each worker runs in a separate thread, so the background worker performs\nthe long-running operation in its own thread. That frees up the main worker's\nexecution thread to redraw the screen each frame without being blocked by other\nwork."),(0,o.kt)("p",null,"The ability to run multiple code operations at the same time in this way is\nknown as ",(0,o.kt)("span",{class:"dfn"}," concurrency "),'. When the background worker\nfinishes its work, or at "progress" points along the way, you can send the main\nworker notifications and data. In this way, you can write code that performs\ncomplex or time consuming operations but avoid the bad user experience of having\nthe screen freeze.'),(0,o.kt)("p",null,"Workers are useful because they decrease the chances of the frame rate dropping\ndue to the main rendering thread being blocked by other code. However, workers\nrequire additional system memory and CPU use, which can be costly to overall\napplication performance. Because each worker uses its own instance of the\nruntime virtual machine, even the overhead of a trivial worker can be large.\nWhen using workers, test your code across all your target platforms to ensure\nthat the demands on the system are not too large. Adobe recommends that you do\nnot use more than one or two background workers in a typical scenario."))}p.isMDXComponent=!0}}]);