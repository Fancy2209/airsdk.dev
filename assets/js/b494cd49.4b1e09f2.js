"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[53496],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),u=o,m=d["".concat(s,".").concat(u)]||d[u]||f[u]||i;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},93544:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const i={},a="Color matrix filter",l={unversionedId:"development/display/filtering-display-objects/color-matrix-filter",id:"development/display/filtering-display-objects/color-matrix-filter",title:"Color matrix filter",description:"The ColorMatrixFilter class is used to manipulate the color and alpha values of",source:"@site/docs/development/display/filtering-display-objects/color-matrix-filter.md",sourceDirName:"development/display/filtering-display-objects",slug:"/development/display/filtering-display-objects/color-matrix-filter",permalink:"/docs/development/display/filtering-display-objects/color-matrix-filter",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/filtering-display-objects/color-matrix-filter.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Blur filter",permalink:"/docs/development/display/filtering-display-objects/blur-filter"},next:{title:"Convolution filter",permalink:"/docs/development/display/filtering-display-objects/convolution-filter"}},s={},c=[],p={toc:c},d="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"color-matrix-filter"},"Color matrix filter"),(0,o.kt)("p",null,"The ColorMatrixFilter class is used to manipulate the color and alpha values of\nthe filtered object. This allows you to create saturation changes, hue rotation\n(shifting a palette from one range of colors to another), luminance-to-alpha\nchanges, and other color manipulation effects using values from one color\nchannel and potentially applying them to other channels."),(0,o.kt)("p",null,"Conceptually, the filter goes through the pixels in the source image one by one\nand separates each pixel into its red, green, blue, and alpha components. It\nthen multiplies values provided in the color matrix by each of these values,\nadding the results together to determine the resulting color value that will be\ndisplayed on the screen for that pixel. The ",(0,o.kt)("inlineCode",{parentName:"p"},"matrix")," property of the filter is\nan array of 20 numbers that are used in calculating the final color. For details\nof the specific algorithm used to calculate the color values, see the entry\ndescribing the\n",(0,o.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/filters/ColorMatrixFilter.html#matrix"},(0,o.kt)("inlineCode",{parentName:"a"},"ColorMatrixFilter.matrix")),"\nproperty in the\n",(0,o.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/index.html"},"ActionScript 3.0 Reference for the Adobe Flash Platform"),"."))}f.isMDXComponent=!0}}]);