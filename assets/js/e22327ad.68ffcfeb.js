"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[86438],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=p(t),h=o,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||i;return t?a.createElement(m,s(s({ref:n},d),{},{components:t})):a.createElement(m,s({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=h;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[u]="string"==typeof e?e:o,s[1]=r;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},99358:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var a=t(87462),o=(t(67294),t(3905));const i={sidebar_position:7},s="Playing sounds",r={unversionedId:"development/rich-media-content/working-with-sound/playing-sounds",id:"development/rich-media-content/working-with-sound/playing-sounds",title:"Playing sounds",description:"Playing a loaded sound can be as simple as calling the Sound.play() method for",source:"@site/docs/development/rich-media-content/working-with-sound/playing-sounds.md",sourceDirName:"development/rich-media-content/working-with-sound",slug:"/development/rich-media-content/working-with-sound/playing-sounds",permalink:"/docs/development/rich-media-content/working-with-sound/playing-sounds",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-sound/playing-sounds.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"mainSidebar",previous:{title:"Working with dynamically generated audio",permalink:"/docs/development/rich-media-content/working-with-sound/working-with-dynamically-generated-audio"},next:{title:"Security considerations when loading and playing sounds",permalink:"/docs/development/rich-media-content/working-with-sound/security-considerations-when-loading-and-playing-sounds"}},l={},p=[{value:"Pausing and resuming a sound",id:"pausing-and-resuming-a-sound",level:2},{value:"Monitoring playback",id:"monitoring-playback",level:2},{value:"Stopping streaming sounds",id:"stopping-streaming-sounds",level:2}],d={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"playing-sounds"},"Playing sounds"),(0,o.kt)("p",null,"Playing a loaded sound can be as simple as calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.play()")," method for\na Sound object, as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'var snd:Sound = new Sound(new URLRequest("smallSound.mp3"));\nsnd.play();\n')),(0,o.kt)("p",null,"When playing back sounds using ActionScript 3.0, you can perform the following\noperations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Play a sound from a specific starting position")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Pause a sound and resume playback from the same position later")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Know exactly when a sound finishes playing")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Track the playback progress of a sound")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Change volume or panning while a sound plays"))),(0,o.kt)("p",null,"To perform these operations during playback, use the SoundChannel, SoundMixer,\nand SoundTransform classes."),(0,o.kt)("p",null,"The SoundChannel class controls the playback of a single sound. The\n",(0,o.kt)("inlineCode",{parentName:"p"},"SoundChannel.position")," property can be thought of as a playhead, indicating the\ncurrent point in the sound data that's being played."),(0,o.kt)("p",null,"When an application calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.play()")," method, a new instance of the\nSoundChannel class is created to control the playback."),(0,o.kt)("p",null,"Your application can play a sound from a specific starting position by passing\nthat position, in terms of milliseconds, as the ",(0,o.kt)("inlineCode",{parentName:"p"},"startTime")," parameter of the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.play()")," method. It can also specify a fixed number of times to repeat the\nsound in rapid succession by passing a numeric value in the ",(0,o.kt)("inlineCode",{parentName:"p"},"loops")," parameter of\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.play()")," method."),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.play()")," method is called with both a ",(0,o.kt)("inlineCode",{parentName:"p"},"startTime")," parameter and a\n",(0,o.kt)("inlineCode",{parentName:"p"},"loops")," parameter, the sound is played back repeatedly from the same starting\npoint each time, as shown in the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'var snd:Sound = new Sound(new URLRequest("repeatingSound.mp3"));\nsnd.play(1000, 3);\n')),(0,o.kt)("p",null,"In this example, the sound is played from a point one second after the start of\nthe sound, three times in succession."),(0,o.kt)("h2",{id:"pausing-and-resuming-a-sound"},"Pausing and resuming a sound"),(0,o.kt)("p",null,"If your application plays long sounds, like songs or podcasts, you probably want\nto let users pause and resume the playback of those sounds. A sound cannot\nliterally be paused during playback in ActionScript; it can only be stopped.\nHowever, a sound can be played starting from any point. You can record the\nposition of the sound at the time it was stopped, and then replay the sound\nstarting at that position later."),(0,o.kt)("p",null,"For example, let's say your code loads and plays a sound file like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'var snd:Sound = new Sound(new URLRequest("bigSound.mp3"));\nvar channel:SoundChannel = snd.play();\n')),(0,o.kt)("p",null,"While the sound plays, the ",(0,o.kt)("inlineCode",{parentName:"p"},"SoundChannel.position")," property indicates the point\nin the sound file that is currently being played. Your application can store the\nposition value before stopping the sound from playing, as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"var pausePosition:int = channel.position;\nchannel.stop();\n")),(0,o.kt)("p",null,"To resume playing the sound, pass the previously stored position value to\nrestart the sound from the same point it stopped at before."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"channel = snd.play(pausePosition);\n")),(0,o.kt)("h2",{id:"monitoring-playback"},"Monitoring playback"),(0,o.kt)("p",null,"Your application might want to know when a sound stops playing so it can start\nplaying another sound, or clean up some resources used during the previous\nplayback. The SoundChannel class dispatches an ",(0,o.kt)("inlineCode",{parentName:"p"},"Event.SOUND_COMPLETE")," event when\nits sound finishes playing. Your application can listen for this event and take\nappropriate action, as shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import flash.events.Event;\nimport flash.media.Sound;\nimport flash.net.URLRequest;\n\nvar snd:Sound = new Sound();\nvar req:URLRequest = new URLRequest("smallSound.mp3");\nsnd.load(req);\n\nvar channel:SoundChannel = snd.play();\nchannel.addEventListener(Event.SOUND_COMPLETE, onPlaybackComplete);\n\npublic function onPlaybackComplete(event:Event)\n{\n    trace("The sound has finished playing.");\n}\n')),(0,o.kt)("p",null,"The SoundChannel class does not dispatch progress events during playback. To\nreport on playback progress, your application can set up its own timing\nmechanism and track the position of the sound playhead."),(0,o.kt)("p",null,"To calculate what percentage of a sound has been played, you can divide the\nvalue of the ",(0,o.kt)("inlineCode",{parentName:"p"},"SoundChannel.position")," property by the length of the sound data\nthat's being played:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"var playbackPercent:uint = 100 * (channel.position / snd.length);\n")),(0,o.kt)("p",null,"However, this code only reports accurate playback percentages if the sound data\nwas fully loaded before playback began. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.length")," property shows the\nsize of the sound data that is currently loaded, not the eventual size of the\nentire sound file. To track the playback progress of a streaming sound that is\nstill loading, your application should estimate the eventual size of the full\nsound file and use that value in its calculations. You can estimate the eventual\nlength of the sound data using the ",(0,o.kt)("inlineCode",{parentName:"p"},"bytesLoaded")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bytesTotal")," properties of\nthe Sound object, as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"var estimatedLength:int =\nMath.ceil(snd.length / (snd.bytesLoaded / snd.bytesTotal));\nvar playbackPercent:uint = 100 * (channel.position / estimatedLength);\n")),(0,o.kt)("p",null,"The following code loads a larger sound file and uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"Event.ENTER_FRAME"),"\nevent as its timing mechanism for showing playback progress. It periodically\nreports on the playback percentage, which is calculated as the current position\nvalue divided by the total length of the sound data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import flash.events.Event;\nimport flash.media.Sound;\nimport flash.net.URLRequest;\n\nvar snd:Sound = new Sound();\nvar req:URLRequest = new\nURLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");\nsnd.load(req);\n\nvar channel:SoundChannel;\nchannel = snd.play();\naddEventListener(Event.ENTER_FRAME, onEnterFrame);\nchannel.addEventListener(Event.SOUND_COMPLETE, onPlaybackComplete);\n\nfunction onEnterFrame(event:Event):void\n{\n    var estimatedLength:int =\n        Math.ceil(snd.length / (snd.bytesLoaded / snd.bytesTotal));\n    var playbackPercent:uint =\n        Math.round(100 * (channel.position / estimatedLength));\n    trace("Sound playback is " + playbackPercent + "% complete.");\n}\n\nfunction onPlaybackComplete(event:Event)\n{\n    trace("The sound has finished playing.");\n    removeEventListener(Event.ENTER_FRAME, onEnterFrame);\n}\n')),(0,o.kt)("p",null,"After the sound data starts loading, this code calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"snd.play()")," method and\nstores the resulting SoundChannel object in the ",(0,o.kt)("inlineCode",{parentName:"p"},"channel")," variable. Then it adds\nan event listener to the main application for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Event.ENTER_FRAME")," event and\nanother event listener to the SoundChannel object for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Event.SOUND_COMPLETE"),"\nevent that occurs when playback is complete."),(0,o.kt)("p",null,"Each time the application reaches a new frame in its animation, the\n",(0,o.kt)("inlineCode",{parentName:"p"},"onEnterFrame()")," method is called. The ",(0,o.kt)("inlineCode",{parentName:"p"},"onEnterFrame()")," method estimates the\ntotal length of the sound file based on the amount of data that has already been\nloaded, and then it calculates and displays the current playback percentage."),(0,o.kt)("p",null,"When the entire sound has been played, the ",(0,o.kt)("inlineCode",{parentName:"p"},"onPlaybackComplete()")," method\nexecutes, removing the event listener for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Event.ENTER_FRAME")," event so that\nit doesn't try to display progress updates after playback is done."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Event.ENTER_FRAME")," event can be dispatched many times per second. In some\ncases, you won't want to display playback progress that frequently. In those\ncases, your application can set up its own timing mechanism using the\nflash.util.Timer class; see\n",(0,o.kt)("a",{parentName:"p",href:"/docs/development/core-actionscript-classes/working-with-dates-and-times/"},"Working with dates and times"),"."),(0,o.kt)("h2",{id:"stopping-streaming-sounds"},"Stopping streaming sounds"),(0,o.kt)("p",null,"There is a quirk in the playback process for sounds that are streaming\u2014that is,\nfor sounds that are still loading while they are being played. When your\napplication calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"SoundChannel.stop()")," method on a SoundChannel instance\nthat is playing back a streaming sound, the sound playback stops for one frame,\nand then on the next frame, it restarts from the beginning of the sound. This\noccurs because the sound loading process is still underway. To stop both the\nloading and the playback of a streaming sound, call the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.close()")," method."))}c.isMDXComponent=!0}}]);