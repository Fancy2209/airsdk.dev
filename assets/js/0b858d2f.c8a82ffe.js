"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[94367],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(n),h=i,m=p["".concat(c,".").concat(h)]||p[h]||d[h]||r;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},18340:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:3},l="Using the ExternalInterface class",o={unversionedId:"development/networking-and-communication/using-the-external-api/using-the-externalinterface-class",id:"development/networking-and-communication/using-the-external-api/using-the-externalinterface-class",title:"Using the ExternalInterface class",description:"Communication between ActionScript and the container application can take one of",source:"@site/docs/development/networking-and-communication/using-the-external-api/using-the-externalinterface-class.md",sourceDirName:"development/networking-and-communication/using-the-external-api",slug:"/development/networking-and-communication/using-the-external-api/using-the-externalinterface-class",permalink:"/docs/development/networking-and-communication/using-the-external-api/using-the-externalinterface-class",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/networking-and-communication/using-the-external-api/using-the-externalinterface-class.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"External API requirements and advantages",permalink:"/docs/development/networking-and-communication/using-the-external-api/external-api-requirements-and-advantages"},next:{title:"External API example: Communicating between ActionScript and JavaScript in a web browser",permalink:"/docs/development/networking-and-communication/using-the-external-api/external-api-example-communicating-between-actionscript-and-javascript-in-a-web-browser"}},c={},s=[{value:"Getting information about the external container",id:"getting-information-about-the-external-container",level:2},{value:"Calling external code from ActionScript",id:"calling-external-code-from-actionscript",level:2},{value:"Calling ActionScript code from the container",id:"calling-actionscript-code-from-the-container",level:2},{value:"The external API&#39;s XML format",id:"the-external-apis-xml-format",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-the-externalinterface-class"},"Using the ExternalInterface class"),(0,i.kt)("p",null,"Communication between ActionScript and the container application can take one of\ntwo forms: either ActionScript can call code (such as a JavaScript function)\ndefined in the container, or code in the container can call an ActionScript\nfunction that has been designated as being callable. In either case, information\ncan be sent to the code being called, and results can be returned to the code\nmaking the call."),(0,i.kt)("p",null,"To facilitate this communication, the ExternalInterface class includes two\nstatic properties and two static methods. These properties and methods are used\nto obtain information about the external interface connection, to execute code\nin the container from ActionScript, and to make ActionScript functions available\nto be called by the container."),(0,i.kt)("h2",{id:"getting-information-about-the-external-container"},"Getting information about the external container"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.available")," property indicates whether the current Flash\nPlayer is in a container that offers an external interface. If the external\ninterface is available, this property is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," ; otherwise, it is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),".\nBefore using any of the other functionality in the ExternalInterface class, you\nshould always check to make sure that the current container supports external\ninterface communication, as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"if (ExternalInterface.available)\n{\n    // Perform ExternalInterface method calls here.\n}\n")),(0,i.kt)("p",null,"Note: The ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.available")," property reports whether the current\ncontainer is a type that supports ExternalInterface connectivity. It doesn't\ntell you if JavaScript is enabled in the current browser."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.objectID")," property allows you to determine the unique\nidentifier of the Flash Player instance (specifically, the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," attribute of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"object")," tag in Internet Explorer or the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," attribute of the ",(0,i.kt)("inlineCode",{parentName:"p"},"embed")," tag in\nbrowsers using the NPRuntime interface). This unique ID represents the current\nSWF document in the browser, and can be used to make reference to the SWF\ndocument\u2014for example, when calling a JavaScript function in a container HTML\npage. When the Flash Player container is not a web browser, this property is\n",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("h2",{id:"calling-external-code-from-actionscript"},"Calling external code from ActionScript"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.call()")," method executes code in the container\napplication. It requires at least one parameter, a string containing the name of\nthe function to be called in the container application. Any additional\nparameters passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.call()")," method are passed along to\nthe container as parameters of the function call."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// calls the external function "addNumbers"\n// passing two parameters, and assigning that function\'s result\n// to the variable "result"\nvar param1:uint = 3;\nvar param2:uint = 7;\nvar result:uint = ExternalInterface.call("addNumbers", param1, param2);\n')),(0,i.kt)("p",null,"If the container is an HTML page, this method invokes the JavaScript function\nwith the specified name, which must be defined in a ",(0,i.kt)("inlineCode",{parentName:"p"},"script")," element in the\ncontaining HTML page. The return value of the JavaScript function is passed back\nto ActionScript."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<script language="JavaScript">\n    // adds two numbers, and sends the result back to ActionScript\n    function addNumbers(num1, num2)\n    {\n        return (num1 + num2);\n    }\n<\/script>\n')),(0,i.kt)("p",null,"If the container is some other ActiveX container, this method causes the Flash\nPlayer ActiveX control to dispatch its ",(0,i.kt)("inlineCode",{parentName:"p"},"FlashCall")," event. The specified function\nname and any parameters are serialized into an XML string by Flash Player. The\ncontainer can access that information in the ",(0,i.kt)("inlineCode",{parentName:"p"},"request")," property of the event\nobject and use it to determine how to execute its own code. To return a value to\nActionScript, the container code calls the ActiveX object's ",(0,i.kt)("inlineCode",{parentName:"p"},"SetReturnValue()"),"\nmethod, passing the result (serialized into an XML string) as a parameter of\nthat method. For more information about the XML format used for this\ncommunication, see\n",(0,i.kt)("a",{parentName:"p",href:"#the-external-apis-xml-format"},"The external API's XML format"),"."),(0,i.kt)("p",null,"Whether the container is a web browser or another ActiveX container, if the call\nfails or the container method does not specify a return value, ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," is\nreturned. The ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.call()")," method throws a SecurityError exception\nif the containing environment belongs to a security sandbox to which the calling\ncode does not have access. You can work around this by setting an appropriate\nvalue for ",(0,i.kt)("inlineCode",{parentName:"p"},"allowScriptAccess")," in the containing environment. For example, to\nchange the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"allowScriptAccess")," in an HTML page, you would edit the\nappropriate attribute in the ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"embed")," tags."),(0,i.kt)("h2",{id:"calling-actionscript-code-from-the-container"},"Calling ActionScript code from the container"),(0,i.kt)("p",null,"A container can only call ActionScript code that's in a function\u2014no other\nActionScript code can be called by a container. To call an ActionScript function\nfrom the container application, you must do two things: register the function\nwith the ExternalInterface class, and then call it from the container's code."),(0,i.kt)("p",null,"First, you must register your ActionScript function to indicate that it should\nbe made available to the container. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternalInterface.addCallback()"),"\nmethod, as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'function callMe(name:String):String\n{\n    return "busy signal";\n}\nExternalInterface.addCallback("myFunction", callMe);\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"addCallback()")," method takes two parameters. The first, a function name as a\nString, is the name by which the function will be known to the container. The\nsecond parameter is the actual ActionScript function that will be executed when\nthe container calls the defined function name. Because these names are distinct,\nyou can specify a function name that will be used by the container, even if the\nactual ActionScript function has a different name. This is especially useful if\nthe function name is not known\u2014for example, if an anonymous function is\nspecified, or if the function to be called is determined at run time."),(0,i.kt)("p",null,"Once an ActionScript function has been registered with the ExternalInterface\nclass, the container can actually call the function. How this is done varies\naccording to the type of container. For example, in JavaScript code in a web\nbrowser, the ActionScript function is called using the registered function name\nas though it's a method of the Flash Player browser object (that is, a method of\nthe JavaScript object representing the ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"embed")," tag). In other words,\nparameters are passed and a result is returned as though a local function is\nbeing called."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<script language="JavaScript">\n    // callResult gets the value "busy signal"\n    var callResult = flashObject.myFunction("my name");\n<\/script>\n...\n<object id="flashObject"...>\n    ...\n    <embed name="flashObject".../>\n</object>\n')),(0,i.kt)("p",null,"Alternatively, when calling an ActionScript function in a SWF file running in a\ndesktop application, the registered function name and any parameters must be\nserialized into an XML-formatted string. Then the call is actually performed by\ncalling the ",(0,i.kt)("inlineCode",{parentName:"p"},"CallFunction()")," method of the ActiveX control with the XML string\nas a parameter. For more information about the XML format used for this\ncommunication, see\n",(0,i.kt)("a",{parentName:"p",href:"#the-external-apis-xml-format"},"The external API's XML format"),"."),(0,i.kt)("p",null,"In either case, the return value of the ActionScript function is passed back to\nthe container code, either directly as a value when the caller is JavaScript\ncode in a browser, or serialized as an XML-formatted string when the caller is\nan ActiveX container."),(0,i.kt)("h2",{id:"the-external-apis-xml-format"},"The external API's XML format"),(0,i.kt)("p",null,"Communication between ActionScript and an application hosting the Shockwave\nFlash ActiveX control uses a specific XML format to encode function calls and\nvalues. There are two parts to the XML format used by the external API. One\nformat is used to represent function calls. Another format is used to represent\nindividual values; this format is used for parameters in functions as well as\nfunction return values. The XML format for function calls is used for calls to\nand from ActionScript. For a function call from ActionScript, Flash Player\npasses the XML to the container; for a call from the container, Flash Player\nexpects the container application to pass it an XML string in this format. The\nfollowing XML fragment shows an example XML-formatted function call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<invoke name="functionName" returntype="xml">\n    <arguments>\n        ... (individual argument values)\n    </arguments>\n</invoke>\n')),(0,i.kt)("p",null,"The root node is the ",(0,i.kt)("inlineCode",{parentName:"p"},"invoke")," node. It has two attributes: ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," indicates the\nname of the function to call, and ",(0,i.kt)("inlineCode",{parentName:"p"},"returntype")," is always ",(0,i.kt)("inlineCode",{parentName:"p"},"xml"),". If the function\ncall includes parameters, the ",(0,i.kt)("inlineCode",{parentName:"p"},"invoke")," node has a child ",(0,i.kt)("inlineCode",{parentName:"p"},"arguments")," node, whose\nchild nodes will be the parameter values formatted using the individual value\nformat explained next."),(0,i.kt)("p",null,"Individual values, including function parameters and function return values, use\na formatting scheme that includes data type information in addition to the\nactual values. The following table lists ActionScript classes and the XML format\nused to encode values of that data type:"),(0,i.kt)("table",null,(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,(0,i.kt)("p",null,"ActionScript class/value")),(0,i.kt)("th",null,(0,i.kt)("p",null,"C# class/value")),(0,i.kt)("th",null,(0,i.kt)("p",null,"Format")),(0,i.kt)("th",null,(0,i.kt)("p",null,"Comments")))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"null")),(0,i.kt)("td",null,(0,i.kt)("p",null,"null")),(0,i.kt)("td",null,(0,i.kt)("p",null,"<null/>")),(0,i.kt)("td",null)),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"Boolean ",(0,i.kt)("samp",null,"true"))),(0,i.kt)("td",null,(0,i.kt)("p",null,"bool true")),(0,i.kt)("td",null,(0,i.kt)("p",null,"<true/>")),(0,i.kt)("td",null)),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"Boolean ",(0,i.kt)("samp",null,"false"))),(0,i.kt)("td",null,(0,i.kt)("p",null,"bool false")),(0,i.kt)("td",null,(0,i.kt)("p",null,"<false/>")),(0,i.kt)("td",null)),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"String")),(0,i.kt)("td",null,(0,i.kt)("p",null,"string")),(0,i.kt)("td",null,(0,i.kt)("p",null,"<string>string value</string>")),(0,i.kt)("td",null)),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"Number, int, uint")),(0,i.kt)("td",null,(0,i.kt)("p",null,"single, double, int, uint")),(0,i.kt)("td",null,(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",null,"<number>27.5</number> <number>-12</number>")))),(0,i.kt)("td",null)),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"Array (elements can be mixed types)")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A collection that allows mixed-type elements, such as ArrayList or object[]")),(0,i.kt)("td",null,(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",null,'<array> <property id="0"> <number>27.5</number> </property> <property id="1"> <string>Hello there!</string> </property> ... </array>')))),(0,i.kt)("td",null,(0,i.kt)("p",null,"The ",(0,i.kt)("samp",null,"property")," node defines individual elements, and the ",(0,i.kt)("samp",null,"id")," attribute is the numeric, zero-based index."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"Object")),(0,i.kt)("td",null,(0,i.kt)("p",null,"A dictionary with string keys and object values, such as a HashTable with string keys")),(0,i.kt)("td",null,(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",null,'<object> <property id="name"> <string>John Doe</string> </property> <property id="age"> <string>33</string> </property> ... </object>')))),(0,i.kt)("td",null,(0,i.kt)("p",null,"The ",(0,i.kt)("samp",null,"property")," node defines individual properties, and the ",(0,i.kt)("samp",null,"id")," attribute is the property name (a string)."))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("p",null,"Other built-in or custom classes")),(0,i.kt)("td",null),(0,i.kt)("td",null,(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",null,"<null/> or <object></object>")))),(0,i.kt)("td",null,(0,i.kt)("p",null,"ActionScript encodes other objects as null or as an empty object. In either case any property values are lost."))))),(0,i.kt)("p",null,"Note: By way of example, this table shows equivalent C# classes in addition to\nActionScript classes; however, the external API can be used to communicate with\nany programming language or run time that supports ActiveX controls, and is not\nlimited to C# applications."),(0,i.kt)("p",null,"When you are building your own applications using the external API with an\nActiveX container application, you'll probably find it convenient to write a\nproxy that will perform the task of converting native function calls to the\nserialized XML format. For an example of a proxy class written in C#, see Inside\nthe ExternalInterfaceProxy class."))}d.isMDXComponent=!0}}]);