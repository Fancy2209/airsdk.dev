"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[65233],{3905:(e,t,i)=>{i.d(t,{Zo:()=>m,kt:()=>f});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(i),y=r,f=d["".concat(s,".").concat(y)]||d[y]||c[y]||o;return i?n.createElement(f,a(a({ref:t},m),{},{components:i})):n.createElement(f,a({ref:t},m))}));function f(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=i[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}y.displayName="MDXCreateElement"},32994:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=i(87462),r=(i(67294),i(3905));const o={sidebar_position:3},a="The position property of a FileStream object",l={unversionedId:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-position-property-of-a-filestream-object",id:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-position-property-of-a-filestream-object",title:"The position property of a FileStream object",description:"The position property of a FileStream object determines where data is read or",source:"@site/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-position-property-of-a-filestream-object.md",sourceDirName:"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects",slug:"/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-position-property-of-a-filestream-object",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-position-property-of-a-filestream-object",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-position-property-of-a-filestream-object.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Initializing a FileStream object, and opening and closing files",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/initializing-a-filestream-object-and-opening-and-closing-files"},next:{title:"The read buffer and the bytesAvailable property of a FileStream object",permalink:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-read-buffer-and-the-bytesavailable-property-of-a-filestream-object"}},s={},p=[],m={toc:p},d="wrapper";function c(e){let{components:t,...i}=e;return(0,r.kt)(d,(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-position-property-of-a-filestream-object"},"The position property of a FileStream object"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," property of a FileStream object determines where data is read or\nwritten on the next read or write method."),(0,r.kt)("p",null,"Before a read or write operation, set the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," property to any valid\nposition in the file."),(0,r.kt)("p",null,"For example, the following code writes the string ",(0,r.kt)("inlineCode",{parentName:"p"},'"hello"')," (in UTF encoding) at\nposition 8 in the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.open(myFile, FileMode.UPDATE);\nmyFileStream.position = 8;\nmyFileStream.writeUTFBytes("hello");\n')),(0,r.kt)("p",null,"When you first open a FileStream object, the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," property is set to 0."),(0,r.kt)("p",null,"Before a read operation, the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," must be at least 0 and less\nthan the number of bytes in the file (which are existing positions in the file)."),(0,r.kt)("p",null,"The value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," property is modified only in the following\nconditions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When you explicitly set the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," property.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When you call a read method.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When you call a write method."))),(0,r.kt)("p",null,"When you call a read or write method of a FileStream object, the ",(0,r.kt)("inlineCode",{parentName:"p"},"position"),"\nproperty is immediately incremented by the number of bytes that you read or\nwrite. Depending on the read method you use, the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," property is either\nincremented by the number of bytes you specify to read or by the number of bytes\navailable. When you call a read or write method subsequently, it reads or writes\nstarting at the new position."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.open(myFile, FileMode.UPDATE);\nmyFileStream.position = 4000;\ntrace(myFileStream.position); // 4000\nmyFileStream.writeBytes(myByteArray, 0, 200);\ntrace(myFileStream.position); // 4200\n')),(0,r.kt)("p",null,"There is, however, one exception: for a FileStream opened in append mode, the\n",(0,r.kt)("inlineCode",{parentName:"p"},"position")," property is not changed after a call to a write method. (In append\nmode, data is always written to the end of the file, independent of the value of\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," property.)"),(0,r.kt)("p",null,"For a file opened for asynchronous operations, the write operation does not\ncomplete before the next line of code is executed. However, you can call\nmultiple asynchronous methods sequentially, and the runtime executes them in\norder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.openAsync(myFile, FileMode.WRITE);\nmyFileStream.writeUTFBytes("hello");\nmyFileStream.writeUTFBytes("world");\nmyFileStream.addEventListener(Event.CLOSE, closeHandler);\nmyFileStream.close();\ntrace("started.");\n\ncloseHandler(event:Event):void\n{\n    trace("finished.");\n}\n')),(0,r.kt)("p",null,"The trace output for this code is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"started.\nfinished.\n")),(0,r.kt)("p",null,"You ",(0,r.kt)("em",{parentName:"p"},"can")," specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," value immediately after you call a read or\nwrite method (or at any time), and the next read or write operation will take\nplace starting at that position. For example, note that the following code sets\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," property right after a call to the ",(0,r.kt)("inlineCode",{parentName:"p"},"writeBytes()")," operation, and\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," is set to that value (300) even after the write operation\ncompletes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.openAsync(myFile, FileMode.UPDATE);\nmyFileStream.position = 4000;\ntrace(myFileStream.position); // 4000\nmyFileStream.writeBytes(myByteArray, 0, 200);\nmyFileStream.position = 300;\ntrace(myFileStream.position); // 300\n')))}c.isMDXComponent=!0}}]);