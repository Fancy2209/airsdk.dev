"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[39816],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),o=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=o(n),d=a,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(k,l(l({ref:t},u),{},{components:n})):r.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:4},l="Quantifiers",s={unversionedId:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers",id:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers",title:"Quantifiers",description:"You use quantifiers to specify repetitions of characters or sequences in",source:"@site/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers.md",sourceDirName:"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax",slug:"/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mainSidebar",previous:{title:"Character classes",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes"},next:{title:"Alternation",permalink:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/alternation"}},p={},o=[],u={toc:o},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quantifiers"},"Quantifiers"),(0,a.kt)("p",null,"You use quantifiers to specify repetitions of characters or sequences in\npatterns, as follows:"),(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,(0,a.kt)("p",null,"Quantifier metacharacter")),(0,a.kt)("th",null,(0,a.kt)("p",null,"Description")))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,(0,a.kt)("samp",null,"*"),"(star)")),(0,a.kt)("td",null,(0,a.kt)("p",null,"Matches the previous item repeated zero or more times."))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,(0,a.kt)("samp",null,"+"),"(plus)")),(0,a.kt)("td",null,(0,a.kt)("p",null,"Matches the previous item repeated one or more times."))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,(0,a.kt)("samp",null,"?"),"(question mark)")),(0,a.kt)("td",null,(0,a.kt)("p",null,"Matches the previous item repeated zero times or one time."))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("p",null,(0,a.kt)("samp",null,"{"),(0,a.kt)("samp",null,"n"),(0,a.kt)("samp",null,"}")),(0,a.kt)("p",null,(0,a.kt)("samp",null,"{"),(0,a.kt)("samp",null,"n"),(0,a.kt)("samp",null,",}")),(0,a.kt)("p",null,"and"),(0,a.kt)("p",null,(0,a.kt)("samp",null,"{"),(0,a.kt)("samp",null,"n"),(0,a.kt)("samp",null,","),(0,a.kt)("samp",null,"n"),(0,a.kt)("samp",null,"}"))),(0,a.kt)("td",null,(0,a.kt)("p",null,"Specifies a numeric quantifier or quantifier range for the previous item:"),(0,a.kt)("p",null,(0,a.kt)("samp",null,"/A",27,"/")," matches the character A repeated 27 times."),(0,a.kt)("p",null,(0,a.kt)("samp",null,"/A","{3,}","/")," matches the character A repeated 3 or more times."),(0,a.kt)("p",null,(0,a.kt)("samp",null,"/A",5,"/")," matches the character A repeated 3 to 5 times."))))),(0,a.kt)("p",null,"You can apply a quantifier to a single character, to a character class, or to a\ngroup:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"/a+/")," matches the character ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," repeated one or more times.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"/\\d+/")," matches one or more digits.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"/[abc]+/")," matches a repetition of one or more character, each of which is\neither ",(0,a.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"b"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"c"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"/(very, )*/")," matches the word ",(0,a.kt)("inlineCode",{parentName:"p"},"very")," followed by a comma and a space repeated\nzero or more times."))),(0,a.kt)("p",null,"You can use quantifiers within parenthetical groupings that have quantifiers\napplied to them. For example, the following quantifier matches strings such as\n",(0,a.kt)("inlineCode",{parentName:"p"},"word")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"word-word-word"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/\\w+(-\\w+)*/\n")),(0,a.kt)("p",null,"By default, regular expressions perform what is known as ",(0,a.kt)("em",{parentName:"p"},"greedy matching.")," Any\nsubpattern in the regular expression (such as ",(0,a.kt)("inlineCode",{parentName:"p"},".*"),") tries to match as many\ncharacters in the string as possible before moving forward to the next part of\nthe regular expression. For example, consider the following regular expression\nand string:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'var pattern:RegExp = /<p>.*<\\/p>/;\nstr:String = "<p>Paragraph 1</p> <p>Paragraph 2</p>";\n')),(0,a.kt)("p",null,"The regular expression matches the entire string:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<p>Paragraph 1</p> <p>Paragraph 2</p>\n")),(0,a.kt)("p",null,"Suppose, however, that you want to match only one ",(0,a.kt)("inlineCode",{parentName:"p"},"<p>...</p>")," grouping. You can\ndo this with the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<p>Paragraph 1</p>\n")),(0,a.kt)("p",null,"Add a question mark (",(0,a.kt)("inlineCode",{parentName:"p"},"?"),") after any quantifier to change it to what is known as\na ",(0,a.kt)("em",{parentName:"p"},"lazy quantifier"),". For example, the following regular expression, which uses\nthe lazy ",(0,a.kt)("inlineCode",{parentName:"p"},"*?")," quantifier, matches ",(0,a.kt)("inlineCode",{parentName:"p"},"<p>")," followed by the minimum number of\ncharacters possible (lazy), followed by ",(0,a.kt)("inlineCode",{parentName:"p"},"</p>"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/<p>.*?<\\/p>/\n")),(0,a.kt)("p",null,"Keep in mind the following points about quantifiers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The quantifiers ",(0,a.kt)("inlineCode",{parentName:"p"},"{0}")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"{0,0}")," do not exclude an item from a match.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Do not combine multiple quantifiers, as in ",(0,a.kt)("inlineCode",{parentName:"p"},"/abc+*/"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The dot (.) does not span lines unless the ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," (",(0,a.kt)("inlineCode",{parentName:"p"},"dotall"),") flag is set, even if\nit is followed by a ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," quantifier. For example, consider the following code:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'var str:String = "<p>Test\\n";\nstr += "Multiline</p>";\nvar re:RegExp = /<p>.*<\\/p>/;\ntrace(str.match(re)); // null;\n\nre = /<p>.*<\\/p>/s;\ntrace(str.match(re));\n    // output: <p>Test\n    //                    Multiline</p>\n')))),(0,a.kt)("p",null,"For more information, see ",(0,a.kt)("a",{parentName:"p",href:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/flags-and-properties"},"Flags and properties"),"."))}m.isMDXComponent=!0}}]);