"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[59115],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},l="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),l=d(n),p=o,m=l["".concat(c,".").concat(p)]||l[p]||h[p]||i;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=p;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[l]="string"==typeof e?e:o,s[1]=r;for(var d=2;d<i;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},24453:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const i={sidebar_position:2},s="Understanding the asynchronous execution model",r={unversionedId:"development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/understanding-the-asynchronous-execution-model",id:"development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/understanding-the-asynchronous-execution-model",title:"Understanding the asynchronous execution model",description:"One common concern about using asynchronous execution mode is the assumption",source:"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/understanding-the-asynchronous-execution-model.md",sourceDirName:"development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations",slug:"/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/understanding-the-asynchronous-execution-model",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/understanding-the-asynchronous-execution-model",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/understanding-the-asynchronous-execution-model.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Using synchronous database operations",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/using-synchronous-database-operations"},next:{title:"Using encryption with SQL databases",permalink:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-encryption-with-sql-databases"}},c={},d=[],u={toc:d},l="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"understanding-the-asynchronous-execution-model"},"Understanding the asynchronous execution model"),(0,o.kt)("p",null,"One common concern about using asynchronous execution mode is the assumption\nthat you can't start executing a\n",(0,o.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html"},"SQLStatement"),"\ninstance if another SQLStatement is currently executing against the same\ndatabase connection. In fact, this assumption isn't correct. While a\nSQLStatement instance is executing you can't change the ",(0,o.kt)("inlineCode",{parentName:"p"},"text")," property of the\nstatement. However, if you use a separate SQLStatement instance for each\ndifferent SQL statement that you want to execute, you can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute()"),"\nmethod of a SQLStatement while another SQLStatement instance is still executing,\nwithout causing an error."),(0,o.kt)("p",null,"Internally, when you're executing database operations using asynchronous\nexecution mode, each database connection (each\n",(0,o.kt)("a",{parentName:"p",href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html"},"SQLConnection"),"\ninstance) has its own queue or list of operations that it is instructed to\nperform. The runtime executes each operation in sequence, in the order they are\nadded to the queue. When you create a SQLStatement instance and call its\n",(0,o.kt)("inlineCode",{parentName:"p"},"execute()")," method, that statement execution operation is added to the queue for\nthe connection. If no operation is currently executing on that SQLConnection\ninstance, the statement begins executing in the background. Suppose that within\nthe same block of code you create another SQLStatement instance and also call\nthat method's ",(0,o.kt)("inlineCode",{parentName:"p"},"execute()")," method. That second statement execution operation is\nadded to the queue behind the first statement. As soon as the first statement\nfinishes executing, the runtime moves to the next operation in the queue. The\nprocessing of subsequent operations in the queue happens in the background, even\nwhile the ",(0,o.kt)("inlineCode",{parentName:"p"},"result")," event for the first operation is being dispatched in the main\napplication code. The following code demonstrates this technique:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// Using asynchronous execution mode\nvar stmt1:SQLStatement = new SQLStatement();\nstmt1.sqlConnection = conn;\n\n// ... Set statement text and parameters, and register event listeners ...\n\nstmt1.execute();\n\n// At this point stmt1's execute() operation is added to conn's execution queue.\n\nvar stmt2:SQLStatement = new SQLStatement();\nstmt2.sqlConnection = conn;\n\n// ... Set statement text and parameters, and register event listeners ...\n\nstmt2.execute();\n\n// At this point stmt2's execute() operation is added to conn's execution queue.\n// When stmt1 finishes executing, stmt2 will immediately begin executing\n// in the background.\n")),(0,o.kt)("p",null,"There is an important side effect of the database automatically executing\nsubsequent queued statements. If a statement depends on the outcome of another\noperation, you can't add the statement to the queue (in other words, you can't\ncall its ",(0,o.kt)("inlineCode",{parentName:"p"},"execute()")," method) until the first operation completes. This is\nbecause once you've called the second statement's ",(0,o.kt)("inlineCode",{parentName:"p"},"execute()")," method, you can't\nchange the statement's ",(0,o.kt)("inlineCode",{parentName:"p"},"text")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"parameters")," properties. In that case you must\nwait for the event indicating that the first operation completes before starting\nthe next operation. For example, if you want to execute a statement in the\ncontext of a transaction, the statement execution depends on the operation of\nopening the transaction. After calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"SQLConnection.begin()")," method to\nopen the transaction, you need to wait for the SQLConnection instance to\ndispatch its ",(0,o.kt)("inlineCode",{parentName:"p"},"begin")," event. Only then can you call the SQLStatement instance's\n",(0,o.kt)("inlineCode",{parentName:"p"},"execute()")," method. In this example the simplest way to organize the application\nto ensure that the operations are executed properly is to create a method that's\nregistered as a listener for the ",(0,o.kt)("inlineCode",{parentName:"p"},"begin")," event. The code to call the\n",(0,o.kt)("inlineCode",{parentName:"p"},"SQLStatement.execute()")," method is placed within that listener method."))}h.isMDXComponent=!0}}]);