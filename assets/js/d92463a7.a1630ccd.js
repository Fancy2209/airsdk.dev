"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[60244],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,h=p["".concat(d,".").concat(m)]||p[m]||c[m]||r;return t?a.createElement(h,i(i({ref:n},u),{},{components:t})):a.createElement(h,i({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},53518:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(87462),o=(t(67294),t(3905));const r={sidebar_position:6},i="Working with dynamically generated audio",l={unversionedId:"development/rich-media-content/working-with-sound/working-with-dynamically-generated-audio",id:"development/rich-media-content/working-with-sound/working-with-dynamically-generated-audio",title:"Working with dynamically generated audio",description:"Note: The ability to dynamically generate audio is available starting with Flash",source:"@site/docs/development/rich-media-content/working-with-sound/working-with-dynamically-generated-audio.md",sourceDirName:"development/rich-media-content/working-with-sound",slug:"/development/rich-media-content/working-with-sound/working-with-dynamically-generated-audio",permalink:"/docs/development/rich-media-content/working-with-sound/working-with-dynamically-generated-audio",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-sound/working-with-dynamically-generated-audio.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"mainSidebar",previous:{title:"Working with streaming sound files",permalink:"/docs/development/rich-media-content/working-with-sound/working-with-streaming-sound-files"},next:{title:"Playing sounds",permalink:"/docs/development/rich-media-content/working-with-sound/playing-sounds"}},d={},s=[{value:"Modifying sound from mp3 data",id:"modifying-sound-from-mp3-data",level:2},{value:"Limitations on generated sounds",id:"limitations-on-generated-sounds",level:2}],u={toc:s},p="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"working-with-dynamically-generated-audio"},"Working with dynamically generated audio"),(0,o.kt)("p",null,"Note: The ability to dynamically generate audio is available starting with Flash\nPlayer 10 and Adobe AIR 1.5."),(0,o.kt)("p",null,"Instead of loading or streaming an existing sound, you can generate audio data\ndynamically. You can generate audio data when you assign an event listener for\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleData")," event of a Sound object. (The ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleData")," event is defined in\nthe SampleDataEvent class in the flash.events package.) In this environment, the\nSound object doesn't load sound data from a file. Instead, it acts as a socket\nfor sound data that is being streamed to it through the use of the function you\nassign to this event."),(0,o.kt)("p",null,"When you add a ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleData")," event listener to a Sound object, the object\nperiodically requests data to add to the sound buffer. This buffer contains data\nfor the Sound object to play. When you call the ",(0,o.kt)("inlineCode",{parentName:"p"},"play()")," method of the Sound\nobject, it dispatches the ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleData")," event when requesting new sound data.\n(This is true only when the Sound object has not loaded mp3 data from a file.)"),(0,o.kt)("p",null,"The SampleDataEvent object includes a ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," property. In your event listener,\nyou write ByteArray objects to this ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," object. The byte arrays you write to\nthis object add to buffered sound data that the Sound object plays. The byte\narray in the buffer is a stream of floating-point values from -1 to 1. Each\nfloating-point value represents the amplitude of one channel (left or right) of\na sound sample. Sound is sampled at 44,100 samples per second. Each sample\ncontains a left and right channel, interleaved as floating-point data in the\nbyte array."),(0,o.kt)("p",null,"In your handler function, you use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteArray.writeFloat()")," method to write\nto the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," property of the ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleData")," event. For example, the following\ncode generates a sine wave:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"var mySound:Sound = new Sound();\nmySound.addEventListener(SampleDataEvent.SAMPLE_DATA, sineWaveGenerator);\nmySound.play();\nfunction sineWaveGenerator(event:SampleDataEvent):void\n{\n    for (var i:int = 0; i < 8192; i++)\n    {\n        var n:Number = Math.sin((i + event.position) / Math.PI / 4);\n        event.data.writeFloat(n);\n        event.data.writeFloat(n);\n    }\n}\n")),(0,o.kt)("p",null,"When you call ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.play()"),", the application starts calling your event handler,\nrequesting sound sample data. The application continues to send events as the\nsound plays back until you stop providing data, or until you call\n",(0,o.kt)("inlineCode",{parentName:"p"},"SoundChannel.stop()"),"."),(0,o.kt)("p",null,"The latency of the event varies from platform to platform, and could change in\nfuture versions of Flash Player and AIR. Do not depend on a specific latency;\ncalculate it instead. To calculate the latency, use the following formula:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(SampleDataEvent.position / 44.1) - SoundChannelObject.position\n")),(0,o.kt)("p",null,"Provide from 2048 through 8192 samples to the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," property of the\nSampleDataEvent object (for each call to the event listener). For best\nperformance, provide as many samples as possible (up to 8192). The fewer samples\nyou provide, the more likely it is that clicks and pops will occur during\nplayback. This behavior can differ on various platforms and can occur in various\nsituations\u2014for example, when resizing the browser. Code that works on one\nplatform when you provide only 2048 sample might not work as well when run on a\ndifferent platform. If you require the lowest latency possible, consider making\nthe amount of data user-selectable."),(0,o.kt)("p",null,"If you provide fewer than 2048 samples (per call to the ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleData")," event\nlistener), the application stops after playing the remaining samples. The\nSoundChannel object then dispatches a SoundComplete event."),(0,o.kt)("h2",{id:"modifying-sound-from-mp3-data"},"Modifying sound from mp3 data"),(0,o.kt)("p",null,"You use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.extract()")," method to extract data from a Sound object. You\ncan use (and modify) that data to write to the dynamic stream of another Sound\nobject for playback. For example, the following code uses the bytes of a loaded\nMP3 file and passes them through a filter function, ",(0,o.kt)("inlineCode",{parentName:"p"},"upOctave()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'var mySound:Sound = new Sound();\nvar sourceSnd:Sound = new Sound();\nvar urlReq:URLRequest = new URLRequest("test.mp3");\nsourceSnd.load(urlReq);\nsourceSnd.addEventListener(Event.COMPLETE, loaded);\nfunction loaded(event:Event):void\n{\n    mySound.addEventListener(SampleDataEvent.SAMPLE_DATA, processSound);\n    mySound.play();\n}\nfunction processSound(event:SampleDataEvent):void\n{\n    var bytes:ByteArray = new ByteArray();\n    sourceSnd.extract(bytes, 8192);\n    event.data.writeBytes(upOctave(bytes));\n}\nfunction upOctave(bytes:ByteArray):ByteArray\n{\n    var returnBytes:ByteArray = new ByteArray();\n    bytes.position = 0;\n    while(bytes.bytesAvailable > 0)\n    {\n        returnBytes.writeFloat(bytes.readFloat());\n        returnBytes.writeFloat(bytes.readFloat());\n        if (bytes.bytesAvailable > 0)\n        {\n            bytes.position += 8;\n        }\n    }\n    return returnBytes;\n}\n')),(0,o.kt)("h2",{id:"limitations-on-generated-sounds"},"Limitations on generated sounds"),(0,o.kt)("p",null,"When you use a ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleData")," event listener with a Sound object, the only other\nSound methods that are enabled are ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.extract()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Sound.play()"),". Calling\nany other methods or properties results in an exception. All methods and\nproperties of the SoundChannel object are still enabled."))}c.isMDXComponent=!0}}]);